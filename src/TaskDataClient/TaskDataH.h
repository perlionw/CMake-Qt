/* TaskDataH.h
   Generated by gSOAP 2.8.16 from .\taskdata.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef TaskDataH_H
#define TaskDataH_H
#include "TaskDataStub.h"

namespace TaskData {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 TaskData_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 TaskData_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 TaskData_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_byte
#define SOAP_TYPE_TaskData_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_byte(soap, data),0) || TaskData::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_int
#define SOAP_TYPE_TaskData_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_int(soap, data),0) || TaskData::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_double
#define SOAP_TYPE_TaskData_double (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_double(soap, data),0) || TaskData::soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_bool
#define SOAP_TYPE_TaskData_bool (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_bool(soap, data),0) || TaskData::soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_ns4__ControlTaskType
#define SOAP_TYPE_TaskData_ns4__ControlTaskType (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__ControlTaskType(struct soap*, enum ns4__ControlTaskType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ControlTaskType(struct soap*, const char*, int, const enum ns4__ControlTaskType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__ControlTaskType2s(struct soap*, enum ns4__ControlTaskType);
SOAP_FMAC3 enum ns4__ControlTaskType * SOAP_FMAC4 soap_in_ns4__ControlTaskType(struct soap*, const char*, enum ns4__ControlTaskType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__ControlTaskType(struct soap*, const char*, enum ns4__ControlTaskType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__ControlTaskType(struct soap*, const enum ns4__ControlTaskType *, const char*, const char*);

#ifndef soap_write_ns4__ControlTaskType
#define soap_write_ns4__ControlTaskType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_ns4__ControlTaskType(soap, data),0) || TaskData::soap_put_ns4__ControlTaskType(soap, data, "ns4:ControlTaskType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__ControlTaskType * SOAP_FMAC4 soap_get_ns4__ControlTaskType(struct soap*, enum ns4__ControlTaskType *, const char*, const char*);

#ifndef soap_read_ns4__ControlTaskType
#define soap_read_ns4__ControlTaskType(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__ControlTaskType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_ns4__PdControlType
#define SOAP_TYPE_TaskData_ns4__PdControlType (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__PdControlType(struct soap*, enum ns4__PdControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__PdControlType(struct soap*, const char*, int, const enum ns4__PdControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__PdControlType2s(struct soap*, enum ns4__PdControlType);
SOAP_FMAC3 enum ns4__PdControlType * SOAP_FMAC4 soap_in_ns4__PdControlType(struct soap*, const char*, enum ns4__PdControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__PdControlType(struct soap*, const char*, enum ns4__PdControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__PdControlType(struct soap*, const enum ns4__PdControlType *, const char*, const char*);

#ifndef soap_write_ns4__PdControlType
#define soap_write_ns4__PdControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_ns4__PdControlType(soap, data),0) || TaskData::soap_put_ns4__PdControlType(soap, data, "ns4:PdControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__PdControlType * SOAP_FMAC4 soap_get_ns4__PdControlType(struct soap*, enum ns4__PdControlType *, const char*, const char*);

#ifndef soap_read_ns4__PdControlType
#define soap_read_ns4__PdControlType(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__PdControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_ns4__LifterControlType
#define SOAP_TYPE_TaskData_ns4__LifterControlType (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__LifterControlType(struct soap*, enum ns4__LifterControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__LifterControlType(struct soap*, const char*, int, const enum ns4__LifterControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__LifterControlType2s(struct soap*, enum ns4__LifterControlType);
SOAP_FMAC3 enum ns4__LifterControlType * SOAP_FMAC4 soap_in_ns4__LifterControlType(struct soap*, const char*, enum ns4__LifterControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__LifterControlType(struct soap*, const char*, enum ns4__LifterControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__LifterControlType(struct soap*, const enum ns4__LifterControlType *, const char*, const char*);

#ifndef soap_write_ns4__LifterControlType
#define soap_write_ns4__LifterControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_ns4__LifterControlType(soap, data),0) || TaskData::soap_put_ns4__LifterControlType(soap, data, "ns4:LifterControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__LifterControlType * SOAP_FMAC4 soap_get_ns4__LifterControlType(struct soap*, enum ns4__LifterControlType *, const char*, const char*);

#ifndef soap_read_ns4__LifterControlType
#define soap_read_ns4__LifterControlType(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__LifterControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_ns4__FilrControlType
#define SOAP_TYPE_TaskData_ns4__FilrControlType (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__FilrControlType(struct soap*, enum ns4__FilrControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__FilrControlType(struct soap*, const char*, int, const enum ns4__FilrControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__FilrControlType2s(struct soap*, enum ns4__FilrControlType);
SOAP_FMAC3 enum ns4__FilrControlType * SOAP_FMAC4 soap_in_ns4__FilrControlType(struct soap*, const char*, enum ns4__FilrControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__FilrControlType(struct soap*, const char*, enum ns4__FilrControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__FilrControlType(struct soap*, const enum ns4__FilrControlType *, const char*, const char*);

#ifndef soap_write_ns4__FilrControlType
#define soap_write_ns4__FilrControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_ns4__FilrControlType(soap, data),0) || TaskData::soap_put_ns4__FilrControlType(soap, data, "ns4:FilrControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__FilrControlType * SOAP_FMAC4 soap_get_ns4__FilrControlType(struct soap*, enum ns4__FilrControlType *, const char*, const char*);

#ifndef soap_read_ns4__FilrControlType
#define soap_read_ns4__FilrControlType(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__FilrControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_ns4__WiperControlType
#define SOAP_TYPE_TaskData_ns4__WiperControlType (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__WiperControlType(struct soap*, enum ns4__WiperControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__WiperControlType(struct soap*, const char*, int, const enum ns4__WiperControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__WiperControlType2s(struct soap*, enum ns4__WiperControlType);
SOAP_FMAC3 enum ns4__WiperControlType * SOAP_FMAC4 soap_in_ns4__WiperControlType(struct soap*, const char*, enum ns4__WiperControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__WiperControlType(struct soap*, const char*, enum ns4__WiperControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__WiperControlType(struct soap*, const enum ns4__WiperControlType *, const char*, const char*);

#ifndef soap_write_ns4__WiperControlType
#define soap_write_ns4__WiperControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_ns4__WiperControlType(soap, data),0) || TaskData::soap_put_ns4__WiperControlType(soap, data, "ns4:WiperControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__WiperControlType * SOAP_FMAC4 soap_get_ns4__WiperControlType(struct soap*, enum ns4__WiperControlType *, const char*, const char*);

#ifndef soap_read_ns4__WiperControlType
#define soap_read_ns4__WiperControlType(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__WiperControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_ns4__LightControlType
#define SOAP_TYPE_TaskData_ns4__LightControlType (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__LightControlType(struct soap*, enum ns4__LightControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__LightControlType(struct soap*, const char*, int, const enum ns4__LightControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__LightControlType2s(struct soap*, enum ns4__LightControlType);
SOAP_FMAC3 enum ns4__LightControlType * SOAP_FMAC4 soap_in_ns4__LightControlType(struct soap*, const char*, enum ns4__LightControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__LightControlType(struct soap*, const char*, enum ns4__LightControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__LightControlType(struct soap*, const enum ns4__LightControlType *, const char*, const char*);

#ifndef soap_write_ns4__LightControlType
#define soap_write_ns4__LightControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_ns4__LightControlType(soap, data),0) || TaskData::soap_put_ns4__LightControlType(soap, data, "ns4:LightControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__LightControlType * SOAP_FMAC4 soap_get_ns4__LightControlType(struct soap*, enum ns4__LightControlType *, const char*, const char*);

#ifndef soap_read_ns4__LightControlType
#define soap_read_ns4__LightControlType(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__LightControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_ns4__CameraControlType
#define SOAP_TYPE_TaskData_ns4__CameraControlType (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__CameraControlType(struct soap*, enum ns4__CameraControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__CameraControlType(struct soap*, const char*, int, const enum ns4__CameraControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__CameraControlType2s(struct soap*, enum ns4__CameraControlType);
SOAP_FMAC3 enum ns4__CameraControlType * SOAP_FMAC4 soap_in_ns4__CameraControlType(struct soap*, const char*, enum ns4__CameraControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__CameraControlType(struct soap*, const char*, enum ns4__CameraControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__CameraControlType(struct soap*, const enum ns4__CameraControlType *, const char*, const char*);

#ifndef soap_write_ns4__CameraControlType
#define soap_write_ns4__CameraControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_ns4__CameraControlType(soap, data),0) || TaskData::soap_put_ns4__CameraControlType(soap, data, "ns4:CameraControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__CameraControlType * SOAP_FMAC4 soap_get_ns4__CameraControlType(struct soap*, enum ns4__CameraControlType *, const char*, const char*);

#ifndef soap_read_ns4__CameraControlType
#define soap_read_ns4__CameraControlType(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__CameraControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_ns4__YuntaiControlType
#define SOAP_TYPE_TaskData_ns4__YuntaiControlType (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns4__YuntaiControlType(struct soap*, enum ns4__YuntaiControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__YuntaiControlType(struct soap*, const char*, int, const enum ns4__YuntaiControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns4__YuntaiControlType2s(struct soap*, enum ns4__YuntaiControlType);
SOAP_FMAC3 enum ns4__YuntaiControlType * SOAP_FMAC4 soap_in_ns4__YuntaiControlType(struct soap*, const char*, enum ns4__YuntaiControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns4__YuntaiControlType(struct soap*, const char*, enum ns4__YuntaiControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__YuntaiControlType(struct soap*, const enum ns4__YuntaiControlType *, const char*, const char*);

#ifndef soap_write_ns4__YuntaiControlType
#define soap_write_ns4__YuntaiControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_ns4__YuntaiControlType(soap, data),0) || TaskData::soap_put_ns4__YuntaiControlType(soap, data, "ns4:YuntaiControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns4__YuntaiControlType * SOAP_FMAC4 soap_get_ns4__YuntaiControlType(struct soap*, enum ns4__YuntaiControlType *, const char*, const char*);

#ifndef soap_read_ns4__YuntaiControlType
#define soap_read_ns4__YuntaiControlType(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__YuntaiControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_std__string
#define SOAP_TYPE_TaskData_std__string (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetTaskExcuteDataResponse
#define SOAP_TYPE_TaskData__ns4__GetTaskExcuteDataResponse (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetTaskExcuteDataResponse(struct soap*, const char*, int, const _ns4__GetTaskExcuteDataResponse *, const char*);
SOAP_FMAC3 _ns4__GetTaskExcuteDataResponse * SOAP_FMAC4 soap_in__ns4__GetTaskExcuteDataResponse(struct soap*, const char*, _ns4__GetTaskExcuteDataResponse *, const char*);

#ifndef soap_write__ns4__GetTaskExcuteDataResponse
#define soap_write__ns4__GetTaskExcuteDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetTaskExcuteDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetTaskExcuteDataResponse * SOAP_FMAC4 soap_get__ns4__GetTaskExcuteDataResponse(struct soap*, _ns4__GetTaskExcuteDataResponse *, const char*, const char*);

#ifndef soap_read__ns4__GetTaskExcuteDataResponse
#define soap_read__ns4__GetTaskExcuteDataResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetTaskExcuteDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetTaskExcuteDataResponse * SOAP_FMAC2 soap_instantiate__ns4__GetTaskExcuteDataResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetTaskExcuteDataResponse * soap_new__ns4__GetTaskExcuteDataResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetTaskExcuteDataResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__GetTaskExcuteDataResponse * soap_new_req__ns4__GetTaskExcuteDataResponse(struct soap *soap, ns4__TaskExcuteData *Data) { _ns4__GetTaskExcuteDataResponse *_p = soap_instantiate__ns4__GetTaskExcuteDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetTaskExcuteDataResponse::Data = Data; } return _p; }

inline _ns4__GetTaskExcuteDataResponse * soap_new_set__ns4__GetTaskExcuteDataResponse(struct soap *soap, ns4__TaskExcuteData *Data) { _ns4__GetTaskExcuteDataResponse *_p = soap_instantiate__ns4__GetTaskExcuteDataResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetTaskExcuteDataResponse::Data = Data; } return _p; }

inline void soap_delete__ns4__GetTaskExcuteDataResponse(struct soap *soap, _ns4__GetTaskExcuteDataResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetTaskExcuteDataResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetTaskExcuteData
#define SOAP_TYPE_TaskData__ns4__GetTaskExcuteData (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetTaskExcuteData(struct soap*, const char*, int, const _ns4__GetTaskExcuteData *, const char*);
SOAP_FMAC3 _ns4__GetTaskExcuteData * SOAP_FMAC4 soap_in__ns4__GetTaskExcuteData(struct soap*, const char*, _ns4__GetTaskExcuteData *, const char*);

#ifndef soap_write__ns4__GetTaskExcuteData
#define soap_write__ns4__GetTaskExcuteData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetTaskExcuteData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetTaskExcuteData * SOAP_FMAC4 soap_get__ns4__GetTaskExcuteData(struct soap*, _ns4__GetTaskExcuteData *, const char*, const char*);

#ifndef soap_read__ns4__GetTaskExcuteData
#define soap_read__ns4__GetTaskExcuteData(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetTaskExcuteData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetTaskExcuteData * SOAP_FMAC2 soap_instantiate__ns4__GetTaskExcuteData(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetTaskExcuteData * soap_new__ns4__GetTaskExcuteData(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetTaskExcuteData(soap, n, NULL, NULL, NULL); }

inline _ns4__GetTaskExcuteData * soap_new_req__ns4__GetTaskExcuteData(struct soap *soap, std::string& robotIp) { _ns4__GetTaskExcuteData *_p = soap_instantiate__ns4__GetTaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetTaskExcuteData::robotIp = robotIp; } return _p; }

inline _ns4__GetTaskExcuteData * soap_new_set__ns4__GetTaskExcuteData(struct soap *soap, std::string& robotIp) { _ns4__GetTaskExcuteData *_p = soap_instantiate__ns4__GetTaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetTaskExcuteData::robotIp = robotIp; } return _p; }

inline void soap_delete__ns4__GetTaskExcuteData(struct soap *soap, _ns4__GetTaskExcuteData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetTaskExcuteData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__RobotControlTaskResponse
#define SOAP_TYPE_TaskData__ns4__RobotControlTaskResponse (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__RobotControlTaskResponse(struct soap*, const char*, int, const _ns4__RobotControlTaskResponse *, const char*);
SOAP_FMAC3 _ns4__RobotControlTaskResponse * SOAP_FMAC4 soap_in__ns4__RobotControlTaskResponse(struct soap*, const char*, _ns4__RobotControlTaskResponse *, const char*);

#ifndef soap_write__ns4__RobotControlTaskResponse
#define soap_write__ns4__RobotControlTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotControlTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__RobotControlTaskResponse * SOAP_FMAC4 soap_get__ns4__RobotControlTaskResponse(struct soap*, _ns4__RobotControlTaskResponse *, const char*, const char*);

#ifndef soap_read__ns4__RobotControlTaskResponse
#define soap_read__ns4__RobotControlTaskResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__RobotControlTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__RobotControlTaskResponse * SOAP_FMAC2 soap_instantiate__ns4__RobotControlTaskResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__RobotControlTaskResponse * soap_new__ns4__RobotControlTaskResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__RobotControlTaskResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__RobotControlTaskResponse * soap_new_req__ns4__RobotControlTaskResponse(struct soap *soap, int Result) { _ns4__RobotControlTaskResponse *_p = soap_instantiate__ns4__RobotControlTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__RobotControlTaskResponse::Result = Result; } return _p; }

inline _ns4__RobotControlTaskResponse * soap_new_set__ns4__RobotControlTaskResponse(struct soap *soap, int Result) { _ns4__RobotControlTaskResponse *_p = soap_instantiate__ns4__RobotControlTaskResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__RobotControlTaskResponse::Result = Result; } return _p; }

inline void soap_delete__ns4__RobotControlTaskResponse(struct soap *soap, _ns4__RobotControlTaskResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__RobotControlTaskResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__RobotControlTask
#define SOAP_TYPE_TaskData__ns4__RobotControlTask (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__RobotControlTask(struct soap*, const char*, int, const _ns4__RobotControlTask *, const char*);
SOAP_FMAC3 _ns4__RobotControlTask * SOAP_FMAC4 soap_in__ns4__RobotControlTask(struct soap*, const char*, _ns4__RobotControlTask *, const char*);

#ifndef soap_write__ns4__RobotControlTask
#define soap_write__ns4__RobotControlTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotControlTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__RobotControlTask * SOAP_FMAC4 soap_get__ns4__RobotControlTask(struct soap*, _ns4__RobotControlTask *, const char*, const char*);

#ifndef soap_read__ns4__RobotControlTask
#define soap_read__ns4__RobotControlTask(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__RobotControlTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__RobotControlTask * SOAP_FMAC2 soap_instantiate__ns4__RobotControlTask(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__RobotControlTask * soap_new__ns4__RobotControlTask(struct soap *soap, int n = -1) { return soap_instantiate__ns4__RobotControlTask(soap, n, NULL, NULL, NULL); }

inline _ns4__RobotControlTask * soap_new_req__ns4__RobotControlTask(struct soap *soap, enum ns4__ControlTaskType Type) { _ns4__RobotControlTask *_p = soap_instantiate__ns4__RobotControlTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__RobotControlTask::Type = Type; } return _p; }

inline _ns4__RobotControlTask * soap_new_set__ns4__RobotControlTask(struct soap *soap, enum ns4__ControlTaskType Type) { _ns4__RobotControlTask *_p = soap_instantiate__ns4__RobotControlTask(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__RobotControlTask::Type = Type; } return _p; }

inline void soap_delete__ns4__RobotControlTask(struct soap *soap, _ns4__RobotControlTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__RobotControlTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__SetTaskPathInfoResponse
#define SOAP_TYPE_TaskData__ns4__SetTaskPathInfoResponse (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__SetTaskPathInfoResponse(struct soap*, const char*, int, const _ns4__SetTaskPathInfoResponse *, const char*);
SOAP_FMAC3 _ns4__SetTaskPathInfoResponse * SOAP_FMAC4 soap_in__ns4__SetTaskPathInfoResponse(struct soap*, const char*, _ns4__SetTaskPathInfoResponse *, const char*);

#ifndef soap_write__ns4__SetTaskPathInfoResponse
#define soap_write__ns4__SetTaskPathInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:SetTaskPathInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__SetTaskPathInfoResponse * SOAP_FMAC4 soap_get__ns4__SetTaskPathInfoResponse(struct soap*, _ns4__SetTaskPathInfoResponse *, const char*, const char*);

#ifndef soap_read__ns4__SetTaskPathInfoResponse
#define soap_read__ns4__SetTaskPathInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__SetTaskPathInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__SetTaskPathInfoResponse * SOAP_FMAC2 soap_instantiate__ns4__SetTaskPathInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__SetTaskPathInfoResponse * soap_new__ns4__SetTaskPathInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__SetTaskPathInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__SetTaskPathInfoResponse * soap_new_req__ns4__SetTaskPathInfoResponse(struct soap *soap, int Result) { _ns4__SetTaskPathInfoResponse *_p = soap_instantiate__ns4__SetTaskPathInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__SetTaskPathInfoResponse::Result = Result; } return _p; }

inline _ns4__SetTaskPathInfoResponse * soap_new_set__ns4__SetTaskPathInfoResponse(struct soap *soap, int Result) { _ns4__SetTaskPathInfoResponse *_p = soap_instantiate__ns4__SetTaskPathInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__SetTaskPathInfoResponse::Result = Result; } return _p; }

inline void soap_delete__ns4__SetTaskPathInfoResponse(struct soap *soap, _ns4__SetTaskPathInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__SetTaskPathInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__SetTaskPathInfo
#define SOAP_TYPE_TaskData__ns4__SetTaskPathInfo (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__SetTaskPathInfo(struct soap*, const char*, int, const _ns4__SetTaskPathInfo *, const char*);
SOAP_FMAC3 _ns4__SetTaskPathInfo * SOAP_FMAC4 soap_in__ns4__SetTaskPathInfo(struct soap*, const char*, _ns4__SetTaskPathInfo *, const char*);

#ifndef soap_write__ns4__SetTaskPathInfo
#define soap_write__ns4__SetTaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:SetTaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__SetTaskPathInfo * SOAP_FMAC4 soap_get__ns4__SetTaskPathInfo(struct soap*, _ns4__SetTaskPathInfo *, const char*, const char*);

#ifndef soap_read__ns4__SetTaskPathInfo
#define soap_read__ns4__SetTaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__SetTaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__SetTaskPathInfo * SOAP_FMAC2 soap_instantiate__ns4__SetTaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__SetTaskPathInfo * soap_new__ns4__SetTaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns4__SetTaskPathInfo(soap, n, NULL, NULL, NULL); }

inline _ns4__SetTaskPathInfo * soap_new_req__ns4__SetTaskPathInfo(struct soap *soap, ns4__TaskPathInfo *info) { _ns4__SetTaskPathInfo *_p = soap_instantiate__ns4__SetTaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__SetTaskPathInfo::info = info; } return _p; }

inline _ns4__SetTaskPathInfo * soap_new_set__ns4__SetTaskPathInfo(struct soap *soap, ns4__TaskPathInfo *info) { _ns4__SetTaskPathInfo *_p = soap_instantiate__ns4__SetTaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__SetTaskPathInfo::info = info; } return _p; }

inline void soap_delete__ns4__SetTaskPathInfo(struct soap *soap, _ns4__SetTaskPathInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__SetTaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__StartTaskByPointListResponse
#define SOAP_TYPE_TaskData__ns4__StartTaskByPointListResponse (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__StartTaskByPointListResponse(struct soap*, const char*, int, const _ns4__StartTaskByPointListResponse *, const char*);
SOAP_FMAC3 _ns4__StartTaskByPointListResponse * SOAP_FMAC4 soap_in__ns4__StartTaskByPointListResponse(struct soap*, const char*, _ns4__StartTaskByPointListResponse *, const char*);

#ifndef soap_write__ns4__StartTaskByPointListResponse
#define soap_write__ns4__StartTaskByPointListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:StartTaskByPointListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__StartTaskByPointListResponse * SOAP_FMAC4 soap_get__ns4__StartTaskByPointListResponse(struct soap*, _ns4__StartTaskByPointListResponse *, const char*, const char*);

#ifndef soap_read__ns4__StartTaskByPointListResponse
#define soap_read__ns4__StartTaskByPointListResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__StartTaskByPointListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__StartTaskByPointListResponse * SOAP_FMAC2 soap_instantiate__ns4__StartTaskByPointListResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__StartTaskByPointListResponse * soap_new__ns4__StartTaskByPointListResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__StartTaskByPointListResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__StartTaskByPointListResponse * soap_new_req__ns4__StartTaskByPointListResponse(struct soap *soap, int Result) { _ns4__StartTaskByPointListResponse *_p = soap_instantiate__ns4__StartTaskByPointListResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__StartTaskByPointListResponse::Result = Result; } return _p; }

inline _ns4__StartTaskByPointListResponse * soap_new_set__ns4__StartTaskByPointListResponse(struct soap *soap, int Result) { _ns4__StartTaskByPointListResponse *_p = soap_instantiate__ns4__StartTaskByPointListResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__StartTaskByPointListResponse::Result = Result; } return _p; }

inline void soap_delete__ns4__StartTaskByPointListResponse(struct soap *soap, _ns4__StartTaskByPointListResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__StartTaskByPointListResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__StartTaskByPointList
#define SOAP_TYPE_TaskData__ns4__StartTaskByPointList (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__StartTaskByPointList(struct soap*, const char*, int, const _ns4__StartTaskByPointList *, const char*);
SOAP_FMAC3 _ns4__StartTaskByPointList * SOAP_FMAC4 soap_in__ns4__StartTaskByPointList(struct soap*, const char*, _ns4__StartTaskByPointList *, const char*);

#ifndef soap_write__ns4__StartTaskByPointList
#define soap_write__ns4__StartTaskByPointList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:StartTaskByPointList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__StartTaskByPointList * SOAP_FMAC4 soap_get__ns4__StartTaskByPointList(struct soap*, _ns4__StartTaskByPointList *, const char*, const char*);

#ifndef soap_read__ns4__StartTaskByPointList
#define soap_read__ns4__StartTaskByPointList(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__StartTaskByPointList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__StartTaskByPointList * SOAP_FMAC2 soap_instantiate__ns4__StartTaskByPointList(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__StartTaskByPointList * soap_new__ns4__StartTaskByPointList(struct soap *soap, int n = -1) { return soap_instantiate__ns4__StartTaskByPointList(soap, n, NULL, NULL, NULL); }

inline _ns4__StartTaskByPointList * soap_new_req__ns4__StartTaskByPointList(struct soap *soap, std::string& TaskId, std::vector<std::string >& PointList) { _ns4__StartTaskByPointList *_p = soap_instantiate__ns4__StartTaskByPointList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__StartTaskByPointList::TaskId = TaskId; _p->_ns4__StartTaskByPointList::PointList = PointList; } return _p; }

inline _ns4__StartTaskByPointList * soap_new_set__ns4__StartTaskByPointList(struct soap *soap, std::string& TaskId, std::vector<std::string >& PointList) { _ns4__StartTaskByPointList *_p = soap_instantiate__ns4__StartTaskByPointList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__StartTaskByPointList::TaskId = TaskId; _p->_ns4__StartTaskByPointList::PointList = PointList; } return _p; }

inline void soap_delete__ns4__StartTaskByPointList(struct soap *soap, _ns4__StartTaskByPointList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__StartTaskByPointList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__StartTaskByPathIdResponse
#define SOAP_TYPE_TaskData__ns4__StartTaskByPathIdResponse (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__StartTaskByPathIdResponse(struct soap*, const char*, int, const _ns4__StartTaskByPathIdResponse *, const char*);
SOAP_FMAC3 _ns4__StartTaskByPathIdResponse * SOAP_FMAC4 soap_in__ns4__StartTaskByPathIdResponse(struct soap*, const char*, _ns4__StartTaskByPathIdResponse *, const char*);

#ifndef soap_write__ns4__StartTaskByPathIdResponse
#define soap_write__ns4__StartTaskByPathIdResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:StartTaskByPathIdResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__StartTaskByPathIdResponse * SOAP_FMAC4 soap_get__ns4__StartTaskByPathIdResponse(struct soap*, _ns4__StartTaskByPathIdResponse *, const char*, const char*);

#ifndef soap_read__ns4__StartTaskByPathIdResponse
#define soap_read__ns4__StartTaskByPathIdResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__StartTaskByPathIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__StartTaskByPathIdResponse * SOAP_FMAC2 soap_instantiate__ns4__StartTaskByPathIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__StartTaskByPathIdResponse * soap_new__ns4__StartTaskByPathIdResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__StartTaskByPathIdResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__StartTaskByPathIdResponse * soap_new_req__ns4__StartTaskByPathIdResponse(struct soap *soap, int Result) { _ns4__StartTaskByPathIdResponse *_p = soap_instantiate__ns4__StartTaskByPathIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__StartTaskByPathIdResponse::Result = Result; } return _p; }

inline _ns4__StartTaskByPathIdResponse * soap_new_set__ns4__StartTaskByPathIdResponse(struct soap *soap, int Result) { _ns4__StartTaskByPathIdResponse *_p = soap_instantiate__ns4__StartTaskByPathIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__StartTaskByPathIdResponse::Result = Result; } return _p; }

inline void soap_delete__ns4__StartTaskByPathIdResponse(struct soap *soap, _ns4__StartTaskByPathIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__StartTaskByPathIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__StartTaskByPathId
#define SOAP_TYPE_TaskData__ns4__StartTaskByPathId (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__StartTaskByPathId(struct soap*, const char*, int, const _ns4__StartTaskByPathId *, const char*);
SOAP_FMAC3 _ns4__StartTaskByPathId * SOAP_FMAC4 soap_in__ns4__StartTaskByPathId(struct soap*, const char*, _ns4__StartTaskByPathId *, const char*);

#ifndef soap_write__ns4__StartTaskByPathId
#define soap_write__ns4__StartTaskByPathId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:StartTaskByPathId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__StartTaskByPathId * SOAP_FMAC4 soap_get__ns4__StartTaskByPathId(struct soap*, _ns4__StartTaskByPathId *, const char*, const char*);

#ifndef soap_read__ns4__StartTaskByPathId
#define soap_read__ns4__StartTaskByPathId(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__StartTaskByPathId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__StartTaskByPathId * SOAP_FMAC2 soap_instantiate__ns4__StartTaskByPathId(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__StartTaskByPathId * soap_new__ns4__StartTaskByPathId(struct soap *soap, int n = -1) { return soap_instantiate__ns4__StartTaskByPathId(soap, n, NULL, NULL, NULL); }

inline _ns4__StartTaskByPathId * soap_new_req__ns4__StartTaskByPathId(struct soap *soap, std::string& TaskId, std::string& TaskPathId) { _ns4__StartTaskByPathId *_p = soap_instantiate__ns4__StartTaskByPathId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__StartTaskByPathId::TaskId = TaskId; _p->_ns4__StartTaskByPathId::TaskPathId = TaskPathId; } return _p; }

inline _ns4__StartTaskByPathId * soap_new_set__ns4__StartTaskByPathId(struct soap *soap, std::string& TaskId, std::string& TaskPathId) { _ns4__StartTaskByPathId *_p = soap_instantiate__ns4__StartTaskByPathId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__StartTaskByPathId::TaskId = TaskId; _p->_ns4__StartTaskByPathId::TaskPathId = TaskPathId; } return _p; }

inline void soap_delete__ns4__StartTaskByPathId(struct soap *soap, _ns4__StartTaskByPathId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__StartTaskByPathId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetTaskPathInfoResponse
#define SOAP_TYPE_TaskData__ns4__GetTaskPathInfoResponse (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetTaskPathInfoResponse(struct soap*, const char*, int, const _ns4__GetTaskPathInfoResponse *, const char*);
SOAP_FMAC3 _ns4__GetTaskPathInfoResponse * SOAP_FMAC4 soap_in__ns4__GetTaskPathInfoResponse(struct soap*, const char*, _ns4__GetTaskPathInfoResponse *, const char*);

#ifndef soap_write__ns4__GetTaskPathInfoResponse
#define soap_write__ns4__GetTaskPathInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetTaskPathInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetTaskPathInfoResponse * SOAP_FMAC4 soap_get__ns4__GetTaskPathInfoResponse(struct soap*, _ns4__GetTaskPathInfoResponse *, const char*, const char*);

#ifndef soap_read__ns4__GetTaskPathInfoResponse
#define soap_read__ns4__GetTaskPathInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetTaskPathInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetTaskPathInfoResponse * SOAP_FMAC2 soap_instantiate__ns4__GetTaskPathInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetTaskPathInfoResponse * soap_new__ns4__GetTaskPathInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetTaskPathInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__GetTaskPathInfoResponse * soap_new_req__ns4__GetTaskPathInfoResponse(struct soap *soap, ns4__TaskPathInfos *Data) { _ns4__GetTaskPathInfoResponse *_p = soap_instantiate__ns4__GetTaskPathInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetTaskPathInfoResponse::Data = Data; } return _p; }

inline _ns4__GetTaskPathInfoResponse * soap_new_set__ns4__GetTaskPathInfoResponse(struct soap *soap, ns4__TaskPathInfos *Data) { _ns4__GetTaskPathInfoResponse *_p = soap_instantiate__ns4__GetTaskPathInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetTaskPathInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns4__GetTaskPathInfoResponse(struct soap *soap, _ns4__GetTaskPathInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetTaskPathInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetTaskPathInfo
#define SOAP_TYPE_TaskData__ns4__GetTaskPathInfo (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetTaskPathInfo(struct soap*, const char*, int, const _ns4__GetTaskPathInfo *, const char*);
SOAP_FMAC3 _ns4__GetTaskPathInfo * SOAP_FMAC4 soap_in__ns4__GetTaskPathInfo(struct soap*, const char*, _ns4__GetTaskPathInfo *, const char*);

#ifndef soap_write__ns4__GetTaskPathInfo
#define soap_write__ns4__GetTaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetTaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetTaskPathInfo * SOAP_FMAC4 soap_get__ns4__GetTaskPathInfo(struct soap*, _ns4__GetTaskPathInfo *, const char*, const char*);

#ifndef soap_read__ns4__GetTaskPathInfo
#define soap_read__ns4__GetTaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetTaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetTaskPathInfo * SOAP_FMAC2 soap_instantiate__ns4__GetTaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetTaskPathInfo * soap_new__ns4__GetTaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetTaskPathInfo(soap, n, NULL, NULL, NULL); }

inline _ns4__GetTaskPathInfo * soap_new_req__ns4__GetTaskPathInfo(struct soap *soap) { _ns4__GetTaskPathInfo *_p = soap_instantiate__ns4__GetTaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__GetTaskPathInfo * soap_new_set__ns4__GetTaskPathInfo(struct soap *soap) { _ns4__GetTaskPathInfo *_p = soap_instantiate__ns4__GetTaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__GetTaskPathInfo(struct soap *soap, _ns4__GetTaskPathInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetTaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetPatrolPointInfoResponse
#define SOAP_TYPE_TaskData__ns4__GetPatrolPointInfoResponse (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetPatrolPointInfoResponse(struct soap*, const char*, int, const _ns4__GetPatrolPointInfoResponse *, const char*);
SOAP_FMAC3 _ns4__GetPatrolPointInfoResponse * SOAP_FMAC4 soap_in__ns4__GetPatrolPointInfoResponse(struct soap*, const char*, _ns4__GetPatrolPointInfoResponse *, const char*);

#ifndef soap_write__ns4__GetPatrolPointInfoResponse
#define soap_write__ns4__GetPatrolPointInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetPatrolPointInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetPatrolPointInfoResponse * SOAP_FMAC4 soap_get__ns4__GetPatrolPointInfoResponse(struct soap*, _ns4__GetPatrolPointInfoResponse *, const char*, const char*);

#ifndef soap_read__ns4__GetPatrolPointInfoResponse
#define soap_read__ns4__GetPatrolPointInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetPatrolPointInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetPatrolPointInfoResponse * SOAP_FMAC2 soap_instantiate__ns4__GetPatrolPointInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetPatrolPointInfoResponse * soap_new__ns4__GetPatrolPointInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetPatrolPointInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__GetPatrolPointInfoResponse * soap_new_req__ns4__GetPatrolPointInfoResponse(struct soap *soap, ns4__PatrolPointInfos *Data) { _ns4__GetPatrolPointInfoResponse *_p = soap_instantiate__ns4__GetPatrolPointInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetPatrolPointInfoResponse::Data = Data; } return _p; }

inline _ns4__GetPatrolPointInfoResponse * soap_new_set__ns4__GetPatrolPointInfoResponse(struct soap *soap, ns4__PatrolPointInfos *Data) { _ns4__GetPatrolPointInfoResponse *_p = soap_instantiate__ns4__GetPatrolPointInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetPatrolPointInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns4__GetPatrolPointInfoResponse(struct soap *soap, _ns4__GetPatrolPointInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetPatrolPointInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetPatrolPointInfo
#define SOAP_TYPE_TaskData__ns4__GetPatrolPointInfo (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetPatrolPointInfo(struct soap*, const char*, int, const _ns4__GetPatrolPointInfo *, const char*);
SOAP_FMAC3 _ns4__GetPatrolPointInfo * SOAP_FMAC4 soap_in__ns4__GetPatrolPointInfo(struct soap*, const char*, _ns4__GetPatrolPointInfo *, const char*);

#ifndef soap_write__ns4__GetPatrolPointInfo
#define soap_write__ns4__GetPatrolPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetPatrolPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetPatrolPointInfo * SOAP_FMAC4 soap_get__ns4__GetPatrolPointInfo(struct soap*, _ns4__GetPatrolPointInfo *, const char*, const char*);

#ifndef soap_read__ns4__GetPatrolPointInfo
#define soap_read__ns4__GetPatrolPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetPatrolPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetPatrolPointInfo * SOAP_FMAC2 soap_instantiate__ns4__GetPatrolPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetPatrolPointInfo * soap_new__ns4__GetPatrolPointInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetPatrolPointInfo(soap, n, NULL, NULL, NULL); }

inline _ns4__GetPatrolPointInfo * soap_new_req__ns4__GetPatrolPointInfo(struct soap *soap) { _ns4__GetPatrolPointInfo *_p = soap_instantiate__ns4__GetPatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__GetPatrolPointInfo * soap_new_set__ns4__GetPatrolPointInfo(struct soap *soap) { _ns4__GetPatrolPointInfo *_p = soap_instantiate__ns4__GetPatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__GetPatrolPointInfo(struct soap *soap, _ns4__GetPatrolPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetPatrolPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetDockPointInfoResponse
#define SOAP_TYPE_TaskData__ns4__GetDockPointInfoResponse (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetDockPointInfoResponse(struct soap*, const char*, int, const _ns4__GetDockPointInfoResponse *, const char*);
SOAP_FMAC3 _ns4__GetDockPointInfoResponse * SOAP_FMAC4 soap_in__ns4__GetDockPointInfoResponse(struct soap*, const char*, _ns4__GetDockPointInfoResponse *, const char*);

#ifndef soap_write__ns4__GetDockPointInfoResponse
#define soap_write__ns4__GetDockPointInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetDockPointInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetDockPointInfoResponse * SOAP_FMAC4 soap_get__ns4__GetDockPointInfoResponse(struct soap*, _ns4__GetDockPointInfoResponse *, const char*, const char*);

#ifndef soap_read__ns4__GetDockPointInfoResponse
#define soap_read__ns4__GetDockPointInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetDockPointInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetDockPointInfoResponse * SOAP_FMAC2 soap_instantiate__ns4__GetDockPointInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetDockPointInfoResponse * soap_new__ns4__GetDockPointInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetDockPointInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__GetDockPointInfoResponse * soap_new_req__ns4__GetDockPointInfoResponse(struct soap *soap, ns4__DockPointInfos *Data) { _ns4__GetDockPointInfoResponse *_p = soap_instantiate__ns4__GetDockPointInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetDockPointInfoResponse::Data = Data; } return _p; }

inline _ns4__GetDockPointInfoResponse * soap_new_set__ns4__GetDockPointInfoResponse(struct soap *soap, ns4__DockPointInfos *Data) { _ns4__GetDockPointInfoResponse *_p = soap_instantiate__ns4__GetDockPointInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetDockPointInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns4__GetDockPointInfoResponse(struct soap *soap, _ns4__GetDockPointInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetDockPointInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetDockPointInfo
#define SOAP_TYPE_TaskData__ns4__GetDockPointInfo (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetDockPointInfo(struct soap*, const char*, int, const _ns4__GetDockPointInfo *, const char*);
SOAP_FMAC3 _ns4__GetDockPointInfo * SOAP_FMAC4 soap_in__ns4__GetDockPointInfo(struct soap*, const char*, _ns4__GetDockPointInfo *, const char*);

#ifndef soap_write__ns4__GetDockPointInfo
#define soap_write__ns4__GetDockPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetDockPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetDockPointInfo * SOAP_FMAC4 soap_get__ns4__GetDockPointInfo(struct soap*, _ns4__GetDockPointInfo *, const char*, const char*);

#ifndef soap_read__ns4__GetDockPointInfo
#define soap_read__ns4__GetDockPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetDockPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetDockPointInfo * SOAP_FMAC2 soap_instantiate__ns4__GetDockPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetDockPointInfo * soap_new__ns4__GetDockPointInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetDockPointInfo(soap, n, NULL, NULL, NULL); }

inline _ns4__GetDockPointInfo * soap_new_req__ns4__GetDockPointInfo(struct soap *soap) { _ns4__GetDockPointInfo *_p = soap_instantiate__ns4__GetDockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__GetDockPointInfo * soap_new_set__ns4__GetDockPointInfo(struct soap *soap) { _ns4__GetDockPointInfo *_p = soap_instantiate__ns4__GetDockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__GetDockPointInfo(struct soap *soap, _ns4__GetDockPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetDockPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetMapEdgeInfoResponse
#define SOAP_TYPE_TaskData__ns4__GetMapEdgeInfoResponse (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetMapEdgeInfoResponse(struct soap*, const char*, int, const _ns4__GetMapEdgeInfoResponse *, const char*);
SOAP_FMAC3 _ns4__GetMapEdgeInfoResponse * SOAP_FMAC4 soap_in__ns4__GetMapEdgeInfoResponse(struct soap*, const char*, _ns4__GetMapEdgeInfoResponse *, const char*);

#ifndef soap_write__ns4__GetMapEdgeInfoResponse
#define soap_write__ns4__GetMapEdgeInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetMapEdgeInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetMapEdgeInfoResponse * SOAP_FMAC4 soap_get__ns4__GetMapEdgeInfoResponse(struct soap*, _ns4__GetMapEdgeInfoResponse *, const char*, const char*);

#ifndef soap_read__ns4__GetMapEdgeInfoResponse
#define soap_read__ns4__GetMapEdgeInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetMapEdgeInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetMapEdgeInfoResponse * SOAP_FMAC2 soap_instantiate__ns4__GetMapEdgeInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetMapEdgeInfoResponse * soap_new__ns4__GetMapEdgeInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetMapEdgeInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__GetMapEdgeInfoResponse * soap_new_req__ns4__GetMapEdgeInfoResponse(struct soap *soap, ns4__MapEdgeInfos *Data) { _ns4__GetMapEdgeInfoResponse *_p = soap_instantiate__ns4__GetMapEdgeInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetMapEdgeInfoResponse::Data = Data; } return _p; }

inline _ns4__GetMapEdgeInfoResponse * soap_new_set__ns4__GetMapEdgeInfoResponse(struct soap *soap, ns4__MapEdgeInfos *Data) { _ns4__GetMapEdgeInfoResponse *_p = soap_instantiate__ns4__GetMapEdgeInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetMapEdgeInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns4__GetMapEdgeInfoResponse(struct soap *soap, _ns4__GetMapEdgeInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetMapEdgeInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetMapEdgeInfo
#define SOAP_TYPE_TaskData__ns4__GetMapEdgeInfo (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetMapEdgeInfo(struct soap*, const char*, int, const _ns4__GetMapEdgeInfo *, const char*);
SOAP_FMAC3 _ns4__GetMapEdgeInfo * SOAP_FMAC4 soap_in__ns4__GetMapEdgeInfo(struct soap*, const char*, _ns4__GetMapEdgeInfo *, const char*);

#ifndef soap_write__ns4__GetMapEdgeInfo
#define soap_write__ns4__GetMapEdgeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetMapEdgeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetMapEdgeInfo * SOAP_FMAC4 soap_get__ns4__GetMapEdgeInfo(struct soap*, _ns4__GetMapEdgeInfo *, const char*, const char*);

#ifndef soap_read__ns4__GetMapEdgeInfo
#define soap_read__ns4__GetMapEdgeInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetMapEdgeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetMapEdgeInfo * SOAP_FMAC2 soap_instantiate__ns4__GetMapEdgeInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetMapEdgeInfo * soap_new__ns4__GetMapEdgeInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetMapEdgeInfo(soap, n, NULL, NULL, NULL); }

inline _ns4__GetMapEdgeInfo * soap_new_req__ns4__GetMapEdgeInfo(struct soap *soap, std::string& AreaId) { _ns4__GetMapEdgeInfo *_p = soap_instantiate__ns4__GetMapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetMapEdgeInfo::AreaId = AreaId; } return _p; }

inline _ns4__GetMapEdgeInfo * soap_new_set__ns4__GetMapEdgeInfo(struct soap *soap, std::string& AreaId) { _ns4__GetMapEdgeInfo *_p = soap_instantiate__ns4__GetMapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetMapEdgeInfo::AreaId = AreaId; } return _p; }

inline void soap_delete__ns4__GetMapEdgeInfo(struct soap *soap, _ns4__GetMapEdgeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetMapEdgeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetPatrolAreaInfoResponse
#define SOAP_TYPE_TaskData__ns4__GetPatrolAreaInfoResponse (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetPatrolAreaInfoResponse(struct soap*, const char*, int, const _ns4__GetPatrolAreaInfoResponse *, const char*);
SOAP_FMAC3 _ns4__GetPatrolAreaInfoResponse * SOAP_FMAC4 soap_in__ns4__GetPatrolAreaInfoResponse(struct soap*, const char*, _ns4__GetPatrolAreaInfoResponse *, const char*);

#ifndef soap_write__ns4__GetPatrolAreaInfoResponse
#define soap_write__ns4__GetPatrolAreaInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetPatrolAreaInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetPatrolAreaInfoResponse * SOAP_FMAC4 soap_get__ns4__GetPatrolAreaInfoResponse(struct soap*, _ns4__GetPatrolAreaInfoResponse *, const char*, const char*);

#ifndef soap_read__ns4__GetPatrolAreaInfoResponse
#define soap_read__ns4__GetPatrolAreaInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetPatrolAreaInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetPatrolAreaInfoResponse * SOAP_FMAC2 soap_instantiate__ns4__GetPatrolAreaInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetPatrolAreaInfoResponse * soap_new__ns4__GetPatrolAreaInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetPatrolAreaInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__GetPatrolAreaInfoResponse * soap_new_req__ns4__GetPatrolAreaInfoResponse(struct soap *soap, ns4__PatrolAreaInfos *Data) { _ns4__GetPatrolAreaInfoResponse *_p = soap_instantiate__ns4__GetPatrolAreaInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetPatrolAreaInfoResponse::Data = Data; } return _p; }

inline _ns4__GetPatrolAreaInfoResponse * soap_new_set__ns4__GetPatrolAreaInfoResponse(struct soap *soap, ns4__PatrolAreaInfos *Data) { _ns4__GetPatrolAreaInfoResponse *_p = soap_instantiate__ns4__GetPatrolAreaInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetPatrolAreaInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns4__GetPatrolAreaInfoResponse(struct soap *soap, _ns4__GetPatrolAreaInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetPatrolAreaInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetPatrolAreaInfo
#define SOAP_TYPE_TaskData__ns4__GetPatrolAreaInfo (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetPatrolAreaInfo(struct soap*, const char*, int, const _ns4__GetPatrolAreaInfo *, const char*);
SOAP_FMAC3 _ns4__GetPatrolAreaInfo * SOAP_FMAC4 soap_in__ns4__GetPatrolAreaInfo(struct soap*, const char*, _ns4__GetPatrolAreaInfo *, const char*);

#ifndef soap_write__ns4__GetPatrolAreaInfo
#define soap_write__ns4__GetPatrolAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetPatrolAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetPatrolAreaInfo * SOAP_FMAC4 soap_get__ns4__GetPatrolAreaInfo(struct soap*, _ns4__GetPatrolAreaInfo *, const char*, const char*);

#ifndef soap_read__ns4__GetPatrolAreaInfo
#define soap_read__ns4__GetPatrolAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetPatrolAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetPatrolAreaInfo * SOAP_FMAC2 soap_instantiate__ns4__GetPatrolAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetPatrolAreaInfo * soap_new__ns4__GetPatrolAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetPatrolAreaInfo(soap, n, NULL, NULL, NULL); }

inline _ns4__GetPatrolAreaInfo * soap_new_req__ns4__GetPatrolAreaInfo(struct soap *soap) { _ns4__GetPatrolAreaInfo *_p = soap_instantiate__ns4__GetPatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__GetPatrolAreaInfo * soap_new_set__ns4__GetPatrolAreaInfo(struct soap *soap) { _ns4__GetPatrolAreaInfo *_p = soap_instantiate__ns4__GetPatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__GetPatrolAreaInfo(struct soap *soap, _ns4__GetPatrolAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetPatrolAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetMapAreaInfoResponse
#define SOAP_TYPE_TaskData__ns4__GetMapAreaInfoResponse (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetMapAreaInfoResponse(struct soap*, const char*, int, const _ns4__GetMapAreaInfoResponse *, const char*);
SOAP_FMAC3 _ns4__GetMapAreaInfoResponse * SOAP_FMAC4 soap_in__ns4__GetMapAreaInfoResponse(struct soap*, const char*, _ns4__GetMapAreaInfoResponse *, const char*);

#ifndef soap_write__ns4__GetMapAreaInfoResponse
#define soap_write__ns4__GetMapAreaInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetMapAreaInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetMapAreaInfoResponse * SOAP_FMAC4 soap_get__ns4__GetMapAreaInfoResponse(struct soap*, _ns4__GetMapAreaInfoResponse *, const char*, const char*);

#ifndef soap_read__ns4__GetMapAreaInfoResponse
#define soap_read__ns4__GetMapAreaInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetMapAreaInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetMapAreaInfoResponse * SOAP_FMAC2 soap_instantiate__ns4__GetMapAreaInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetMapAreaInfoResponse * soap_new__ns4__GetMapAreaInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetMapAreaInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns4__GetMapAreaInfoResponse * soap_new_req__ns4__GetMapAreaInfoResponse(struct soap *soap, ns4__MapAreaInfos *Data) { _ns4__GetMapAreaInfoResponse *_p = soap_instantiate__ns4__GetMapAreaInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetMapAreaInfoResponse::Data = Data; } return _p; }

inline _ns4__GetMapAreaInfoResponse * soap_new_set__ns4__GetMapAreaInfoResponse(struct soap *soap, ns4__MapAreaInfos *Data) { _ns4__GetMapAreaInfoResponse *_p = soap_instantiate__ns4__GetMapAreaInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns4__GetMapAreaInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns4__GetMapAreaInfoResponse(struct soap *soap, _ns4__GetMapAreaInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetMapAreaInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData__ns4__GetMapAreaInfo
#define SOAP_TYPE_TaskData__ns4__GetMapAreaInfo (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns4__GetMapAreaInfo(struct soap*, const char*, int, const _ns4__GetMapAreaInfo *, const char*);
SOAP_FMAC3 _ns4__GetMapAreaInfo * SOAP_FMAC4 soap_in__ns4__GetMapAreaInfo(struct soap*, const char*, _ns4__GetMapAreaInfo *, const char*);

#ifndef soap_write__ns4__GetMapAreaInfo
#define soap_write__ns4__GetMapAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:GetMapAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetMapAreaInfo * SOAP_FMAC4 soap_get__ns4__GetMapAreaInfo(struct soap*, _ns4__GetMapAreaInfo *, const char*, const char*);

#ifndef soap_read__ns4__GetMapAreaInfo
#define soap_read__ns4__GetMapAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__ns4__GetMapAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns4__GetMapAreaInfo * SOAP_FMAC2 soap_instantiate__ns4__GetMapAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns4__GetMapAreaInfo * soap_new__ns4__GetMapAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns4__GetMapAreaInfo(soap, n, NULL, NULL, NULL); }

inline _ns4__GetMapAreaInfo * soap_new_req__ns4__GetMapAreaInfo(struct soap *soap) { _ns4__GetMapAreaInfo *_p = soap_instantiate__ns4__GetMapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns4__GetMapAreaInfo * soap_new_set__ns4__GetMapAreaInfo(struct soap *soap) { _ns4__GetMapAreaInfo *_p = soap_instantiate__ns4__GetMapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns4__GetMapAreaInfo(struct soap *soap, _ns4__GetMapAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns4__GetMapAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__TaskExcuteInfos
#define SOAP_TYPE_TaskData_ns4__TaskExcuteInfos (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__TaskExcuteInfos(struct soap*, const char*, int, const ns4__TaskExcuteInfos *, const char*);
SOAP_FMAC3 ns4__TaskExcuteInfos * SOAP_FMAC4 soap_in_ns4__TaskExcuteInfos(struct soap*, const char*, ns4__TaskExcuteInfos *, const char*);

#ifndef soap_write_ns4__TaskExcuteInfos
#define soap_write_ns4__TaskExcuteInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:TaskExcuteInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskExcuteInfos * SOAP_FMAC4 soap_get_ns4__TaskExcuteInfos(struct soap*, ns4__TaskExcuteInfos *, const char*, const char*);

#ifndef soap_read_ns4__TaskExcuteInfos
#define soap_read_ns4__TaskExcuteInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__TaskExcuteInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__TaskExcuteInfos * SOAP_FMAC2 soap_instantiate_ns4__TaskExcuteInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__TaskExcuteInfos * soap_new_ns4__TaskExcuteInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__TaskExcuteInfos(soap, n, NULL, NULL, NULL); }

inline ns4__TaskExcuteInfos * soap_new_req_ns4__TaskExcuteInfos(struct soap *soap) { ns4__TaskExcuteInfos *_p = soap_instantiate_ns4__TaskExcuteInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__TaskExcuteInfos * soap_new_set_ns4__TaskExcuteInfos(struct soap *soap, std::vector<ns4__TaskExcuteInfo * >& Infos) { ns4__TaskExcuteInfos *_p = soap_instantiate_ns4__TaskExcuteInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskExcuteInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__TaskExcuteInfos(struct soap *soap, ns4__TaskExcuteInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__TaskExcuteInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__TaskExcuteInfo
#define SOAP_TYPE_TaskData_ns4__TaskExcuteInfo (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__TaskExcuteInfo(struct soap*, const char*, int, const ns4__TaskExcuteInfo *, const char*);
SOAP_FMAC3 ns4__TaskExcuteInfo * SOAP_FMAC4 soap_in_ns4__TaskExcuteInfo(struct soap*, const char*, ns4__TaskExcuteInfo *, const char*);

#ifndef soap_write_ns4__TaskExcuteInfo
#define soap_write_ns4__TaskExcuteInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:TaskExcuteInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskExcuteInfo * SOAP_FMAC4 soap_get_ns4__TaskExcuteInfo(struct soap*, ns4__TaskExcuteInfo *, const char*, const char*);

#ifndef soap_read_ns4__TaskExcuteInfo
#define soap_read_ns4__TaskExcuteInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__TaskExcuteInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__TaskExcuteInfo * SOAP_FMAC2 soap_instantiate_ns4__TaskExcuteInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__TaskExcuteInfo * soap_new_ns4__TaskExcuteInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__TaskExcuteInfo(soap, n, NULL, NULL, NULL); }

inline ns4__TaskExcuteInfo * soap_new_req_ns4__TaskExcuteInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::string& TargetId, std::string& PointId, std::string& PointName, std::string& PointType, std::string& ExcuteTime, std::string& ExcuteValue, std::string& ExcuteUnit, std::string& ExcuteState, std::string& ExcuteDesc, std::string& HDPicture, std::string& InfraredPicture, std::string& OtherFile) { ns4__TaskExcuteInfo *_p = soap_instantiate_ns4__TaskExcuteInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskExcuteInfo::TaskId = TaskId; _p->ns4__TaskExcuteInfo::TaskName = TaskName; _p->ns4__TaskExcuteInfo::TaskType = TaskType; _p->ns4__TaskExcuteInfo::TaskPathId = TaskPathId; _p->ns4__TaskExcuteInfo::TargetId = TargetId; _p->ns4__TaskExcuteInfo::PointId = PointId; _p->ns4__TaskExcuteInfo::PointName = PointName; _p->ns4__TaskExcuteInfo::PointType = PointType; _p->ns4__TaskExcuteInfo::ExcuteTime = ExcuteTime; _p->ns4__TaskExcuteInfo::ExcuteValue = ExcuteValue; _p->ns4__TaskExcuteInfo::ExcuteUnit = ExcuteUnit; _p->ns4__TaskExcuteInfo::ExcuteState = ExcuteState; _p->ns4__TaskExcuteInfo::ExcuteDesc = ExcuteDesc; _p->ns4__TaskExcuteInfo::HDPicture = HDPicture; _p->ns4__TaskExcuteInfo::InfraredPicture = InfraredPicture; _p->ns4__TaskExcuteInfo::OtherFile = OtherFile; } return _p; }

inline ns4__TaskExcuteInfo * soap_new_set_ns4__TaskExcuteInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::string& TargetId, std::string& PointId, std::string& PointName, std::string& PointType, std::string& ExcuteTime, std::string& ExcuteValue, std::string& ExcuteUnit, std::string& ExcuteState, std::string& ExcuteDesc, std::string& HDPicture, std::string& InfraredPicture, std::string& OtherFile) { ns4__TaskExcuteInfo *_p = soap_instantiate_ns4__TaskExcuteInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskExcuteInfo::TaskId = TaskId; _p->ns4__TaskExcuteInfo::TaskName = TaskName; _p->ns4__TaskExcuteInfo::TaskType = TaskType; _p->ns4__TaskExcuteInfo::TaskPathId = TaskPathId; _p->ns4__TaskExcuteInfo::TargetId = TargetId; _p->ns4__TaskExcuteInfo::PointId = PointId; _p->ns4__TaskExcuteInfo::PointName = PointName; _p->ns4__TaskExcuteInfo::PointType = PointType; _p->ns4__TaskExcuteInfo::ExcuteTime = ExcuteTime; _p->ns4__TaskExcuteInfo::ExcuteValue = ExcuteValue; _p->ns4__TaskExcuteInfo::ExcuteUnit = ExcuteUnit; _p->ns4__TaskExcuteInfo::ExcuteState = ExcuteState; _p->ns4__TaskExcuteInfo::ExcuteDesc = ExcuteDesc; _p->ns4__TaskExcuteInfo::HDPicture = HDPicture; _p->ns4__TaskExcuteInfo::InfraredPicture = InfraredPicture; _p->ns4__TaskExcuteInfo::OtherFile = OtherFile; } return _p; }

inline void soap_delete_ns4__TaskExcuteInfo(struct soap *soap, ns4__TaskExcuteInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__TaskExcuteInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__TaskFinishInfos
#define SOAP_TYPE_TaskData_ns4__TaskFinishInfos (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__TaskFinishInfos(struct soap*, const char*, int, const ns4__TaskFinishInfos *, const char*);
SOAP_FMAC3 ns4__TaskFinishInfos * SOAP_FMAC4 soap_in_ns4__TaskFinishInfos(struct soap*, const char*, ns4__TaskFinishInfos *, const char*);

#ifndef soap_write_ns4__TaskFinishInfos
#define soap_write_ns4__TaskFinishInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:TaskFinishInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskFinishInfos * SOAP_FMAC4 soap_get_ns4__TaskFinishInfos(struct soap*, ns4__TaskFinishInfos *, const char*, const char*);

#ifndef soap_read_ns4__TaskFinishInfos
#define soap_read_ns4__TaskFinishInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__TaskFinishInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__TaskFinishInfos * SOAP_FMAC2 soap_instantiate_ns4__TaskFinishInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__TaskFinishInfos * soap_new_ns4__TaskFinishInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__TaskFinishInfos(soap, n, NULL, NULL, NULL); }

inline ns4__TaskFinishInfos * soap_new_req_ns4__TaskFinishInfos(struct soap *soap) { ns4__TaskFinishInfos *_p = soap_instantiate_ns4__TaskFinishInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__TaskFinishInfos * soap_new_set_ns4__TaskFinishInfos(struct soap *soap, std::vector<ns4__TaskFinishInfo * >& Infos) { ns4__TaskFinishInfos *_p = soap_instantiate_ns4__TaskFinishInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskFinishInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__TaskFinishInfos(struct soap *soap, ns4__TaskFinishInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__TaskFinishInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__TaskFinishInfo
#define SOAP_TYPE_TaskData_ns4__TaskFinishInfo (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__TaskFinishInfo(struct soap*, const char*, int, const ns4__TaskFinishInfo *, const char*);
SOAP_FMAC3 ns4__TaskFinishInfo * SOAP_FMAC4 soap_in_ns4__TaskFinishInfo(struct soap*, const char*, ns4__TaskFinishInfo *, const char*);

#ifndef soap_write_ns4__TaskFinishInfo
#define soap_write_ns4__TaskFinishInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:TaskFinishInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskFinishInfo * SOAP_FMAC4 soap_get_ns4__TaskFinishInfo(struct soap*, ns4__TaskFinishInfo *, const char*, const char*);

#ifndef soap_read_ns4__TaskFinishInfo
#define soap_read_ns4__TaskFinishInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__TaskFinishInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__TaskFinishInfo * SOAP_FMAC2 soap_instantiate_ns4__TaskFinishInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__TaskFinishInfo * soap_new_ns4__TaskFinishInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__TaskFinishInfo(soap, n, NULL, NULL, NULL); }

inline ns4__TaskFinishInfo * soap_new_req_ns4__TaskFinishInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::string& StartTime, std::string& EndTime, std::string& FinishState, std::string& ExcuteRobot) { ns4__TaskFinishInfo *_p = soap_instantiate_ns4__TaskFinishInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskFinishInfo::TaskId = TaskId; _p->ns4__TaskFinishInfo::TaskName = TaskName; _p->ns4__TaskFinishInfo::TaskType = TaskType; _p->ns4__TaskFinishInfo::TaskPathId = TaskPathId; _p->ns4__TaskFinishInfo::StartTime = StartTime; _p->ns4__TaskFinishInfo::EndTime = EndTime; _p->ns4__TaskFinishInfo::FinishState = FinishState; _p->ns4__TaskFinishInfo::ExcuteRobot = ExcuteRobot; } return _p; }

inline ns4__TaskFinishInfo * soap_new_set_ns4__TaskFinishInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::vector<std::string >& PointList, std::string& StartTime, std::string& EndTime, std::string& FinishState, std::string& ExcuteRobot) { ns4__TaskFinishInfo *_p = soap_instantiate_ns4__TaskFinishInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskFinishInfo::TaskId = TaskId; _p->ns4__TaskFinishInfo::TaskName = TaskName; _p->ns4__TaskFinishInfo::TaskType = TaskType; _p->ns4__TaskFinishInfo::TaskPathId = TaskPathId; _p->ns4__TaskFinishInfo::PointList = PointList; _p->ns4__TaskFinishInfo::StartTime = StartTime; _p->ns4__TaskFinishInfo::EndTime = EndTime; _p->ns4__TaskFinishInfo::FinishState = FinishState; _p->ns4__TaskFinishInfo::ExcuteRobot = ExcuteRobot; } return _p; }

inline void soap_delete_ns4__TaskFinishInfo(struct soap *soap, ns4__TaskFinishInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__TaskFinishInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__TaskExcuteData
#define SOAP_TYPE_TaskData_ns4__TaskExcuteData (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__TaskExcuteData(struct soap*, const char*, int, const ns4__TaskExcuteData *, const char*);
SOAP_FMAC3 ns4__TaskExcuteData * SOAP_FMAC4 soap_in_ns4__TaskExcuteData(struct soap*, const char*, ns4__TaskExcuteData *, const char*);

#ifndef soap_write_ns4__TaskExcuteData
#define soap_write_ns4__TaskExcuteData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:TaskExcuteData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskExcuteData * SOAP_FMAC4 soap_get_ns4__TaskExcuteData(struct soap*, ns4__TaskExcuteData *, const char*, const char*);

#ifndef soap_read_ns4__TaskExcuteData
#define soap_read_ns4__TaskExcuteData(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__TaskExcuteData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__TaskExcuteData * SOAP_FMAC2 soap_instantiate_ns4__TaskExcuteData(struct soap*, int, const char*, const char*, size_t*);

inline ns4__TaskExcuteData * soap_new_ns4__TaskExcuteData(struct soap *soap, int n = -1) { return soap_instantiate_ns4__TaskExcuteData(soap, n, NULL, NULL, NULL); }

inline ns4__TaskExcuteData * soap_new_req_ns4__TaskExcuteData(struct soap *soap, std::string& RobotIp, std::string& TaskType, std::string& TaskId, std::string& TaskName, std::string& PatrolDeviceName, std::string& PatrolDeviceId, int TotalDeviceSize, int ErrorDeviceSize, int FinishDeviceSize, int TaskFinishPercentage) { ns4__TaskExcuteData *_p = soap_instantiate_ns4__TaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskExcuteData::RobotIp = RobotIp; _p->ns4__TaskExcuteData::TaskType = TaskType; _p->ns4__TaskExcuteData::TaskId = TaskId; _p->ns4__TaskExcuteData::TaskName = TaskName; _p->ns4__TaskExcuteData::PatrolDeviceName = PatrolDeviceName; _p->ns4__TaskExcuteData::PatrolDeviceId = PatrolDeviceId; _p->ns4__TaskExcuteData::TotalDeviceSize = TotalDeviceSize; _p->ns4__TaskExcuteData::ErrorDeviceSize = ErrorDeviceSize; _p->ns4__TaskExcuteData::FinishDeviceSize = FinishDeviceSize; _p->ns4__TaskExcuteData::TaskFinishPercentage = TaskFinishPercentage; } return _p; }

inline ns4__TaskExcuteData * soap_new_set_ns4__TaskExcuteData(struct soap *soap, std::string& RobotIp, std::string& TaskType, std::string& TaskId, std::string& TaskName, std::string& PatrolDeviceName, std::string& PatrolDeviceId, int TotalDeviceSize, int ErrorDeviceSize, int FinishDeviceSize, int TaskFinishPercentage) { ns4__TaskExcuteData *_p = soap_instantiate_ns4__TaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskExcuteData::RobotIp = RobotIp; _p->ns4__TaskExcuteData::TaskType = TaskType; _p->ns4__TaskExcuteData::TaskId = TaskId; _p->ns4__TaskExcuteData::TaskName = TaskName; _p->ns4__TaskExcuteData::PatrolDeviceName = PatrolDeviceName; _p->ns4__TaskExcuteData::PatrolDeviceId = PatrolDeviceId; _p->ns4__TaskExcuteData::TotalDeviceSize = TotalDeviceSize; _p->ns4__TaskExcuteData::ErrorDeviceSize = ErrorDeviceSize; _p->ns4__TaskExcuteData::FinishDeviceSize = FinishDeviceSize; _p->ns4__TaskExcuteData::TaskFinishPercentage = TaskFinishPercentage; } return _p; }

inline void soap_delete_ns4__TaskExcuteData(struct soap *soap, ns4__TaskExcuteData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__TaskExcuteData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__TaskPathInfos
#define SOAP_TYPE_TaskData_ns4__TaskPathInfos (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__TaskPathInfos(struct soap*, const char*, int, const ns4__TaskPathInfos *, const char*);
SOAP_FMAC3 ns4__TaskPathInfos * SOAP_FMAC4 soap_in_ns4__TaskPathInfos(struct soap*, const char*, ns4__TaskPathInfos *, const char*);

#ifndef soap_write_ns4__TaskPathInfos
#define soap_write_ns4__TaskPathInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:TaskPathInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskPathInfos * SOAP_FMAC4 soap_get_ns4__TaskPathInfos(struct soap*, ns4__TaskPathInfos *, const char*, const char*);

#ifndef soap_read_ns4__TaskPathInfos
#define soap_read_ns4__TaskPathInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__TaskPathInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__TaskPathInfos * SOAP_FMAC2 soap_instantiate_ns4__TaskPathInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__TaskPathInfos * soap_new_ns4__TaskPathInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__TaskPathInfos(soap, n, NULL, NULL, NULL); }

inline ns4__TaskPathInfos * soap_new_req_ns4__TaskPathInfos(struct soap *soap) { ns4__TaskPathInfos *_p = soap_instantiate_ns4__TaskPathInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__TaskPathInfos * soap_new_set_ns4__TaskPathInfos(struct soap *soap, std::vector<ns4__TaskPathInfo * >& Infos) { ns4__TaskPathInfos *_p = soap_instantiate_ns4__TaskPathInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskPathInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__TaskPathInfos(struct soap *soap, ns4__TaskPathInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__TaskPathInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__TaskPathInfo
#define SOAP_TYPE_TaskData_ns4__TaskPathInfo (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__TaskPathInfo(struct soap*, const char*, int, const ns4__TaskPathInfo *, const char*);
SOAP_FMAC3 ns4__TaskPathInfo * SOAP_FMAC4 soap_in_ns4__TaskPathInfo(struct soap*, const char*, ns4__TaskPathInfo *, const char*);

#ifndef soap_write_ns4__TaskPathInfo
#define soap_write_ns4__TaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:TaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskPathInfo * SOAP_FMAC4 soap_get_ns4__TaskPathInfo(struct soap*, ns4__TaskPathInfo *, const char*, const char*);

#ifndef soap_read_ns4__TaskPathInfo
#define soap_read_ns4__TaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__TaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__TaskPathInfo * SOAP_FMAC2 soap_instantiate_ns4__TaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__TaskPathInfo * soap_new_ns4__TaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__TaskPathInfo(soap, n, NULL, NULL, NULL); }

inline ns4__TaskPathInfo * soap_new_req_ns4__TaskPathInfo(struct soap *soap, std::string& TaskPathId, std::string& TaskPathName, std::string& TaskPathType, std::string& CreateTime, int FinishAction) { ns4__TaskPathInfo *_p = soap_instantiate_ns4__TaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskPathInfo::TaskPathId = TaskPathId; _p->ns4__TaskPathInfo::TaskPathName = TaskPathName; _p->ns4__TaskPathInfo::TaskPathType = TaskPathType; _p->ns4__TaskPathInfo::CreateTime = CreateTime; _p->ns4__TaskPathInfo::FinishAction = FinishAction; } return _p; }

inline ns4__TaskPathInfo * soap_new_set_ns4__TaskPathInfo(struct soap *soap, std::string& TaskPathId, std::string& TaskPathName, std::vector<std::string >& PointList, std::string& TaskPathType, std::string& CreateTime, int FinishAction) { ns4__TaskPathInfo *_p = soap_instantiate_ns4__TaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__TaskPathInfo::TaskPathId = TaskPathId; _p->ns4__TaskPathInfo::TaskPathName = TaskPathName; _p->ns4__TaskPathInfo::PointList = PointList; _p->ns4__TaskPathInfo::TaskPathType = TaskPathType; _p->ns4__TaskPathInfo::CreateTime = CreateTime; _p->ns4__TaskPathInfo::FinishAction = FinishAction; } return _p; }

inline void soap_delete_ns4__TaskPathInfo(struct soap *soap, ns4__TaskPathInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__TaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__PatrolPointInfos
#define SOAP_TYPE_TaskData_ns4__PatrolPointInfos (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__PatrolPointInfos(struct soap*, const char*, int, const ns4__PatrolPointInfos *, const char*);
SOAP_FMAC3 ns4__PatrolPointInfos * SOAP_FMAC4 soap_in_ns4__PatrolPointInfos(struct soap*, const char*, ns4__PatrolPointInfos *, const char*);

#ifndef soap_write_ns4__PatrolPointInfos
#define soap_write_ns4__PatrolPointInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:PatrolPointInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__PatrolPointInfos * SOAP_FMAC4 soap_get_ns4__PatrolPointInfos(struct soap*, ns4__PatrolPointInfos *, const char*, const char*);

#ifndef soap_read_ns4__PatrolPointInfos
#define soap_read_ns4__PatrolPointInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__PatrolPointInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__PatrolPointInfos * SOAP_FMAC2 soap_instantiate_ns4__PatrolPointInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__PatrolPointInfos * soap_new_ns4__PatrolPointInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__PatrolPointInfos(soap, n, NULL, NULL, NULL); }

inline ns4__PatrolPointInfos * soap_new_req_ns4__PatrolPointInfos(struct soap *soap) { ns4__PatrolPointInfos *_p = soap_instantiate_ns4__PatrolPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__PatrolPointInfos * soap_new_set_ns4__PatrolPointInfos(struct soap *soap, std::vector<ns4__PatrolPointInfo * >& Infos) { ns4__PatrolPointInfos *_p = soap_instantiate_ns4__PatrolPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__PatrolPointInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__PatrolPointInfos(struct soap *soap, ns4__PatrolPointInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__PatrolPointInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__PatrolPointInfo
#define SOAP_TYPE_TaskData_ns4__PatrolPointInfo (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__PatrolPointInfo(struct soap*, const char*, int, const ns4__PatrolPointInfo *, const char*);
SOAP_FMAC3 ns4__PatrolPointInfo * SOAP_FMAC4 soap_in_ns4__PatrolPointInfo(struct soap*, const char*, ns4__PatrolPointInfo *, const char*);

#ifndef soap_write_ns4__PatrolPointInfo
#define soap_write_ns4__PatrolPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:PatrolPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__PatrolPointInfo * SOAP_FMAC4 soap_get_ns4__PatrolPointInfo(struct soap*, ns4__PatrolPointInfo *, const char*, const char*);

#ifndef soap_read_ns4__PatrolPointInfo
#define soap_read_ns4__PatrolPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__PatrolPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__PatrolPointInfo * SOAP_FMAC2 soap_instantiate_ns4__PatrolPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__PatrolPointInfo * soap_new_ns4__PatrolPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__PatrolPointInfo(soap, n, NULL, NULL, NULL); }

inline ns4__PatrolPointInfo * soap_new_req_ns4__PatrolPointInfo(struct soap *soap, std::string& PointId, std::string& PointName, std::string& PointType, std::string& DeviceType, std::string& AreaId, std::string& DockId, std::string& RobotIp) { ns4__PatrolPointInfo *_p = soap_instantiate_ns4__PatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__PatrolPointInfo::PointId = PointId; _p->ns4__PatrolPointInfo::PointName = PointName; _p->ns4__PatrolPointInfo::PointType = PointType; _p->ns4__PatrolPointInfo::DeviceType = DeviceType; _p->ns4__PatrolPointInfo::AreaId = AreaId; _p->ns4__PatrolPointInfo::DockId = DockId; _p->ns4__PatrolPointInfo::RobotIp = RobotIp; } return _p; }

inline ns4__PatrolPointInfo * soap_new_set_ns4__PatrolPointInfo(struct soap *soap, std::string& PointId, std::string& PointName, std::string& PointType, std::string& DeviceType, std::string& AreaId, std::string& DockId, std::string& RobotIp) { ns4__PatrolPointInfo *_p = soap_instantiate_ns4__PatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__PatrolPointInfo::PointId = PointId; _p->ns4__PatrolPointInfo::PointName = PointName; _p->ns4__PatrolPointInfo::PointType = PointType; _p->ns4__PatrolPointInfo::DeviceType = DeviceType; _p->ns4__PatrolPointInfo::AreaId = AreaId; _p->ns4__PatrolPointInfo::DockId = DockId; _p->ns4__PatrolPointInfo::RobotIp = RobotIp; } return _p; }

inline void soap_delete_ns4__PatrolPointInfo(struct soap *soap, ns4__PatrolPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__PatrolPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__DockPointInfos
#define SOAP_TYPE_TaskData_ns4__DockPointInfos (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__DockPointInfos(struct soap*, const char*, int, const ns4__DockPointInfos *, const char*);
SOAP_FMAC3 ns4__DockPointInfos * SOAP_FMAC4 soap_in_ns4__DockPointInfos(struct soap*, const char*, ns4__DockPointInfos *, const char*);

#ifndef soap_write_ns4__DockPointInfos
#define soap_write_ns4__DockPointInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:DockPointInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__DockPointInfos * SOAP_FMAC4 soap_get_ns4__DockPointInfos(struct soap*, ns4__DockPointInfos *, const char*, const char*);

#ifndef soap_read_ns4__DockPointInfos
#define soap_read_ns4__DockPointInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__DockPointInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__DockPointInfos * SOAP_FMAC2 soap_instantiate_ns4__DockPointInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__DockPointInfos * soap_new_ns4__DockPointInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__DockPointInfos(soap, n, NULL, NULL, NULL); }

inline ns4__DockPointInfos * soap_new_req_ns4__DockPointInfos(struct soap *soap) { ns4__DockPointInfos *_p = soap_instantiate_ns4__DockPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__DockPointInfos * soap_new_set_ns4__DockPointInfos(struct soap *soap, std::vector<ns4__DockPointInfo * >& Infos) { ns4__DockPointInfos *_p = soap_instantiate_ns4__DockPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__DockPointInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__DockPointInfos(struct soap *soap, ns4__DockPointInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__DockPointInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__DockPointInfo
#define SOAP_TYPE_TaskData_ns4__DockPointInfo (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__DockPointInfo(struct soap*, const char*, int, const ns4__DockPointInfo *, const char*);
SOAP_FMAC3 ns4__DockPointInfo * SOAP_FMAC4 soap_in_ns4__DockPointInfo(struct soap*, const char*, ns4__DockPointInfo *, const char*);

#ifndef soap_write_ns4__DockPointInfo
#define soap_write_ns4__DockPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:DockPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__DockPointInfo * SOAP_FMAC4 soap_get_ns4__DockPointInfo(struct soap*, ns4__DockPointInfo *, const char*, const char*);

#ifndef soap_read_ns4__DockPointInfo
#define soap_read_ns4__DockPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__DockPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__DockPointInfo * SOAP_FMAC2 soap_instantiate_ns4__DockPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__DockPointInfo * soap_new_ns4__DockPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__DockPointInfo(soap, n, NULL, NULL, NULL); }

inline ns4__DockPointInfo * soap_new_req_ns4__DockPointInfo(struct soap *soap, std::string& DockId, std::string& DockX, std::string& DockY) { ns4__DockPointInfo *_p = soap_instantiate_ns4__DockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__DockPointInfo::DockId = DockId; _p->ns4__DockPointInfo::DockX = DockX; _p->ns4__DockPointInfo::DockY = DockY; } return _p; }

inline ns4__DockPointInfo * soap_new_set_ns4__DockPointInfo(struct soap *soap, std::string& DockId, std::string& DockX, std::string& DockY, std::vector<std::string >& PointList) { ns4__DockPointInfo *_p = soap_instantiate_ns4__DockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__DockPointInfo::DockId = DockId; _p->ns4__DockPointInfo::DockX = DockX; _p->ns4__DockPointInfo::DockY = DockY; _p->ns4__DockPointInfo::PointList = PointList; } return _p; }

inline void soap_delete_ns4__DockPointInfo(struct soap *soap, ns4__DockPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__DockPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__MapEdgeInfos
#define SOAP_TYPE_TaskData_ns4__MapEdgeInfos (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__MapEdgeInfos(struct soap*, const char*, int, const ns4__MapEdgeInfos *, const char*);
SOAP_FMAC3 ns4__MapEdgeInfos * SOAP_FMAC4 soap_in_ns4__MapEdgeInfos(struct soap*, const char*, ns4__MapEdgeInfos *, const char*);

#ifndef soap_write_ns4__MapEdgeInfos
#define soap_write_ns4__MapEdgeInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:MapEdgeInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__MapEdgeInfos * SOAP_FMAC4 soap_get_ns4__MapEdgeInfos(struct soap*, ns4__MapEdgeInfos *, const char*, const char*);

#ifndef soap_read_ns4__MapEdgeInfos
#define soap_read_ns4__MapEdgeInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__MapEdgeInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__MapEdgeInfos * SOAP_FMAC2 soap_instantiate_ns4__MapEdgeInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__MapEdgeInfos * soap_new_ns4__MapEdgeInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__MapEdgeInfos(soap, n, NULL, NULL, NULL); }

inline ns4__MapEdgeInfos * soap_new_req_ns4__MapEdgeInfos(struct soap *soap) { ns4__MapEdgeInfos *_p = soap_instantiate_ns4__MapEdgeInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__MapEdgeInfos * soap_new_set_ns4__MapEdgeInfos(struct soap *soap, std::vector<ns4__MapEdgeInfo * >& Infos) { ns4__MapEdgeInfos *_p = soap_instantiate_ns4__MapEdgeInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__MapEdgeInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__MapEdgeInfos(struct soap *soap, ns4__MapEdgeInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__MapEdgeInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__MapEdgeInfo
#define SOAP_TYPE_TaskData_ns4__MapEdgeInfo (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__MapEdgeInfo(struct soap*, const char*, int, const ns4__MapEdgeInfo *, const char*);
SOAP_FMAC3 ns4__MapEdgeInfo * SOAP_FMAC4 soap_in_ns4__MapEdgeInfo(struct soap*, const char*, ns4__MapEdgeInfo *, const char*);

#ifndef soap_write_ns4__MapEdgeInfo
#define soap_write_ns4__MapEdgeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:MapEdgeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__MapEdgeInfo * SOAP_FMAC4 soap_get_ns4__MapEdgeInfo(struct soap*, ns4__MapEdgeInfo *, const char*, const char*);

#ifndef soap_read_ns4__MapEdgeInfo
#define soap_read_ns4__MapEdgeInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__MapEdgeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__MapEdgeInfo * SOAP_FMAC2 soap_instantiate_ns4__MapEdgeInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__MapEdgeInfo * soap_new_ns4__MapEdgeInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__MapEdgeInfo(soap, n, NULL, NULL, NULL); }

inline ns4__MapEdgeInfo * soap_new_req_ns4__MapEdgeInfo(struct soap *soap, std::string& EdgeId, std::string& StartNodeId, std::string& EndNodeId, std::string& StartNodeX, std::string& StartNodeY, std::string& EndNodeX, std::string& EndNodeY, std::string& FirstControlX, std::string& FirstControlY, std::string& SecondControlX, std::string& SecondControlY) { ns4__MapEdgeInfo *_p = soap_instantiate_ns4__MapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__MapEdgeInfo::EdgeId = EdgeId; _p->ns4__MapEdgeInfo::StartNodeId = StartNodeId; _p->ns4__MapEdgeInfo::EndNodeId = EndNodeId; _p->ns4__MapEdgeInfo::StartNodeX = StartNodeX; _p->ns4__MapEdgeInfo::StartNodeY = StartNodeY; _p->ns4__MapEdgeInfo::EndNodeX = EndNodeX; _p->ns4__MapEdgeInfo::EndNodeY = EndNodeY; _p->ns4__MapEdgeInfo::FirstControlX = FirstControlX; _p->ns4__MapEdgeInfo::FirstControlY = FirstControlY; _p->ns4__MapEdgeInfo::SecondControlX = SecondControlX; _p->ns4__MapEdgeInfo::SecondControlY = SecondControlY; } return _p; }

inline ns4__MapEdgeInfo * soap_new_set_ns4__MapEdgeInfo(struct soap *soap, std::string& EdgeId, std::string& StartNodeId, std::string& EndNodeId, std::string& StartNodeX, std::string& StartNodeY, std::string& EndNodeX, std::string& EndNodeY, std::string& FirstControlX, std::string& FirstControlY, std::string& SecondControlX, std::string& SecondControlY) { ns4__MapEdgeInfo *_p = soap_instantiate_ns4__MapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__MapEdgeInfo::EdgeId = EdgeId; _p->ns4__MapEdgeInfo::StartNodeId = StartNodeId; _p->ns4__MapEdgeInfo::EndNodeId = EndNodeId; _p->ns4__MapEdgeInfo::StartNodeX = StartNodeX; _p->ns4__MapEdgeInfo::StartNodeY = StartNodeY; _p->ns4__MapEdgeInfo::EndNodeX = EndNodeX; _p->ns4__MapEdgeInfo::EndNodeY = EndNodeY; _p->ns4__MapEdgeInfo::FirstControlX = FirstControlX; _p->ns4__MapEdgeInfo::FirstControlY = FirstControlY; _p->ns4__MapEdgeInfo::SecondControlX = SecondControlX; _p->ns4__MapEdgeInfo::SecondControlY = SecondControlY; } return _p; }

inline void soap_delete_ns4__MapEdgeInfo(struct soap *soap, ns4__MapEdgeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__MapEdgeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__PatrolAreaInfos
#define SOAP_TYPE_TaskData_ns4__PatrolAreaInfos (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__PatrolAreaInfos(struct soap*, const char*, int, const ns4__PatrolAreaInfos *, const char*);
SOAP_FMAC3 ns4__PatrolAreaInfos * SOAP_FMAC4 soap_in_ns4__PatrolAreaInfos(struct soap*, const char*, ns4__PatrolAreaInfos *, const char*);

#ifndef soap_write_ns4__PatrolAreaInfos
#define soap_write_ns4__PatrolAreaInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:PatrolAreaInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__PatrolAreaInfos * SOAP_FMAC4 soap_get_ns4__PatrolAreaInfos(struct soap*, ns4__PatrolAreaInfos *, const char*, const char*);

#ifndef soap_read_ns4__PatrolAreaInfos
#define soap_read_ns4__PatrolAreaInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__PatrolAreaInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__PatrolAreaInfos * SOAP_FMAC2 soap_instantiate_ns4__PatrolAreaInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__PatrolAreaInfos * soap_new_ns4__PatrolAreaInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__PatrolAreaInfos(soap, n, NULL, NULL, NULL); }

inline ns4__PatrolAreaInfos * soap_new_req_ns4__PatrolAreaInfos(struct soap *soap) { ns4__PatrolAreaInfos *_p = soap_instantiate_ns4__PatrolAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__PatrolAreaInfos * soap_new_set_ns4__PatrolAreaInfos(struct soap *soap, std::vector<ns4__PatrolAreaInfo * >& Infos) { ns4__PatrolAreaInfos *_p = soap_instantiate_ns4__PatrolAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__PatrolAreaInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__PatrolAreaInfos(struct soap *soap, ns4__PatrolAreaInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__PatrolAreaInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__PatrolAreaInfo
#define SOAP_TYPE_TaskData_ns4__PatrolAreaInfo (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__PatrolAreaInfo(struct soap*, const char*, int, const ns4__PatrolAreaInfo *, const char*);
SOAP_FMAC3 ns4__PatrolAreaInfo * SOAP_FMAC4 soap_in_ns4__PatrolAreaInfo(struct soap*, const char*, ns4__PatrolAreaInfo *, const char*);

#ifndef soap_write_ns4__PatrolAreaInfo
#define soap_write_ns4__PatrolAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:PatrolAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__PatrolAreaInfo * SOAP_FMAC4 soap_get_ns4__PatrolAreaInfo(struct soap*, ns4__PatrolAreaInfo *, const char*, const char*);

#ifndef soap_read_ns4__PatrolAreaInfo
#define soap_read_ns4__PatrolAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__PatrolAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__PatrolAreaInfo * SOAP_FMAC2 soap_instantiate_ns4__PatrolAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__PatrolAreaInfo * soap_new_ns4__PatrolAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__PatrolAreaInfo(soap, n, NULL, NULL, NULL); }

inline ns4__PatrolAreaInfo * soap_new_req_ns4__PatrolAreaInfo(struct soap *soap, std::string& AreaId, std::string& AreaName, std::string& ParentId, std::string& RobotIp) { ns4__PatrolAreaInfo *_p = soap_instantiate_ns4__PatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__PatrolAreaInfo::AreaId = AreaId; _p->ns4__PatrolAreaInfo::AreaName = AreaName; _p->ns4__PatrolAreaInfo::ParentId = ParentId; _p->ns4__PatrolAreaInfo::RobotIp = RobotIp; } return _p; }

inline ns4__PatrolAreaInfo * soap_new_set_ns4__PatrolAreaInfo(struct soap *soap, std::string& AreaId, std::string& AreaName, std::string& ParentId, std::string& RobotIp) { ns4__PatrolAreaInfo *_p = soap_instantiate_ns4__PatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__PatrolAreaInfo::AreaId = AreaId; _p->ns4__PatrolAreaInfo::AreaName = AreaName; _p->ns4__PatrolAreaInfo::ParentId = ParentId; _p->ns4__PatrolAreaInfo::RobotIp = RobotIp; } return _p; }

inline void soap_delete_ns4__PatrolAreaInfo(struct soap *soap, ns4__PatrolAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__PatrolAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__MapAreaInfos
#define SOAP_TYPE_TaskData_ns4__MapAreaInfos (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__MapAreaInfos(struct soap*, const char*, int, const ns4__MapAreaInfos *, const char*);
SOAP_FMAC3 ns4__MapAreaInfos * SOAP_FMAC4 soap_in_ns4__MapAreaInfos(struct soap*, const char*, ns4__MapAreaInfos *, const char*);

#ifndef soap_write_ns4__MapAreaInfos
#define soap_write_ns4__MapAreaInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:MapAreaInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__MapAreaInfos * SOAP_FMAC4 soap_get_ns4__MapAreaInfos(struct soap*, ns4__MapAreaInfos *, const char*, const char*);

#ifndef soap_read_ns4__MapAreaInfos
#define soap_read_ns4__MapAreaInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__MapAreaInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__MapAreaInfos * SOAP_FMAC2 soap_instantiate_ns4__MapAreaInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__MapAreaInfos * soap_new_ns4__MapAreaInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__MapAreaInfos(soap, n, NULL, NULL, NULL); }

inline ns4__MapAreaInfos * soap_new_req_ns4__MapAreaInfos(struct soap *soap) { ns4__MapAreaInfos *_p = soap_instantiate_ns4__MapAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__MapAreaInfos * soap_new_set_ns4__MapAreaInfos(struct soap *soap, std::vector<ns4__MapAreaInfo * >& Infos) { ns4__MapAreaInfos *_p = soap_instantiate_ns4__MapAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__MapAreaInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__MapAreaInfos(struct soap *soap, ns4__MapAreaInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__MapAreaInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__MapAreaInfo
#define SOAP_TYPE_TaskData_ns4__MapAreaInfo (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__MapAreaInfo(struct soap*, const char*, int, const ns4__MapAreaInfo *, const char*);
SOAP_FMAC3 ns4__MapAreaInfo * SOAP_FMAC4 soap_in_ns4__MapAreaInfo(struct soap*, const char*, ns4__MapAreaInfo *, const char*);

#ifndef soap_write_ns4__MapAreaInfo
#define soap_write_ns4__MapAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:MapAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__MapAreaInfo * SOAP_FMAC4 soap_get_ns4__MapAreaInfo(struct soap*, ns4__MapAreaInfo *, const char*, const char*);

#ifndef soap_read_ns4__MapAreaInfo
#define soap_read_ns4__MapAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__MapAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__MapAreaInfo * SOAP_FMAC2 soap_instantiate_ns4__MapAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__MapAreaInfo * soap_new_ns4__MapAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__MapAreaInfo(soap, n, NULL, NULL, NULL); }

inline ns4__MapAreaInfo * soap_new_req_ns4__MapAreaInfo(struct soap *soap, std::string& RobotIp, std::string& AreaId, std::string& AreaName, std::string& AreaMap, std::string& MaxX, std::string& MaxY, std::string& MinX, std::string& MinY, std::string& ParentId) { ns4__MapAreaInfo *_p = soap_instantiate_ns4__MapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__MapAreaInfo::RobotIp = RobotIp; _p->ns4__MapAreaInfo::AreaId = AreaId; _p->ns4__MapAreaInfo::AreaName = AreaName; _p->ns4__MapAreaInfo::AreaMap = AreaMap; _p->ns4__MapAreaInfo::MaxX = MaxX; _p->ns4__MapAreaInfo::MaxY = MaxY; _p->ns4__MapAreaInfo::MinX = MinX; _p->ns4__MapAreaInfo::MinY = MinY; _p->ns4__MapAreaInfo::ParentId = ParentId; } return _p; }

inline ns4__MapAreaInfo * soap_new_set_ns4__MapAreaInfo(struct soap *soap, std::string& RobotIp, std::string& AreaId, std::string& AreaName, std::string& AreaMap, std::string& MaxX, std::string& MaxY, std::string& MinX, std::string& MinY, std::string& ParentId) { ns4__MapAreaInfo *_p = soap_instantiate_ns4__MapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__MapAreaInfo::RobotIp = RobotIp; _p->ns4__MapAreaInfo::AreaId = AreaId; _p->ns4__MapAreaInfo::AreaName = AreaName; _p->ns4__MapAreaInfo::AreaMap = AreaMap; _p->ns4__MapAreaInfo::MaxX = MaxX; _p->ns4__MapAreaInfo::MaxY = MaxY; _p->ns4__MapAreaInfo::MinX = MinX; _p->ns4__MapAreaInfo::MinY = MinY; _p->ns4__MapAreaInfo::ParentId = ParentId; } return _p; }

inline void soap_delete_ns4__MapAreaInfo(struct soap *soap, ns4__MapAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__MapAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotAlarmInfos
#define SOAP_TYPE_TaskData_ns4__RobotAlarmInfos (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotAlarmInfos(struct soap*, const char*, int, const ns4__RobotAlarmInfos *, const char*);
SOAP_FMAC3 ns4__RobotAlarmInfos * SOAP_FMAC4 soap_in_ns4__RobotAlarmInfos(struct soap*, const char*, ns4__RobotAlarmInfos *, const char*);

#ifndef soap_write_ns4__RobotAlarmInfos
#define soap_write_ns4__RobotAlarmInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotAlarmInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotAlarmInfos * SOAP_FMAC4 soap_get_ns4__RobotAlarmInfos(struct soap*, ns4__RobotAlarmInfos *, const char*, const char*);

#ifndef soap_read_ns4__RobotAlarmInfos
#define soap_read_ns4__RobotAlarmInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotAlarmInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotAlarmInfos * SOAP_FMAC2 soap_instantiate_ns4__RobotAlarmInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotAlarmInfos * soap_new_ns4__RobotAlarmInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotAlarmInfos(soap, n, NULL, NULL, NULL); }

inline ns4__RobotAlarmInfos * soap_new_req_ns4__RobotAlarmInfos(struct soap *soap) { ns4__RobotAlarmInfos *_p = soap_instantiate_ns4__RobotAlarmInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__RobotAlarmInfos * soap_new_set_ns4__RobotAlarmInfos(struct soap *soap, std::vector<ns4__RobotAlarmInfo * >& Infos) { ns4__RobotAlarmInfos *_p = soap_instantiate_ns4__RobotAlarmInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotAlarmInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__RobotAlarmInfos(struct soap *soap, ns4__RobotAlarmInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotAlarmInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotAlarmInfo
#define SOAP_TYPE_TaskData_ns4__RobotAlarmInfo (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotAlarmInfo(struct soap*, const char*, int, const ns4__RobotAlarmInfo *, const char*);
SOAP_FMAC3 ns4__RobotAlarmInfo * SOAP_FMAC4 soap_in_ns4__RobotAlarmInfo(struct soap*, const char*, ns4__RobotAlarmInfo *, const char*);

#ifndef soap_write_ns4__RobotAlarmInfo
#define soap_write_ns4__RobotAlarmInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotAlarmInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotAlarmInfo * SOAP_FMAC4 soap_get_ns4__RobotAlarmInfo(struct soap*, ns4__RobotAlarmInfo *, const char*, const char*);

#ifndef soap_read_ns4__RobotAlarmInfo
#define soap_read_ns4__RobotAlarmInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotAlarmInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotAlarmInfo * SOAP_FMAC2 soap_instantiate_ns4__RobotAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotAlarmInfo * soap_new_ns4__RobotAlarmInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotAlarmInfo(soap, n, NULL, NULL, NULL); }

inline ns4__RobotAlarmInfo * soap_new_req_ns4__RobotAlarmInfo(struct soap *soap, std::string& AlarmId, std::string& RobotIp, std::string& AlarmType, std::string& AlarmDesc, std::string& AlarmTime) { ns4__RobotAlarmInfo *_p = soap_instantiate_ns4__RobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotAlarmInfo::AlarmId = AlarmId; _p->ns4__RobotAlarmInfo::RobotIp = RobotIp; _p->ns4__RobotAlarmInfo::AlarmType = AlarmType; _p->ns4__RobotAlarmInfo::AlarmDesc = AlarmDesc; _p->ns4__RobotAlarmInfo::AlarmTime = AlarmTime; } return _p; }

inline ns4__RobotAlarmInfo * soap_new_set_ns4__RobotAlarmInfo(struct soap *soap, std::string& AlarmId, std::string& RobotIp, std::string& AlarmType, std::string& AlarmDesc, std::string& AlarmTime) { ns4__RobotAlarmInfo *_p = soap_instantiate_ns4__RobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotAlarmInfo::AlarmId = AlarmId; _p->ns4__RobotAlarmInfo::RobotIp = RobotIp; _p->ns4__RobotAlarmInfo::AlarmType = AlarmType; _p->ns4__RobotAlarmInfo::AlarmDesc = AlarmDesc; _p->ns4__RobotAlarmInfo::AlarmTime = AlarmTime; } return _p; }

inline void soap_delete_ns4__RobotAlarmInfo(struct soap *soap, ns4__RobotAlarmInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotAlarmInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotGasInfos
#define SOAP_TYPE_TaskData_ns4__RobotGasInfos (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotGasInfos(struct soap*, const char*, int, const ns4__RobotGasInfos *, const char*);
SOAP_FMAC3 ns4__RobotGasInfos * SOAP_FMAC4 soap_in_ns4__RobotGasInfos(struct soap*, const char*, ns4__RobotGasInfos *, const char*);

#ifndef soap_write_ns4__RobotGasInfos
#define soap_write_ns4__RobotGasInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotGasInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotGasInfos * SOAP_FMAC4 soap_get_ns4__RobotGasInfos(struct soap*, ns4__RobotGasInfos *, const char*, const char*);

#ifndef soap_read_ns4__RobotGasInfos
#define soap_read_ns4__RobotGasInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotGasInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotGasInfos * SOAP_FMAC2 soap_instantiate_ns4__RobotGasInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotGasInfos * soap_new_ns4__RobotGasInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotGasInfos(soap, n, NULL, NULL, NULL); }

inline ns4__RobotGasInfos * soap_new_req_ns4__RobotGasInfos(struct soap *soap) { ns4__RobotGasInfos *_p = soap_instantiate_ns4__RobotGasInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__RobotGasInfos * soap_new_set_ns4__RobotGasInfos(struct soap *soap, std::vector<ns4__RobotGasInfo * >& GasContents) { ns4__RobotGasInfos *_p = soap_instantiate_ns4__RobotGasInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotGasInfos::GasContents = GasContents; } return _p; }

inline void soap_delete_ns4__RobotGasInfos(struct soap *soap, ns4__RobotGasInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotGasInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotGasInfo
#define SOAP_TYPE_TaskData_ns4__RobotGasInfo (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotGasInfo(struct soap*, const char*, int, const ns4__RobotGasInfo *, const char*);
SOAP_FMAC3 ns4__RobotGasInfo * SOAP_FMAC4 soap_in_ns4__RobotGasInfo(struct soap*, const char*, ns4__RobotGasInfo *, const char*);

#ifndef soap_write_ns4__RobotGasInfo
#define soap_write_ns4__RobotGasInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotGasInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotGasInfo * SOAP_FMAC4 soap_get_ns4__RobotGasInfo(struct soap*, ns4__RobotGasInfo *, const char*, const char*);

#ifndef soap_read_ns4__RobotGasInfo
#define soap_read_ns4__RobotGasInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotGasInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotGasInfo * SOAP_FMAC2 soap_instantiate_ns4__RobotGasInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotGasInfo * soap_new_ns4__RobotGasInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotGasInfo(soap, n, NULL, NULL, NULL); }

inline ns4__RobotGasInfo * soap_new_req_ns4__RobotGasInfo(struct soap *soap, std::string& robot_ip, std::string& H2S, std::string& CO, std::string& O2, std::string& CH4, std::string& TEMP, std::string& HUM, std::string& PM25, std::string& PM10, std::string& O3, std::string& SF6, std::string& Desc) { ns4__RobotGasInfo *_p = soap_instantiate_ns4__RobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotGasInfo::robot_ip = robot_ip; _p->ns4__RobotGasInfo::H2S = H2S; _p->ns4__RobotGasInfo::CO = CO; _p->ns4__RobotGasInfo::O2 = O2; _p->ns4__RobotGasInfo::CH4 = CH4; _p->ns4__RobotGasInfo::TEMP = TEMP; _p->ns4__RobotGasInfo::HUM = HUM; _p->ns4__RobotGasInfo::PM25 = PM25; _p->ns4__RobotGasInfo::PM10 = PM10; _p->ns4__RobotGasInfo::O3 = O3; _p->ns4__RobotGasInfo::SF6 = SF6; _p->ns4__RobotGasInfo::Desc = Desc; } return _p; }

inline ns4__RobotGasInfo * soap_new_set_ns4__RobotGasInfo(struct soap *soap, std::string& robot_ip, std::string& H2S, std::string& CO, std::string& O2, std::string& CH4, std::string& TEMP, std::string& HUM, std::string& PM25, std::string& PM10, std::string& O3, std::string& SF6, std::string& Desc) { ns4__RobotGasInfo *_p = soap_instantiate_ns4__RobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotGasInfo::robot_ip = robot_ip; _p->ns4__RobotGasInfo::H2S = H2S; _p->ns4__RobotGasInfo::CO = CO; _p->ns4__RobotGasInfo::O2 = O2; _p->ns4__RobotGasInfo::CH4 = CH4; _p->ns4__RobotGasInfo::TEMP = TEMP; _p->ns4__RobotGasInfo::HUM = HUM; _p->ns4__RobotGasInfo::PM25 = PM25; _p->ns4__RobotGasInfo::PM10 = PM10; _p->ns4__RobotGasInfo::O3 = O3; _p->ns4__RobotGasInfo::SF6 = SF6; _p->ns4__RobotGasInfo::Desc = Desc; } return _p; }

inline void soap_delete_ns4__RobotGasInfo(struct soap *soap, ns4__RobotGasInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotGasInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotMileageInfos
#define SOAP_TYPE_TaskData_ns4__RobotMileageInfos (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotMileageInfos(struct soap*, const char*, int, const ns4__RobotMileageInfos *, const char*);
SOAP_FMAC3 ns4__RobotMileageInfos * SOAP_FMAC4 soap_in_ns4__RobotMileageInfos(struct soap*, const char*, ns4__RobotMileageInfos *, const char*);

#ifndef soap_write_ns4__RobotMileageInfos
#define soap_write_ns4__RobotMileageInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotMileageInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotMileageInfos * SOAP_FMAC4 soap_get_ns4__RobotMileageInfos(struct soap*, ns4__RobotMileageInfos *, const char*, const char*);

#ifndef soap_read_ns4__RobotMileageInfos
#define soap_read_ns4__RobotMileageInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotMileageInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotMileageInfos * SOAP_FMAC2 soap_instantiate_ns4__RobotMileageInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotMileageInfos * soap_new_ns4__RobotMileageInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotMileageInfos(soap, n, NULL, NULL, NULL); }

inline ns4__RobotMileageInfos * soap_new_req_ns4__RobotMileageInfos(struct soap *soap) { ns4__RobotMileageInfos *_p = soap_instantiate_ns4__RobotMileageInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__RobotMileageInfos * soap_new_set_ns4__RobotMileageInfos(struct soap *soap, std::vector<ns4__RobotMileageInfo * >& Infos) { ns4__RobotMileageInfos *_p = soap_instantiate_ns4__RobotMileageInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotMileageInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__RobotMileageInfos(struct soap *soap, ns4__RobotMileageInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotMileageInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotMileageInfo
#define SOAP_TYPE_TaskData_ns4__RobotMileageInfo (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotMileageInfo(struct soap*, const char*, int, const ns4__RobotMileageInfo *, const char*);
SOAP_FMAC3 ns4__RobotMileageInfo * SOAP_FMAC4 soap_in_ns4__RobotMileageInfo(struct soap*, const char*, ns4__RobotMileageInfo *, const char*);

#ifndef soap_write_ns4__RobotMileageInfo
#define soap_write_ns4__RobotMileageInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotMileageInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotMileageInfo * SOAP_FMAC4 soap_get_ns4__RobotMileageInfo(struct soap*, ns4__RobotMileageInfo *, const char*, const char*);

#ifndef soap_read_ns4__RobotMileageInfo
#define soap_read_ns4__RobotMileageInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotMileageInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotMileageInfo * SOAP_FMAC2 soap_instantiate_ns4__RobotMileageInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotMileageInfo * soap_new_ns4__RobotMileageInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotMileageInfo(soap, n, NULL, NULL, NULL); }

inline ns4__RobotMileageInfo * soap_new_req_ns4__RobotMileageInfo(struct soap *soap, std::string& RobotIp, double Mileage) { ns4__RobotMileageInfo *_p = soap_instantiate_ns4__RobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotMileageInfo::RobotIp = RobotIp; _p->ns4__RobotMileageInfo::Mileage = Mileage; } return _p; }

inline ns4__RobotMileageInfo * soap_new_set_ns4__RobotMileageInfo(struct soap *soap, std::string& RobotIp, double Mileage) { ns4__RobotMileageInfo *_p = soap_instantiate_ns4__RobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotMileageInfo::RobotIp = RobotIp; _p->ns4__RobotMileageInfo::Mileage = Mileage; } return _p; }

inline void soap_delete_ns4__RobotMileageInfo(struct soap *soap, ns4__RobotMileageInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotMileageInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotYunTaiInfos
#define SOAP_TYPE_TaskData_ns4__RobotYunTaiInfos (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotYunTaiInfos(struct soap*, const char*, int, const ns4__RobotYunTaiInfos *, const char*);
SOAP_FMAC3 ns4__RobotYunTaiInfos * SOAP_FMAC4 soap_in_ns4__RobotYunTaiInfos(struct soap*, const char*, ns4__RobotYunTaiInfos *, const char*);

#ifndef soap_write_ns4__RobotYunTaiInfos
#define soap_write_ns4__RobotYunTaiInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotYunTaiInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotYunTaiInfos * SOAP_FMAC4 soap_get_ns4__RobotYunTaiInfos(struct soap*, ns4__RobotYunTaiInfos *, const char*, const char*);

#ifndef soap_read_ns4__RobotYunTaiInfos
#define soap_read_ns4__RobotYunTaiInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotYunTaiInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotYunTaiInfos * SOAP_FMAC2 soap_instantiate_ns4__RobotYunTaiInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotYunTaiInfos * soap_new_ns4__RobotYunTaiInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotYunTaiInfos(soap, n, NULL, NULL, NULL); }

inline ns4__RobotYunTaiInfos * soap_new_req_ns4__RobotYunTaiInfos(struct soap *soap) { ns4__RobotYunTaiInfos *_p = soap_instantiate_ns4__RobotYunTaiInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__RobotYunTaiInfos * soap_new_set_ns4__RobotYunTaiInfos(struct soap *soap, std::vector<ns4__RobotYunTaiInfo * >& Infos) { ns4__RobotYunTaiInfos *_p = soap_instantiate_ns4__RobotYunTaiInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotYunTaiInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__RobotYunTaiInfos(struct soap *soap, ns4__RobotYunTaiInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotYunTaiInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotYunTaiInfo
#define SOAP_TYPE_TaskData_ns4__RobotYunTaiInfo (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotYunTaiInfo(struct soap*, const char*, int, const ns4__RobotYunTaiInfo *, const char*);
SOAP_FMAC3 ns4__RobotYunTaiInfo * SOAP_FMAC4 soap_in_ns4__RobotYunTaiInfo(struct soap*, const char*, ns4__RobotYunTaiInfo *, const char*);

#ifndef soap_write_ns4__RobotYunTaiInfo
#define soap_write_ns4__RobotYunTaiInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotYunTaiInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotYunTaiInfo * SOAP_FMAC4 soap_get_ns4__RobotYunTaiInfo(struct soap*, ns4__RobotYunTaiInfo *, const char*, const char*);

#ifndef soap_read_ns4__RobotYunTaiInfo
#define soap_read_ns4__RobotYunTaiInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotYunTaiInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotYunTaiInfo * SOAP_FMAC2 soap_instantiate_ns4__RobotYunTaiInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotYunTaiInfo * soap_new_ns4__RobotYunTaiInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotYunTaiInfo(soap, n, NULL, NULL, NULL); }

inline ns4__RobotYunTaiInfo * soap_new_req_ns4__RobotYunTaiInfo(struct soap *soap, std::string& RobotIp, std::string& PosPan, std::string& PosTile) { ns4__RobotYunTaiInfo *_p = soap_instantiate_ns4__RobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotYunTaiInfo::RobotIp = RobotIp; _p->ns4__RobotYunTaiInfo::PosPan = PosPan; _p->ns4__RobotYunTaiInfo::PosTile = PosTile; } return _p; }

inline ns4__RobotYunTaiInfo * soap_new_set_ns4__RobotYunTaiInfo(struct soap *soap, std::string& RobotIp, std::string& PosPan, std::string& PosTile) { ns4__RobotYunTaiInfo *_p = soap_instantiate_ns4__RobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotYunTaiInfo::RobotIp = RobotIp; _p->ns4__RobotYunTaiInfo::PosPan = PosPan; _p->ns4__RobotYunTaiInfo::PosTile = PosTile; } return _p; }

inline void soap_delete_ns4__RobotYunTaiInfo(struct soap *soap, ns4__RobotYunTaiInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotYunTaiInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotPosInfos
#define SOAP_TYPE_TaskData_ns4__RobotPosInfos (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotPosInfos(struct soap*, const char*, int, const ns4__RobotPosInfos *, const char*);
SOAP_FMAC3 ns4__RobotPosInfos * SOAP_FMAC4 soap_in_ns4__RobotPosInfos(struct soap*, const char*, ns4__RobotPosInfos *, const char*);

#ifndef soap_write_ns4__RobotPosInfos
#define soap_write_ns4__RobotPosInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotPosInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotPosInfos * SOAP_FMAC4 soap_get_ns4__RobotPosInfos(struct soap*, ns4__RobotPosInfos *, const char*, const char*);

#ifndef soap_read_ns4__RobotPosInfos
#define soap_read_ns4__RobotPosInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotPosInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotPosInfos * SOAP_FMAC2 soap_instantiate_ns4__RobotPosInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotPosInfos * soap_new_ns4__RobotPosInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotPosInfos(soap, n, NULL, NULL, NULL); }

inline ns4__RobotPosInfos * soap_new_req_ns4__RobotPosInfos(struct soap *soap) { ns4__RobotPosInfos *_p = soap_instantiate_ns4__RobotPosInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__RobotPosInfos * soap_new_set_ns4__RobotPosInfos(struct soap *soap, std::vector<ns4__RobotPosInfo * >& Infos) { ns4__RobotPosInfos *_p = soap_instantiate_ns4__RobotPosInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotPosInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__RobotPosInfos(struct soap *soap, ns4__RobotPosInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotPosInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotPosInfo
#define SOAP_TYPE_TaskData_ns4__RobotPosInfo (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotPosInfo(struct soap*, const char*, int, const ns4__RobotPosInfo *, const char*);
SOAP_FMAC3 ns4__RobotPosInfo * SOAP_FMAC4 soap_in_ns4__RobotPosInfo(struct soap*, const char*, ns4__RobotPosInfo *, const char*);

#ifndef soap_write_ns4__RobotPosInfo
#define soap_write_ns4__RobotPosInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotPosInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotPosInfo * SOAP_FMAC4 soap_get_ns4__RobotPosInfo(struct soap*, ns4__RobotPosInfo *, const char*, const char*);

#ifndef soap_read_ns4__RobotPosInfo
#define soap_read_ns4__RobotPosInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotPosInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotPosInfo * SOAP_FMAC2 soap_instantiate_ns4__RobotPosInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotPosInfo * soap_new_ns4__RobotPosInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotPosInfo(soap, n, NULL, NULL, NULL); }

inline ns4__RobotPosInfo * soap_new_req_ns4__RobotPosInfo(struct soap *soap, std::string& RobotIp, std::string& PosX, std::string& PosY, std::string& Angle, std::string& EdgeID, std::string& Precent) { ns4__RobotPosInfo *_p = soap_instantiate_ns4__RobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotPosInfo::RobotIp = RobotIp; _p->ns4__RobotPosInfo::PosX = PosX; _p->ns4__RobotPosInfo::PosY = PosY; _p->ns4__RobotPosInfo::Angle = Angle; _p->ns4__RobotPosInfo::EdgeID = EdgeID; _p->ns4__RobotPosInfo::Precent = Precent; } return _p; }

inline ns4__RobotPosInfo * soap_new_set_ns4__RobotPosInfo(struct soap *soap, std::string& RobotIp, std::string& PosX, std::string& PosY, std::string& Angle, std::string& EdgeID, std::string& Precent) { ns4__RobotPosInfo *_p = soap_instantiate_ns4__RobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotPosInfo::RobotIp = RobotIp; _p->ns4__RobotPosInfo::PosX = PosX; _p->ns4__RobotPosInfo::PosY = PosY; _p->ns4__RobotPosInfo::Angle = Angle; _p->ns4__RobotPosInfo::EdgeID = EdgeID; _p->ns4__RobotPosInfo::Precent = Precent; } return _p; }

inline void soap_delete_ns4__RobotPosInfo(struct soap *soap, ns4__RobotPosInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotPosInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotTaskStates
#define SOAP_TYPE_TaskData_ns4__RobotTaskStates (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotTaskStates(struct soap*, const char*, int, const ns4__RobotTaskStates *, const char*);
SOAP_FMAC3 ns4__RobotTaskStates * SOAP_FMAC4 soap_in_ns4__RobotTaskStates(struct soap*, const char*, ns4__RobotTaskStates *, const char*);

#ifndef soap_write_ns4__RobotTaskStates
#define soap_write_ns4__RobotTaskStates(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotTaskStates", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotTaskStates * SOAP_FMAC4 soap_get_ns4__RobotTaskStates(struct soap*, ns4__RobotTaskStates *, const char*, const char*);

#ifndef soap_read_ns4__RobotTaskStates
#define soap_read_ns4__RobotTaskStates(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotTaskStates(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotTaskStates * SOAP_FMAC2 soap_instantiate_ns4__RobotTaskStates(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotTaskStates * soap_new_ns4__RobotTaskStates(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotTaskStates(soap, n, NULL, NULL, NULL); }

inline ns4__RobotTaskStates * soap_new_req_ns4__RobotTaskStates(struct soap *soap) { ns4__RobotTaskStates *_p = soap_instantiate_ns4__RobotTaskStates(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__RobotTaskStates * soap_new_set_ns4__RobotTaskStates(struct soap *soap, std::vector<ns4__RobotTaskState * >& States) { ns4__RobotTaskStates *_p = soap_instantiate_ns4__RobotTaskStates(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotTaskStates::States = States; } return _p; }

inline void soap_delete_ns4__RobotTaskStates(struct soap *soap, ns4__RobotTaskStates *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotTaskStates(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotTaskState
#define SOAP_TYPE_TaskData_ns4__RobotTaskState (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotTaskState(struct soap*, const char*, int, const ns4__RobotTaskState *, const char*);
SOAP_FMAC3 ns4__RobotTaskState * SOAP_FMAC4 soap_in_ns4__RobotTaskState(struct soap*, const char*, ns4__RobotTaskState *, const char*);

#ifndef soap_write_ns4__RobotTaskState
#define soap_write_ns4__RobotTaskState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotTaskState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotTaskState * SOAP_FMAC4 soap_get_ns4__RobotTaskState(struct soap*, ns4__RobotTaskState *, const char*, const char*);

#ifndef soap_read_ns4__RobotTaskState
#define soap_read_ns4__RobotTaskState(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotTaskState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotTaskState * SOAP_FMAC2 soap_instantiate_ns4__RobotTaskState(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotTaskState * soap_new_ns4__RobotTaskState(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotTaskState(soap, n, NULL, NULL, NULL); }

inline ns4__RobotTaskState * soap_new_req_ns4__RobotTaskState(struct soap *soap, std::string& RobotIp, std::string& TaskId, std::string& TaskType, std::string& TaskDesc) { ns4__RobotTaskState *_p = soap_instantiate_ns4__RobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotTaskState::RobotIp = RobotIp; _p->ns4__RobotTaskState::TaskId = TaskId; _p->ns4__RobotTaskState::TaskType = TaskType; _p->ns4__RobotTaskState::TaskDesc = TaskDesc; } return _p; }

inline ns4__RobotTaskState * soap_new_set_ns4__RobotTaskState(struct soap *soap, std::string& RobotIp, std::string& TaskId, std::string& TaskType, std::string& TaskDesc) { ns4__RobotTaskState *_p = soap_instantiate_ns4__RobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotTaskState::RobotIp = RobotIp; _p->ns4__RobotTaskState::TaskId = TaskId; _p->ns4__RobotTaskState::TaskType = TaskType; _p->ns4__RobotTaskState::TaskDesc = TaskDesc; } return _p; }

inline void soap_delete_ns4__RobotTaskState(struct soap *soap, ns4__RobotTaskState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotTaskState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__SpeedInfos
#define SOAP_TYPE_TaskData_ns4__SpeedInfos (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SpeedInfos(struct soap*, const char*, int, const ns4__SpeedInfos *, const char*);
SOAP_FMAC3 ns4__SpeedInfos * SOAP_FMAC4 soap_in_ns4__SpeedInfos(struct soap*, const char*, ns4__SpeedInfos *, const char*);

#ifndef soap_write_ns4__SpeedInfos
#define soap_write_ns4__SpeedInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:SpeedInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__SpeedInfos * SOAP_FMAC4 soap_get_ns4__SpeedInfos(struct soap*, ns4__SpeedInfos *, const char*, const char*);

#ifndef soap_read_ns4__SpeedInfos
#define soap_read_ns4__SpeedInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__SpeedInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__SpeedInfos * SOAP_FMAC2 soap_instantiate_ns4__SpeedInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__SpeedInfos * soap_new_ns4__SpeedInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__SpeedInfos(soap, n, NULL, NULL, NULL); }

inline ns4__SpeedInfos * soap_new_req_ns4__SpeedInfos(struct soap *soap) { ns4__SpeedInfos *_p = soap_instantiate_ns4__SpeedInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__SpeedInfos * soap_new_set_ns4__SpeedInfos(struct soap *soap, std::vector<ns4__SpeedInfo * >& Infos) { ns4__SpeedInfos *_p = soap_instantiate_ns4__SpeedInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__SpeedInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__SpeedInfos(struct soap *soap, ns4__SpeedInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__SpeedInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__SpeedInfo
#define SOAP_TYPE_TaskData_ns4__SpeedInfo (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__SpeedInfo(struct soap*, const char*, int, const ns4__SpeedInfo *, const char*);
SOAP_FMAC3 ns4__SpeedInfo * SOAP_FMAC4 soap_in_ns4__SpeedInfo(struct soap*, const char*, ns4__SpeedInfo *, const char*);

#ifndef soap_write_ns4__SpeedInfo
#define soap_write_ns4__SpeedInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:SpeedInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__SpeedInfo * SOAP_FMAC4 soap_get_ns4__SpeedInfo(struct soap*, ns4__SpeedInfo *, const char*, const char*);

#ifndef soap_read_ns4__SpeedInfo
#define soap_read_ns4__SpeedInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__SpeedInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__SpeedInfo * SOAP_FMAC2 soap_instantiate_ns4__SpeedInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__SpeedInfo * soap_new_ns4__SpeedInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__SpeedInfo(soap, n, NULL, NULL, NULL); }

inline ns4__SpeedInfo * soap_new_req_ns4__SpeedInfo(struct soap *soap, std::string& RobotIp, double Speed) { ns4__SpeedInfo *_p = soap_instantiate_ns4__SpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__SpeedInfo::RobotIp = RobotIp; _p->ns4__SpeedInfo::Speed = Speed; } return _p; }

inline ns4__SpeedInfo * soap_new_set_ns4__SpeedInfo(struct soap *soap, std::string& RobotIp, double Speed) { ns4__SpeedInfo *_p = soap_instantiate_ns4__SpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__SpeedInfo::RobotIp = RobotIp; _p->ns4__SpeedInfo::Speed = Speed; } return _p; }

inline void soap_delete_ns4__SpeedInfo(struct soap *soap, ns4__SpeedInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__SpeedInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__BatteryInfos
#define SOAP_TYPE_TaskData_ns4__BatteryInfos (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__BatteryInfos(struct soap*, const char*, int, const ns4__BatteryInfos *, const char*);
SOAP_FMAC3 ns4__BatteryInfos * SOAP_FMAC4 soap_in_ns4__BatteryInfos(struct soap*, const char*, ns4__BatteryInfos *, const char*);

#ifndef soap_write_ns4__BatteryInfos
#define soap_write_ns4__BatteryInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:BatteryInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__BatteryInfos * SOAP_FMAC4 soap_get_ns4__BatteryInfos(struct soap*, ns4__BatteryInfos *, const char*, const char*);

#ifndef soap_read_ns4__BatteryInfos
#define soap_read_ns4__BatteryInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__BatteryInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__BatteryInfos * SOAP_FMAC2 soap_instantiate_ns4__BatteryInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__BatteryInfos * soap_new_ns4__BatteryInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__BatteryInfos(soap, n, NULL, NULL, NULL); }

inline ns4__BatteryInfos * soap_new_req_ns4__BatteryInfos(struct soap *soap) { ns4__BatteryInfos *_p = soap_instantiate_ns4__BatteryInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__BatteryInfos * soap_new_set_ns4__BatteryInfos(struct soap *soap, std::vector<ns4__BatteryInfo * >& Infos) { ns4__BatteryInfos *_p = soap_instantiate_ns4__BatteryInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__BatteryInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__BatteryInfos(struct soap *soap, ns4__BatteryInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__BatteryInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__BatteryInfo
#define SOAP_TYPE_TaskData_ns4__BatteryInfo (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__BatteryInfo(struct soap*, const char*, int, const ns4__BatteryInfo *, const char*);
SOAP_FMAC3 ns4__BatteryInfo * SOAP_FMAC4 soap_in_ns4__BatteryInfo(struct soap*, const char*, ns4__BatteryInfo *, const char*);

#ifndef soap_write_ns4__BatteryInfo
#define soap_write_ns4__BatteryInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:BatteryInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__BatteryInfo * SOAP_FMAC4 soap_get_ns4__BatteryInfo(struct soap*, ns4__BatteryInfo *, const char*, const char*);

#ifndef soap_read_ns4__BatteryInfo
#define soap_read_ns4__BatteryInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__BatteryInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__BatteryInfo * SOAP_FMAC2 soap_instantiate_ns4__BatteryInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__BatteryInfo * soap_new_ns4__BatteryInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__BatteryInfo(soap, n, NULL, NULL, NULL); }

inline ns4__BatteryInfo * soap_new_req_ns4__BatteryInfo(struct soap *soap, std::string& RobotIp, double BatteryValue, double BatteryPercent) { ns4__BatteryInfo *_p = soap_instantiate_ns4__BatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__BatteryInfo::RobotIp = RobotIp; _p->ns4__BatteryInfo::BatteryValue = BatteryValue; _p->ns4__BatteryInfo::BatteryPercent = BatteryPercent; } return _p; }

inline ns4__BatteryInfo * soap_new_set_ns4__BatteryInfo(struct soap *soap, std::string& RobotIp, double BatteryValue, double BatteryPercent) { ns4__BatteryInfo *_p = soap_instantiate_ns4__BatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__BatteryInfo::RobotIp = RobotIp; _p->ns4__BatteryInfo::BatteryValue = BatteryValue; _p->ns4__BatteryInfo::BatteryPercent = BatteryPercent; } return _p; }

inline void soap_delete_ns4__BatteryInfo(struct soap *soap, ns4__BatteryInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__BatteryInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotInfos
#define SOAP_TYPE_TaskData_ns4__RobotInfos (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotInfos(struct soap*, const char*, int, const ns4__RobotInfos *, const char*);
SOAP_FMAC3 ns4__RobotInfos * SOAP_FMAC4 soap_in_ns4__RobotInfos(struct soap*, const char*, ns4__RobotInfos *, const char*);

#ifndef soap_write_ns4__RobotInfos
#define soap_write_ns4__RobotInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotInfos * SOAP_FMAC4 soap_get_ns4__RobotInfos(struct soap*, ns4__RobotInfos *, const char*, const char*);

#ifndef soap_read_ns4__RobotInfos
#define soap_read_ns4__RobotInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotInfos * SOAP_FMAC2 soap_instantiate_ns4__RobotInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotInfos * soap_new_ns4__RobotInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotInfos(soap, n, NULL, NULL, NULL); }

inline ns4__RobotInfos * soap_new_req_ns4__RobotInfos(struct soap *soap) { ns4__RobotInfos *_p = soap_instantiate_ns4__RobotInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__RobotInfos * soap_new_set_ns4__RobotInfos(struct soap *soap, std::vector<ns4__RobotInfo * >& Infos) { ns4__RobotInfos *_p = soap_instantiate_ns4__RobotInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__RobotInfos(struct soap *soap, ns4__RobotInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__RobotInfo
#define SOAP_TYPE_TaskData_ns4__RobotInfo (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__RobotInfo(struct soap*, const char*, int, const ns4__RobotInfo *, const char*);
SOAP_FMAC3 ns4__RobotInfo * SOAP_FMAC4 soap_in_ns4__RobotInfo(struct soap*, const char*, ns4__RobotInfo *, const char*);

#ifndef soap_write_ns4__RobotInfo
#define soap_write_ns4__RobotInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:RobotInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotInfo * SOAP_FMAC4 soap_get_ns4__RobotInfo(struct soap*, ns4__RobotInfo *, const char*, const char*);

#ifndef soap_read_ns4__RobotInfo
#define soap_read_ns4__RobotInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__RobotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__RobotInfo * SOAP_FMAC2 soap_instantiate_ns4__RobotInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__RobotInfo * soap_new_ns4__RobotInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__RobotInfo(soap, n, NULL, NULL, NULL); }

inline ns4__RobotInfo * soap_new_req_ns4__RobotInfo(struct soap *soap, std::string& RobotName, std::string& RobotIp, std::string& CameraIp, int CameraPort, std::string& FlirIp, int FlirPort, std::string& CameraUser, std::string& CameraPassword, std::string& FlirUser, std::string& FlirPassword) { ns4__RobotInfo *_p = soap_instantiate_ns4__RobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotInfo::RobotName = RobotName; _p->ns4__RobotInfo::RobotIp = RobotIp; _p->ns4__RobotInfo::CameraIp = CameraIp; _p->ns4__RobotInfo::CameraPort = CameraPort; _p->ns4__RobotInfo::FlirIp = FlirIp; _p->ns4__RobotInfo::FlirPort = FlirPort; _p->ns4__RobotInfo::CameraUser = CameraUser; _p->ns4__RobotInfo::CameraPassword = CameraPassword; _p->ns4__RobotInfo::FlirUser = FlirUser; _p->ns4__RobotInfo::FlirPassword = FlirPassword; } return _p; }

inline ns4__RobotInfo * soap_new_set_ns4__RobotInfo(struct soap *soap, std::string& RobotName, std::string& RobotIp, std::string& CameraIp, int CameraPort, std::string& FlirIp, int FlirPort, std::string& CameraUser, std::string& CameraPassword, std::string& FlirUser, std::string& FlirPassword) { ns4__RobotInfo *_p = soap_instantiate_ns4__RobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__RobotInfo::RobotName = RobotName; _p->ns4__RobotInfo::RobotIp = RobotIp; _p->ns4__RobotInfo::CameraIp = CameraIp; _p->ns4__RobotInfo::CameraPort = CameraPort; _p->ns4__RobotInfo::FlirIp = FlirIp; _p->ns4__RobotInfo::FlirPort = FlirPort; _p->ns4__RobotInfo::CameraUser = CameraUser; _p->ns4__RobotInfo::CameraPassword = CameraPassword; _p->ns4__RobotInfo::FlirUser = FlirUser; _p->ns4__RobotInfo::FlirPassword = FlirPassword; } return _p; }

inline void soap_delete_ns4__RobotInfo(struct soap *soap, ns4__RobotInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__RobotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__ConnectInfos
#define SOAP_TYPE_TaskData_ns4__ConnectInfos (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ConnectInfos(struct soap*, const char*, int, const ns4__ConnectInfos *, const char*);
SOAP_FMAC3 ns4__ConnectInfos * SOAP_FMAC4 soap_in_ns4__ConnectInfos(struct soap*, const char*, ns4__ConnectInfos *, const char*);

#ifndef soap_write_ns4__ConnectInfos
#define soap_write_ns4__ConnectInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:ConnectInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__ConnectInfos * SOAP_FMAC4 soap_get_ns4__ConnectInfos(struct soap*, ns4__ConnectInfos *, const char*, const char*);

#ifndef soap_read_ns4__ConnectInfos
#define soap_read_ns4__ConnectInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__ConnectInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__ConnectInfos * SOAP_FMAC2 soap_instantiate_ns4__ConnectInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ConnectInfos * soap_new_ns4__ConnectInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns4__ConnectInfos(soap, n, NULL, NULL, NULL); }

inline ns4__ConnectInfos * soap_new_req_ns4__ConnectInfos(struct soap *soap) { ns4__ConnectInfos *_p = soap_instantiate_ns4__ConnectInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__ConnectInfos * soap_new_set_ns4__ConnectInfos(struct soap *soap, std::vector<ns4__ConnectInfo * >& Infos) { ns4__ConnectInfos *_p = soap_instantiate_ns4__ConnectInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ConnectInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns4__ConnectInfos(struct soap *soap, ns4__ConnectInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ConnectInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_ns4__ConnectInfo
#define SOAP_TYPE_TaskData_ns4__ConnectInfo (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ConnectInfo(struct soap*, const char*, int, const ns4__ConnectInfo *, const char*);
SOAP_FMAC3 ns4__ConnectInfo * SOAP_FMAC4 soap_in_ns4__ConnectInfo(struct soap*, const char*, ns4__ConnectInfo *, const char*);

#ifndef soap_write_ns4__ConnectInfo
#define soap_write_ns4__ConnectInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:ConnectInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__ConnectInfo * SOAP_FMAC4 soap_get_ns4__ConnectInfo(struct soap*, ns4__ConnectInfo *, const char*, const char*);

#ifndef soap_read_ns4__ConnectInfo
#define soap_read_ns4__ConnectInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_ns4__ConnectInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__ConnectInfo * SOAP_FMAC2 soap_instantiate_ns4__ConnectInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ConnectInfo * soap_new_ns4__ConnectInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__ConnectInfo(soap, n, NULL, NULL, NULL); }

inline ns4__ConnectInfo * soap_new_req_ns4__ConnectInfo(struct soap *soap, std::string& RobotIp, bool State, std::string& ConnectDesc) { ns4__ConnectInfo *_p = soap_instantiate_ns4__ConnectInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ConnectInfo::RobotIp = RobotIp; _p->ns4__ConnectInfo::State = State; _p->ns4__ConnectInfo::ConnectDesc = ConnectDesc; } return _p; }

inline ns4__ConnectInfo * soap_new_set_ns4__ConnectInfo(struct soap *soap, std::string& RobotIp, bool State, std::string& ConnectDesc) { ns4__ConnectInfo *_p = soap_instantiate_ns4__ConnectInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ConnectInfo::RobotIp = RobotIp; _p->ns4__ConnectInfo::State = State; _p->ns4__ConnectInfo::ConnectDesc = ConnectDesc; } return _p; }

inline void soap_delete_ns4__ConnectInfo(struct soap *soap, ns4__ConnectInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ConnectInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskData_SOAP_ENV__Fault
#define SOAP_TYPE_TaskData_SOAP_ENV__Fault (174)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_SOAP_ENV__Fault(soap, data),0) || TaskData::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskData_SOAP_ENV__Reason
#define SOAP_TYPE_TaskData_SOAP_ENV__Reason (173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_SOAP_ENV__Reason(soap, data),0) || TaskData::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskData_SOAP_ENV__Detail
#define SOAP_TYPE_TaskData_SOAP_ENV__Detail (170)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_SOAP_ENV__Detail(soap, data),0) || TaskData::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskData_SOAP_ENV__Code
#define SOAP_TYPE_TaskData_SOAP_ENV__Code (168)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_SOAP_ENV__Code(soap, data),0) || TaskData::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskData_SOAP_ENV__Header
#define SOAP_TYPE_TaskData_SOAP_ENV__Header (167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_SOAP_ENV__Header(soap, data),0) || TaskData::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_TaskData___ns1__GetTaskExcuteData
#define SOAP_TYPE_TaskData___ns1__GetTaskExcuteData (166)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTaskExcuteData(struct soap*, struct __ns1__GetTaskExcuteData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTaskExcuteData(struct soap*, const struct __ns1__GetTaskExcuteData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTaskExcuteData(struct soap*, const char*, int, const struct __ns1__GetTaskExcuteData *, const char*);
SOAP_FMAC3 struct __ns1__GetTaskExcuteData * SOAP_FMAC4 soap_in___ns1__GetTaskExcuteData(struct soap*, const char*, struct __ns1__GetTaskExcuteData *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTaskExcuteData(struct soap*, const struct __ns1__GetTaskExcuteData *, const char*, const char*);

#ifndef soap_write___ns1__GetTaskExcuteData
#define soap_write___ns1__GetTaskExcuteData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__GetTaskExcuteData(soap, data),0) || TaskData::soap_put___ns1__GetTaskExcuteData(soap, data, "-ns1:GetTaskExcuteData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetTaskExcuteData * SOAP_FMAC4 soap_get___ns1__GetTaskExcuteData(struct soap*, struct __ns1__GetTaskExcuteData *, const char*, const char*);

#ifndef soap_read___ns1__GetTaskExcuteData
#define soap_read___ns1__GetTaskExcuteData(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__GetTaskExcuteData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetTaskExcuteData * SOAP_FMAC2 soap_instantiate___ns1__GetTaskExcuteData(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTaskExcuteData * soap_new___ns1__GetTaskExcuteData(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetTaskExcuteData(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetTaskExcuteData * soap_new_req___ns1__GetTaskExcuteData(struct soap *soap) { struct __ns1__GetTaskExcuteData *_p = soap_instantiate___ns1__GetTaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTaskExcuteData(soap, _p); } return _p; }

inline struct __ns1__GetTaskExcuteData * soap_new_set___ns1__GetTaskExcuteData(struct soap *soap, _ns4__GetTaskExcuteData *ns4__GetTaskExcuteData) { struct __ns1__GetTaskExcuteData *_p = soap_instantiate___ns1__GetTaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTaskExcuteData(soap, _p); _p->ns4__GetTaskExcuteData = ns4__GetTaskExcuteData; } return _p; }

inline void soap_delete___ns1__GetTaskExcuteData(struct soap *soap, struct __ns1__GetTaskExcuteData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTaskExcuteData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__RobotControlTask
#define SOAP_TYPE_TaskData___ns1__RobotControlTask (162)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RobotControlTask(struct soap*, struct __ns1__RobotControlTask *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RobotControlTask(struct soap*, const struct __ns1__RobotControlTask *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RobotControlTask(struct soap*, const char*, int, const struct __ns1__RobotControlTask *, const char*);
SOAP_FMAC3 struct __ns1__RobotControlTask * SOAP_FMAC4 soap_in___ns1__RobotControlTask(struct soap*, const char*, struct __ns1__RobotControlTask *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RobotControlTask(struct soap*, const struct __ns1__RobotControlTask *, const char*, const char*);

#ifndef soap_write___ns1__RobotControlTask
#define soap_write___ns1__RobotControlTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__RobotControlTask(soap, data),0) || TaskData::soap_put___ns1__RobotControlTask(soap, data, "-ns1:RobotControlTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RobotControlTask * SOAP_FMAC4 soap_get___ns1__RobotControlTask(struct soap*, struct __ns1__RobotControlTask *, const char*, const char*);

#ifndef soap_read___ns1__RobotControlTask
#define soap_read___ns1__RobotControlTask(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__RobotControlTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RobotControlTask * SOAP_FMAC2 soap_instantiate___ns1__RobotControlTask(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RobotControlTask * soap_new___ns1__RobotControlTask(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RobotControlTask(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RobotControlTask * soap_new_req___ns1__RobotControlTask(struct soap *soap) { struct __ns1__RobotControlTask *_p = soap_instantiate___ns1__RobotControlTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotControlTask(soap, _p); } return _p; }

inline struct __ns1__RobotControlTask * soap_new_set___ns1__RobotControlTask(struct soap *soap, _ns4__RobotControlTask *ns4__RobotControlTask) { struct __ns1__RobotControlTask *_p = soap_instantiate___ns1__RobotControlTask(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotControlTask(soap, _p); _p->ns4__RobotControlTask = ns4__RobotControlTask; } return _p; }

inline void soap_delete___ns1__RobotControlTask(struct soap *soap, struct __ns1__RobotControlTask *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RobotControlTask(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__SetTaskPathInfo
#define SOAP_TYPE_TaskData___ns1__SetTaskPathInfo (158)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetTaskPathInfo(struct soap*, struct __ns1__SetTaskPathInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetTaskPathInfo(struct soap*, const struct __ns1__SetTaskPathInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetTaskPathInfo(struct soap*, const char*, int, const struct __ns1__SetTaskPathInfo *, const char*);
SOAP_FMAC3 struct __ns1__SetTaskPathInfo * SOAP_FMAC4 soap_in___ns1__SetTaskPathInfo(struct soap*, const char*, struct __ns1__SetTaskPathInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetTaskPathInfo(struct soap*, const struct __ns1__SetTaskPathInfo *, const char*, const char*);

#ifndef soap_write___ns1__SetTaskPathInfo
#define soap_write___ns1__SetTaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__SetTaskPathInfo(soap, data),0) || TaskData::soap_put___ns1__SetTaskPathInfo(soap, data, "-ns1:SetTaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetTaskPathInfo * SOAP_FMAC4 soap_get___ns1__SetTaskPathInfo(struct soap*, struct __ns1__SetTaskPathInfo *, const char*, const char*);

#ifndef soap_read___ns1__SetTaskPathInfo
#define soap_read___ns1__SetTaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__SetTaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetTaskPathInfo * SOAP_FMAC2 soap_instantiate___ns1__SetTaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetTaskPathInfo * soap_new___ns1__SetTaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetTaskPathInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetTaskPathInfo * soap_new_req___ns1__SetTaskPathInfo(struct soap *soap) { struct __ns1__SetTaskPathInfo *_p = soap_instantiate___ns1__SetTaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetTaskPathInfo(soap, _p); } return _p; }

inline struct __ns1__SetTaskPathInfo * soap_new_set___ns1__SetTaskPathInfo(struct soap *soap, _ns4__SetTaskPathInfo *ns4__SetTaskPathInfo) { struct __ns1__SetTaskPathInfo *_p = soap_instantiate___ns1__SetTaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetTaskPathInfo(soap, _p); _p->ns4__SetTaskPathInfo = ns4__SetTaskPathInfo; } return _p; }

inline void soap_delete___ns1__SetTaskPathInfo(struct soap *soap, struct __ns1__SetTaskPathInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetTaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__StartTaskByPointList
#define SOAP_TYPE_TaskData___ns1__StartTaskByPointList (154)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StartTaskByPointList(struct soap*, struct __ns1__StartTaskByPointList *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StartTaskByPointList(struct soap*, const struct __ns1__StartTaskByPointList *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StartTaskByPointList(struct soap*, const char*, int, const struct __ns1__StartTaskByPointList *, const char*);
SOAP_FMAC3 struct __ns1__StartTaskByPointList * SOAP_FMAC4 soap_in___ns1__StartTaskByPointList(struct soap*, const char*, struct __ns1__StartTaskByPointList *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StartTaskByPointList(struct soap*, const struct __ns1__StartTaskByPointList *, const char*, const char*);

#ifndef soap_write___ns1__StartTaskByPointList
#define soap_write___ns1__StartTaskByPointList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__StartTaskByPointList(soap, data),0) || TaskData::soap_put___ns1__StartTaskByPointList(soap, data, "-ns1:StartTaskByPointList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StartTaskByPointList * SOAP_FMAC4 soap_get___ns1__StartTaskByPointList(struct soap*, struct __ns1__StartTaskByPointList *, const char*, const char*);

#ifndef soap_read___ns1__StartTaskByPointList
#define soap_read___ns1__StartTaskByPointList(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__StartTaskByPointList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StartTaskByPointList * SOAP_FMAC2 soap_instantiate___ns1__StartTaskByPointList(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StartTaskByPointList * soap_new___ns1__StartTaskByPointList(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StartTaskByPointList(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StartTaskByPointList * soap_new_req___ns1__StartTaskByPointList(struct soap *soap) { struct __ns1__StartTaskByPointList *_p = soap_instantiate___ns1__StartTaskByPointList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartTaskByPointList(soap, _p); } return _p; }

inline struct __ns1__StartTaskByPointList * soap_new_set___ns1__StartTaskByPointList(struct soap *soap, _ns4__StartTaskByPointList *ns4__StartTaskByPointList) { struct __ns1__StartTaskByPointList *_p = soap_instantiate___ns1__StartTaskByPointList(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartTaskByPointList(soap, _p); _p->ns4__StartTaskByPointList = ns4__StartTaskByPointList; } return _p; }

inline void soap_delete___ns1__StartTaskByPointList(struct soap *soap, struct __ns1__StartTaskByPointList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StartTaskByPointList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__StartTaskByPathId
#define SOAP_TYPE_TaskData___ns1__StartTaskByPathId (150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__StartTaskByPathId(struct soap*, struct __ns1__StartTaskByPathId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__StartTaskByPathId(struct soap*, const struct __ns1__StartTaskByPathId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__StartTaskByPathId(struct soap*, const char*, int, const struct __ns1__StartTaskByPathId *, const char*);
SOAP_FMAC3 struct __ns1__StartTaskByPathId * SOAP_FMAC4 soap_in___ns1__StartTaskByPathId(struct soap*, const char*, struct __ns1__StartTaskByPathId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__StartTaskByPathId(struct soap*, const struct __ns1__StartTaskByPathId *, const char*, const char*);

#ifndef soap_write___ns1__StartTaskByPathId
#define soap_write___ns1__StartTaskByPathId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__StartTaskByPathId(soap, data),0) || TaskData::soap_put___ns1__StartTaskByPathId(soap, data, "-ns1:StartTaskByPathId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__StartTaskByPathId * SOAP_FMAC4 soap_get___ns1__StartTaskByPathId(struct soap*, struct __ns1__StartTaskByPathId *, const char*, const char*);

#ifndef soap_read___ns1__StartTaskByPathId
#define soap_read___ns1__StartTaskByPathId(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__StartTaskByPathId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__StartTaskByPathId * SOAP_FMAC2 soap_instantiate___ns1__StartTaskByPathId(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__StartTaskByPathId * soap_new___ns1__StartTaskByPathId(struct soap *soap, int n = -1) { return soap_instantiate___ns1__StartTaskByPathId(soap, n, NULL, NULL, NULL); }

inline struct __ns1__StartTaskByPathId * soap_new_req___ns1__StartTaskByPathId(struct soap *soap) { struct __ns1__StartTaskByPathId *_p = soap_instantiate___ns1__StartTaskByPathId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartTaskByPathId(soap, _p); } return _p; }

inline struct __ns1__StartTaskByPathId * soap_new_set___ns1__StartTaskByPathId(struct soap *soap, _ns4__StartTaskByPathId *ns4__StartTaskByPathId) { struct __ns1__StartTaskByPathId *_p = soap_instantiate___ns1__StartTaskByPathId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__StartTaskByPathId(soap, _p); _p->ns4__StartTaskByPathId = ns4__StartTaskByPathId; } return _p; }

inline void soap_delete___ns1__StartTaskByPathId(struct soap *soap, struct __ns1__StartTaskByPathId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__StartTaskByPathId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__GetTaskPathInfo
#define SOAP_TYPE_TaskData___ns1__GetTaskPathInfo (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTaskPathInfo(struct soap*, struct __ns1__GetTaskPathInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTaskPathInfo(struct soap*, const struct __ns1__GetTaskPathInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTaskPathInfo(struct soap*, const char*, int, const struct __ns1__GetTaskPathInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetTaskPathInfo * SOAP_FMAC4 soap_in___ns1__GetTaskPathInfo(struct soap*, const char*, struct __ns1__GetTaskPathInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTaskPathInfo(struct soap*, const struct __ns1__GetTaskPathInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetTaskPathInfo
#define soap_write___ns1__GetTaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__GetTaskPathInfo(soap, data),0) || TaskData::soap_put___ns1__GetTaskPathInfo(soap, data, "-ns1:GetTaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetTaskPathInfo * SOAP_FMAC4 soap_get___ns1__GetTaskPathInfo(struct soap*, struct __ns1__GetTaskPathInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetTaskPathInfo
#define soap_read___ns1__GetTaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__GetTaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetTaskPathInfo * SOAP_FMAC2 soap_instantiate___ns1__GetTaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTaskPathInfo * soap_new___ns1__GetTaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetTaskPathInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetTaskPathInfo * soap_new_req___ns1__GetTaskPathInfo(struct soap *soap) { struct __ns1__GetTaskPathInfo *_p = soap_instantiate___ns1__GetTaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTaskPathInfo(soap, _p); } return _p; }

inline struct __ns1__GetTaskPathInfo * soap_new_set___ns1__GetTaskPathInfo(struct soap *soap, _ns4__GetTaskPathInfo *ns4__GetTaskPathInfo) { struct __ns1__GetTaskPathInfo *_p = soap_instantiate___ns1__GetTaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTaskPathInfo(soap, _p); _p->ns4__GetTaskPathInfo = ns4__GetTaskPathInfo; } return _p; }

inline void soap_delete___ns1__GetTaskPathInfo(struct soap *soap, struct __ns1__GetTaskPathInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__GetPatrolPointInfo
#define SOAP_TYPE_TaskData___ns1__GetPatrolPointInfo (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPatrolPointInfo(struct soap*, struct __ns1__GetPatrolPointInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPatrolPointInfo(struct soap*, const struct __ns1__GetPatrolPointInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPatrolPointInfo(struct soap*, const char*, int, const struct __ns1__GetPatrolPointInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetPatrolPointInfo * SOAP_FMAC4 soap_in___ns1__GetPatrolPointInfo(struct soap*, const char*, struct __ns1__GetPatrolPointInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPatrolPointInfo(struct soap*, const struct __ns1__GetPatrolPointInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetPatrolPointInfo
#define soap_write___ns1__GetPatrolPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__GetPatrolPointInfo(soap, data),0) || TaskData::soap_put___ns1__GetPatrolPointInfo(soap, data, "-ns1:GetPatrolPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetPatrolPointInfo * SOAP_FMAC4 soap_get___ns1__GetPatrolPointInfo(struct soap*, struct __ns1__GetPatrolPointInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetPatrolPointInfo
#define soap_read___ns1__GetPatrolPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__GetPatrolPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetPatrolPointInfo * SOAP_FMAC2 soap_instantiate___ns1__GetPatrolPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPatrolPointInfo * soap_new___ns1__GetPatrolPointInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetPatrolPointInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetPatrolPointInfo * soap_new_req___ns1__GetPatrolPointInfo(struct soap *soap) { struct __ns1__GetPatrolPointInfo *_p = soap_instantiate___ns1__GetPatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPatrolPointInfo(soap, _p); } return _p; }

inline struct __ns1__GetPatrolPointInfo * soap_new_set___ns1__GetPatrolPointInfo(struct soap *soap, _ns4__GetPatrolPointInfo *ns4__GetPatrolPointInfo) { struct __ns1__GetPatrolPointInfo *_p = soap_instantiate___ns1__GetPatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPatrolPointInfo(soap, _p); _p->ns4__GetPatrolPointInfo = ns4__GetPatrolPointInfo; } return _p; }

inline void soap_delete___ns1__GetPatrolPointInfo(struct soap *soap, struct __ns1__GetPatrolPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetPatrolPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__GetDockPointInfo
#define SOAP_TYPE_TaskData___ns1__GetDockPointInfo (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetDockPointInfo(struct soap*, struct __ns1__GetDockPointInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetDockPointInfo(struct soap*, const struct __ns1__GetDockPointInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetDockPointInfo(struct soap*, const char*, int, const struct __ns1__GetDockPointInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetDockPointInfo * SOAP_FMAC4 soap_in___ns1__GetDockPointInfo(struct soap*, const char*, struct __ns1__GetDockPointInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetDockPointInfo(struct soap*, const struct __ns1__GetDockPointInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetDockPointInfo
#define soap_write___ns1__GetDockPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__GetDockPointInfo(soap, data),0) || TaskData::soap_put___ns1__GetDockPointInfo(soap, data, "-ns1:GetDockPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetDockPointInfo * SOAP_FMAC4 soap_get___ns1__GetDockPointInfo(struct soap*, struct __ns1__GetDockPointInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetDockPointInfo
#define soap_read___ns1__GetDockPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__GetDockPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetDockPointInfo * SOAP_FMAC2 soap_instantiate___ns1__GetDockPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetDockPointInfo * soap_new___ns1__GetDockPointInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetDockPointInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetDockPointInfo * soap_new_req___ns1__GetDockPointInfo(struct soap *soap) { struct __ns1__GetDockPointInfo *_p = soap_instantiate___ns1__GetDockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetDockPointInfo(soap, _p); } return _p; }

inline struct __ns1__GetDockPointInfo * soap_new_set___ns1__GetDockPointInfo(struct soap *soap, _ns4__GetDockPointInfo *ns4__GetDockPointInfo) { struct __ns1__GetDockPointInfo *_p = soap_instantiate___ns1__GetDockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetDockPointInfo(soap, _p); _p->ns4__GetDockPointInfo = ns4__GetDockPointInfo; } return _p; }

inline void soap_delete___ns1__GetDockPointInfo(struct soap *soap, struct __ns1__GetDockPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetDockPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__GetMapEdgeInfo
#define SOAP_TYPE_TaskData___ns1__GetMapEdgeInfo (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMapEdgeInfo(struct soap*, struct __ns1__GetMapEdgeInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMapEdgeInfo(struct soap*, const struct __ns1__GetMapEdgeInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMapEdgeInfo(struct soap*, const char*, int, const struct __ns1__GetMapEdgeInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetMapEdgeInfo * SOAP_FMAC4 soap_in___ns1__GetMapEdgeInfo(struct soap*, const char*, struct __ns1__GetMapEdgeInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMapEdgeInfo(struct soap*, const struct __ns1__GetMapEdgeInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetMapEdgeInfo
#define soap_write___ns1__GetMapEdgeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__GetMapEdgeInfo(soap, data),0) || TaskData::soap_put___ns1__GetMapEdgeInfo(soap, data, "-ns1:GetMapEdgeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetMapEdgeInfo * SOAP_FMAC4 soap_get___ns1__GetMapEdgeInfo(struct soap*, struct __ns1__GetMapEdgeInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetMapEdgeInfo
#define soap_read___ns1__GetMapEdgeInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__GetMapEdgeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetMapEdgeInfo * SOAP_FMAC2 soap_instantiate___ns1__GetMapEdgeInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMapEdgeInfo * soap_new___ns1__GetMapEdgeInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetMapEdgeInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetMapEdgeInfo * soap_new_req___ns1__GetMapEdgeInfo(struct soap *soap) { struct __ns1__GetMapEdgeInfo *_p = soap_instantiate___ns1__GetMapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMapEdgeInfo(soap, _p); } return _p; }

inline struct __ns1__GetMapEdgeInfo * soap_new_set___ns1__GetMapEdgeInfo(struct soap *soap, _ns4__GetMapEdgeInfo *ns4__GetMapEdgeInfo) { struct __ns1__GetMapEdgeInfo *_p = soap_instantiate___ns1__GetMapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMapEdgeInfo(soap, _p); _p->ns4__GetMapEdgeInfo = ns4__GetMapEdgeInfo; } return _p; }

inline void soap_delete___ns1__GetMapEdgeInfo(struct soap *soap, struct __ns1__GetMapEdgeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMapEdgeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__GetPatrolAreaInfo
#define SOAP_TYPE_TaskData___ns1__GetPatrolAreaInfo (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetPatrolAreaInfo(struct soap*, struct __ns1__GetPatrolAreaInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetPatrolAreaInfo(struct soap*, const struct __ns1__GetPatrolAreaInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetPatrolAreaInfo(struct soap*, const char*, int, const struct __ns1__GetPatrolAreaInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetPatrolAreaInfo * SOAP_FMAC4 soap_in___ns1__GetPatrolAreaInfo(struct soap*, const char*, struct __ns1__GetPatrolAreaInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetPatrolAreaInfo(struct soap*, const struct __ns1__GetPatrolAreaInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetPatrolAreaInfo
#define soap_write___ns1__GetPatrolAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__GetPatrolAreaInfo(soap, data),0) || TaskData::soap_put___ns1__GetPatrolAreaInfo(soap, data, "-ns1:GetPatrolAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetPatrolAreaInfo * SOAP_FMAC4 soap_get___ns1__GetPatrolAreaInfo(struct soap*, struct __ns1__GetPatrolAreaInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetPatrolAreaInfo
#define soap_read___ns1__GetPatrolAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__GetPatrolAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetPatrolAreaInfo * SOAP_FMAC2 soap_instantiate___ns1__GetPatrolAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetPatrolAreaInfo * soap_new___ns1__GetPatrolAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetPatrolAreaInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetPatrolAreaInfo * soap_new_req___ns1__GetPatrolAreaInfo(struct soap *soap) { struct __ns1__GetPatrolAreaInfo *_p = soap_instantiate___ns1__GetPatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPatrolAreaInfo(soap, _p); } return _p; }

inline struct __ns1__GetPatrolAreaInfo * soap_new_set___ns1__GetPatrolAreaInfo(struct soap *soap, _ns4__GetPatrolAreaInfo *ns4__GetPatrolAreaInfo) { struct __ns1__GetPatrolAreaInfo *_p = soap_instantiate___ns1__GetPatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetPatrolAreaInfo(soap, _p); _p->ns4__GetPatrolAreaInfo = ns4__GetPatrolAreaInfo; } return _p; }

inline void soap_delete___ns1__GetPatrolAreaInfo(struct soap *soap, struct __ns1__GetPatrolAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetPatrolAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData___ns1__GetMapAreaInfo
#define SOAP_TYPE_TaskData___ns1__GetMapAreaInfo (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetMapAreaInfo(struct soap*, struct __ns1__GetMapAreaInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetMapAreaInfo(struct soap*, const struct __ns1__GetMapAreaInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetMapAreaInfo(struct soap*, const char*, int, const struct __ns1__GetMapAreaInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetMapAreaInfo * SOAP_FMAC4 soap_in___ns1__GetMapAreaInfo(struct soap*, const char*, struct __ns1__GetMapAreaInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetMapAreaInfo(struct soap*, const struct __ns1__GetMapAreaInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetMapAreaInfo
#define soap_write___ns1__GetMapAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize___ns1__GetMapAreaInfo(soap, data),0) || TaskData::soap_put___ns1__GetMapAreaInfo(soap, data, "-ns1:GetMapAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetMapAreaInfo * SOAP_FMAC4 soap_get___ns1__GetMapAreaInfo(struct soap*, struct __ns1__GetMapAreaInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetMapAreaInfo
#define soap_read___ns1__GetMapAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get___ns1__GetMapAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetMapAreaInfo * SOAP_FMAC2 soap_instantiate___ns1__GetMapAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetMapAreaInfo * soap_new___ns1__GetMapAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetMapAreaInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetMapAreaInfo * soap_new_req___ns1__GetMapAreaInfo(struct soap *soap) { struct __ns1__GetMapAreaInfo *_p = soap_instantiate___ns1__GetMapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMapAreaInfo(soap, _p); } return _p; }

inline struct __ns1__GetMapAreaInfo * soap_new_set___ns1__GetMapAreaInfo(struct soap *soap, _ns4__GetMapAreaInfo *ns4__GetMapAreaInfo) { struct __ns1__GetMapAreaInfo *_p = soap_instantiate___ns1__GetMapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetMapAreaInfo(soap, _p); _p->ns4__GetMapAreaInfo = ns4__GetMapAreaInfo; } return _p; }

inline void soap_delete___ns1__GetMapAreaInfo(struct soap *soap, struct __ns1__GetMapAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetMapAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskData_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_TaskData_PointerToSOAP_ENV__Reason (176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || TaskData::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskData_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_TaskData_PointerToSOAP_ENV__Detail (175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || TaskData::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskData_PointerToSOAP_ENV__Code
#define SOAP_TYPE_TaskData_PointerToSOAP_ENV__Code (169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || TaskData::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetTaskExcuteDataResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetTaskExcuteDataResponse (164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetTaskExcuteDataResponse(struct soap*, _ns4__GetTaskExcuteDataResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetTaskExcuteDataResponse(struct soap*, const char *, int, _ns4__GetTaskExcuteDataResponse *const*, const char *);
SOAP_FMAC3 _ns4__GetTaskExcuteDataResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetTaskExcuteDataResponse(struct soap*, const char*, _ns4__GetTaskExcuteDataResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetTaskExcuteDataResponse(struct soap*, _ns4__GetTaskExcuteDataResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetTaskExcuteDataResponse
#define soap_write_PointerTo_ns4__GetTaskExcuteDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetTaskExcuteDataResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetTaskExcuteDataResponse(soap, data, "ns4:GetTaskExcuteDataResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetTaskExcuteDataResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetTaskExcuteDataResponse(struct soap*, _ns4__GetTaskExcuteDataResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetTaskExcuteDataResponse
#define soap_read_PointerTo_ns4__GetTaskExcuteDataResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetTaskExcuteDataResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetTaskExcuteData
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetTaskExcuteData (163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetTaskExcuteData(struct soap*, _ns4__GetTaskExcuteData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetTaskExcuteData(struct soap*, const char *, int, _ns4__GetTaskExcuteData *const*, const char *);
SOAP_FMAC3 _ns4__GetTaskExcuteData ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetTaskExcuteData(struct soap*, const char*, _ns4__GetTaskExcuteData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetTaskExcuteData(struct soap*, _ns4__GetTaskExcuteData *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetTaskExcuteData
#define soap_write_PointerTo_ns4__GetTaskExcuteData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetTaskExcuteData(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetTaskExcuteData(soap, data, "ns4:GetTaskExcuteData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetTaskExcuteData ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetTaskExcuteData(struct soap*, _ns4__GetTaskExcuteData **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetTaskExcuteData
#define soap_read_PointerTo_ns4__GetTaskExcuteData(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetTaskExcuteData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__RobotControlTaskResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__RobotControlTaskResponse (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__RobotControlTaskResponse(struct soap*, _ns4__RobotControlTaskResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__RobotControlTaskResponse(struct soap*, const char *, int, _ns4__RobotControlTaskResponse *const*, const char *);
SOAP_FMAC3 _ns4__RobotControlTaskResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__RobotControlTaskResponse(struct soap*, const char*, _ns4__RobotControlTaskResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__RobotControlTaskResponse(struct soap*, _ns4__RobotControlTaskResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__RobotControlTaskResponse
#define soap_write_PointerTo_ns4__RobotControlTaskResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__RobotControlTaskResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__RobotControlTaskResponse(soap, data, "ns4:RobotControlTaskResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__RobotControlTaskResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__RobotControlTaskResponse(struct soap*, _ns4__RobotControlTaskResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__RobotControlTaskResponse
#define soap_read_PointerTo_ns4__RobotControlTaskResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__RobotControlTaskResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__RobotControlTask
#define SOAP_TYPE_TaskData_PointerTo_ns4__RobotControlTask (159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__RobotControlTask(struct soap*, _ns4__RobotControlTask *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__RobotControlTask(struct soap*, const char *, int, _ns4__RobotControlTask *const*, const char *);
SOAP_FMAC3 _ns4__RobotControlTask ** SOAP_FMAC4 soap_in_PointerTo_ns4__RobotControlTask(struct soap*, const char*, _ns4__RobotControlTask **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__RobotControlTask(struct soap*, _ns4__RobotControlTask *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__RobotControlTask
#define soap_write_PointerTo_ns4__RobotControlTask(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__RobotControlTask(soap, data),0) || TaskData::soap_put_PointerTo_ns4__RobotControlTask(soap, data, "ns4:RobotControlTask", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__RobotControlTask ** SOAP_FMAC4 soap_get_PointerTo_ns4__RobotControlTask(struct soap*, _ns4__RobotControlTask **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__RobotControlTask
#define soap_read_PointerTo_ns4__RobotControlTask(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__RobotControlTask(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__SetTaskPathInfoResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__SetTaskPathInfoResponse (156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__SetTaskPathInfoResponse(struct soap*, _ns4__SetTaskPathInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__SetTaskPathInfoResponse(struct soap*, const char *, int, _ns4__SetTaskPathInfoResponse *const*, const char *);
SOAP_FMAC3 _ns4__SetTaskPathInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__SetTaskPathInfoResponse(struct soap*, const char*, _ns4__SetTaskPathInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__SetTaskPathInfoResponse(struct soap*, _ns4__SetTaskPathInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__SetTaskPathInfoResponse
#define soap_write_PointerTo_ns4__SetTaskPathInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__SetTaskPathInfoResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__SetTaskPathInfoResponse(soap, data, "ns4:SetTaskPathInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__SetTaskPathInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__SetTaskPathInfoResponse(struct soap*, _ns4__SetTaskPathInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__SetTaskPathInfoResponse
#define soap_read_PointerTo_ns4__SetTaskPathInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__SetTaskPathInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__SetTaskPathInfo
#define SOAP_TYPE_TaskData_PointerTo_ns4__SetTaskPathInfo (155)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__SetTaskPathInfo(struct soap*, _ns4__SetTaskPathInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__SetTaskPathInfo(struct soap*, const char *, int, _ns4__SetTaskPathInfo *const*, const char *);
SOAP_FMAC3 _ns4__SetTaskPathInfo ** SOAP_FMAC4 soap_in_PointerTo_ns4__SetTaskPathInfo(struct soap*, const char*, _ns4__SetTaskPathInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__SetTaskPathInfo(struct soap*, _ns4__SetTaskPathInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__SetTaskPathInfo
#define soap_write_PointerTo_ns4__SetTaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__SetTaskPathInfo(soap, data),0) || TaskData::soap_put_PointerTo_ns4__SetTaskPathInfo(soap, data, "ns4:SetTaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__SetTaskPathInfo ** SOAP_FMAC4 soap_get_PointerTo_ns4__SetTaskPathInfo(struct soap*, _ns4__SetTaskPathInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__SetTaskPathInfo
#define soap_read_PointerTo_ns4__SetTaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__SetTaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__StartTaskByPointListResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__StartTaskByPointListResponse (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__StartTaskByPointListResponse(struct soap*, _ns4__StartTaskByPointListResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__StartTaskByPointListResponse(struct soap*, const char *, int, _ns4__StartTaskByPointListResponse *const*, const char *);
SOAP_FMAC3 _ns4__StartTaskByPointListResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__StartTaskByPointListResponse(struct soap*, const char*, _ns4__StartTaskByPointListResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__StartTaskByPointListResponse(struct soap*, _ns4__StartTaskByPointListResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__StartTaskByPointListResponse
#define soap_write_PointerTo_ns4__StartTaskByPointListResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__StartTaskByPointListResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__StartTaskByPointListResponse(soap, data, "ns4:StartTaskByPointListResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__StartTaskByPointListResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__StartTaskByPointListResponse(struct soap*, _ns4__StartTaskByPointListResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__StartTaskByPointListResponse
#define soap_read_PointerTo_ns4__StartTaskByPointListResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__StartTaskByPointListResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__StartTaskByPointList
#define SOAP_TYPE_TaskData_PointerTo_ns4__StartTaskByPointList (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__StartTaskByPointList(struct soap*, _ns4__StartTaskByPointList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__StartTaskByPointList(struct soap*, const char *, int, _ns4__StartTaskByPointList *const*, const char *);
SOAP_FMAC3 _ns4__StartTaskByPointList ** SOAP_FMAC4 soap_in_PointerTo_ns4__StartTaskByPointList(struct soap*, const char*, _ns4__StartTaskByPointList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__StartTaskByPointList(struct soap*, _ns4__StartTaskByPointList *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__StartTaskByPointList
#define soap_write_PointerTo_ns4__StartTaskByPointList(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__StartTaskByPointList(soap, data),0) || TaskData::soap_put_PointerTo_ns4__StartTaskByPointList(soap, data, "ns4:StartTaskByPointList", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__StartTaskByPointList ** SOAP_FMAC4 soap_get_PointerTo_ns4__StartTaskByPointList(struct soap*, _ns4__StartTaskByPointList **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__StartTaskByPointList
#define soap_read_PointerTo_ns4__StartTaskByPointList(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__StartTaskByPointList(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__StartTaskByPathIdResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__StartTaskByPathIdResponse (148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__StartTaskByPathIdResponse(struct soap*, _ns4__StartTaskByPathIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__StartTaskByPathIdResponse(struct soap*, const char *, int, _ns4__StartTaskByPathIdResponse *const*, const char *);
SOAP_FMAC3 _ns4__StartTaskByPathIdResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__StartTaskByPathIdResponse(struct soap*, const char*, _ns4__StartTaskByPathIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__StartTaskByPathIdResponse(struct soap*, _ns4__StartTaskByPathIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__StartTaskByPathIdResponse
#define soap_write_PointerTo_ns4__StartTaskByPathIdResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__StartTaskByPathIdResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__StartTaskByPathIdResponse(soap, data, "ns4:StartTaskByPathIdResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__StartTaskByPathIdResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__StartTaskByPathIdResponse(struct soap*, _ns4__StartTaskByPathIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__StartTaskByPathIdResponse
#define soap_read_PointerTo_ns4__StartTaskByPathIdResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__StartTaskByPathIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__StartTaskByPathId
#define SOAP_TYPE_TaskData_PointerTo_ns4__StartTaskByPathId (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__StartTaskByPathId(struct soap*, _ns4__StartTaskByPathId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__StartTaskByPathId(struct soap*, const char *, int, _ns4__StartTaskByPathId *const*, const char *);
SOAP_FMAC3 _ns4__StartTaskByPathId ** SOAP_FMAC4 soap_in_PointerTo_ns4__StartTaskByPathId(struct soap*, const char*, _ns4__StartTaskByPathId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__StartTaskByPathId(struct soap*, _ns4__StartTaskByPathId *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__StartTaskByPathId
#define soap_write_PointerTo_ns4__StartTaskByPathId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__StartTaskByPathId(soap, data),0) || TaskData::soap_put_PointerTo_ns4__StartTaskByPathId(soap, data, "ns4:StartTaskByPathId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__StartTaskByPathId ** SOAP_FMAC4 soap_get_PointerTo_ns4__StartTaskByPathId(struct soap*, _ns4__StartTaskByPathId **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__StartTaskByPathId
#define soap_read_PointerTo_ns4__StartTaskByPathId(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__StartTaskByPathId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetTaskPathInfoResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetTaskPathInfoResponse (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetTaskPathInfoResponse(struct soap*, _ns4__GetTaskPathInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetTaskPathInfoResponse(struct soap*, const char *, int, _ns4__GetTaskPathInfoResponse *const*, const char *);
SOAP_FMAC3 _ns4__GetTaskPathInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetTaskPathInfoResponse(struct soap*, const char*, _ns4__GetTaskPathInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetTaskPathInfoResponse(struct soap*, _ns4__GetTaskPathInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetTaskPathInfoResponse
#define soap_write_PointerTo_ns4__GetTaskPathInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetTaskPathInfoResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetTaskPathInfoResponse(soap, data, "ns4:GetTaskPathInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetTaskPathInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetTaskPathInfoResponse(struct soap*, _ns4__GetTaskPathInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetTaskPathInfoResponse
#define soap_read_PointerTo_ns4__GetTaskPathInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetTaskPathInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetTaskPathInfo
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetTaskPathInfo (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetTaskPathInfo(struct soap*, _ns4__GetTaskPathInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetTaskPathInfo(struct soap*, const char *, int, _ns4__GetTaskPathInfo *const*, const char *);
SOAP_FMAC3 _ns4__GetTaskPathInfo ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetTaskPathInfo(struct soap*, const char*, _ns4__GetTaskPathInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetTaskPathInfo(struct soap*, _ns4__GetTaskPathInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetTaskPathInfo
#define soap_write_PointerTo_ns4__GetTaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetTaskPathInfo(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetTaskPathInfo(soap, data, "ns4:GetTaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetTaskPathInfo ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetTaskPathInfo(struct soap*, _ns4__GetTaskPathInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetTaskPathInfo
#define soap_read_PointerTo_ns4__GetTaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetTaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetPatrolPointInfoResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetPatrolPointInfoResponse (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetPatrolPointInfoResponse(struct soap*, _ns4__GetPatrolPointInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetPatrolPointInfoResponse(struct soap*, const char *, int, _ns4__GetPatrolPointInfoResponse *const*, const char *);
SOAP_FMAC3 _ns4__GetPatrolPointInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetPatrolPointInfoResponse(struct soap*, const char*, _ns4__GetPatrolPointInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetPatrolPointInfoResponse(struct soap*, _ns4__GetPatrolPointInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetPatrolPointInfoResponse
#define soap_write_PointerTo_ns4__GetPatrolPointInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetPatrolPointInfoResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetPatrolPointInfoResponse(soap, data, "ns4:GetPatrolPointInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetPatrolPointInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetPatrolPointInfoResponse(struct soap*, _ns4__GetPatrolPointInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetPatrolPointInfoResponse
#define soap_read_PointerTo_ns4__GetPatrolPointInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetPatrolPointInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetPatrolPointInfo
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetPatrolPointInfo (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetPatrolPointInfo(struct soap*, _ns4__GetPatrolPointInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetPatrolPointInfo(struct soap*, const char *, int, _ns4__GetPatrolPointInfo *const*, const char *);
SOAP_FMAC3 _ns4__GetPatrolPointInfo ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetPatrolPointInfo(struct soap*, const char*, _ns4__GetPatrolPointInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetPatrolPointInfo(struct soap*, _ns4__GetPatrolPointInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetPatrolPointInfo
#define soap_write_PointerTo_ns4__GetPatrolPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetPatrolPointInfo(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetPatrolPointInfo(soap, data, "ns4:GetPatrolPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetPatrolPointInfo ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetPatrolPointInfo(struct soap*, _ns4__GetPatrolPointInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetPatrolPointInfo
#define soap_read_PointerTo_ns4__GetPatrolPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetPatrolPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetDockPointInfoResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetDockPointInfoResponse (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetDockPointInfoResponse(struct soap*, _ns4__GetDockPointInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetDockPointInfoResponse(struct soap*, const char *, int, _ns4__GetDockPointInfoResponse *const*, const char *);
SOAP_FMAC3 _ns4__GetDockPointInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetDockPointInfoResponse(struct soap*, const char*, _ns4__GetDockPointInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetDockPointInfoResponse(struct soap*, _ns4__GetDockPointInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetDockPointInfoResponse
#define soap_write_PointerTo_ns4__GetDockPointInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetDockPointInfoResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetDockPointInfoResponse(soap, data, "ns4:GetDockPointInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetDockPointInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetDockPointInfoResponse(struct soap*, _ns4__GetDockPointInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetDockPointInfoResponse
#define soap_read_PointerTo_ns4__GetDockPointInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetDockPointInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetDockPointInfo
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetDockPointInfo (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetDockPointInfo(struct soap*, _ns4__GetDockPointInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetDockPointInfo(struct soap*, const char *, int, _ns4__GetDockPointInfo *const*, const char *);
SOAP_FMAC3 _ns4__GetDockPointInfo ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetDockPointInfo(struct soap*, const char*, _ns4__GetDockPointInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetDockPointInfo(struct soap*, _ns4__GetDockPointInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetDockPointInfo
#define soap_write_PointerTo_ns4__GetDockPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetDockPointInfo(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetDockPointInfo(soap, data, "ns4:GetDockPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetDockPointInfo ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetDockPointInfo(struct soap*, _ns4__GetDockPointInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetDockPointInfo
#define soap_read_PointerTo_ns4__GetDockPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetDockPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetMapEdgeInfoResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetMapEdgeInfoResponse (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetMapEdgeInfoResponse(struct soap*, _ns4__GetMapEdgeInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetMapEdgeInfoResponse(struct soap*, const char *, int, _ns4__GetMapEdgeInfoResponse *const*, const char *);
SOAP_FMAC3 _ns4__GetMapEdgeInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetMapEdgeInfoResponse(struct soap*, const char*, _ns4__GetMapEdgeInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetMapEdgeInfoResponse(struct soap*, _ns4__GetMapEdgeInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetMapEdgeInfoResponse
#define soap_write_PointerTo_ns4__GetMapEdgeInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetMapEdgeInfoResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetMapEdgeInfoResponse(soap, data, "ns4:GetMapEdgeInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetMapEdgeInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetMapEdgeInfoResponse(struct soap*, _ns4__GetMapEdgeInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetMapEdgeInfoResponse
#define soap_read_PointerTo_ns4__GetMapEdgeInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetMapEdgeInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetMapEdgeInfo
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetMapEdgeInfo (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetMapEdgeInfo(struct soap*, _ns4__GetMapEdgeInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetMapEdgeInfo(struct soap*, const char *, int, _ns4__GetMapEdgeInfo *const*, const char *);
SOAP_FMAC3 _ns4__GetMapEdgeInfo ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetMapEdgeInfo(struct soap*, const char*, _ns4__GetMapEdgeInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetMapEdgeInfo(struct soap*, _ns4__GetMapEdgeInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetMapEdgeInfo
#define soap_write_PointerTo_ns4__GetMapEdgeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetMapEdgeInfo(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetMapEdgeInfo(soap, data, "ns4:GetMapEdgeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetMapEdgeInfo ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetMapEdgeInfo(struct soap*, _ns4__GetMapEdgeInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetMapEdgeInfo
#define soap_read_PointerTo_ns4__GetMapEdgeInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetMapEdgeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetPatrolAreaInfoResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetPatrolAreaInfoResponse (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetPatrolAreaInfoResponse(struct soap*, _ns4__GetPatrolAreaInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetPatrolAreaInfoResponse(struct soap*, const char *, int, _ns4__GetPatrolAreaInfoResponse *const*, const char *);
SOAP_FMAC3 _ns4__GetPatrolAreaInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetPatrolAreaInfoResponse(struct soap*, const char*, _ns4__GetPatrolAreaInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetPatrolAreaInfoResponse(struct soap*, _ns4__GetPatrolAreaInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetPatrolAreaInfoResponse
#define soap_write_PointerTo_ns4__GetPatrolAreaInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetPatrolAreaInfoResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetPatrolAreaInfoResponse(soap, data, "ns4:GetPatrolAreaInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetPatrolAreaInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetPatrolAreaInfoResponse(struct soap*, _ns4__GetPatrolAreaInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetPatrolAreaInfoResponse
#define soap_read_PointerTo_ns4__GetPatrolAreaInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetPatrolAreaInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetPatrolAreaInfo
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetPatrolAreaInfo (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetPatrolAreaInfo(struct soap*, _ns4__GetPatrolAreaInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetPatrolAreaInfo(struct soap*, const char *, int, _ns4__GetPatrolAreaInfo *const*, const char *);
SOAP_FMAC3 _ns4__GetPatrolAreaInfo ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetPatrolAreaInfo(struct soap*, const char*, _ns4__GetPatrolAreaInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetPatrolAreaInfo(struct soap*, _ns4__GetPatrolAreaInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetPatrolAreaInfo
#define soap_write_PointerTo_ns4__GetPatrolAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetPatrolAreaInfo(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetPatrolAreaInfo(soap, data, "ns4:GetPatrolAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetPatrolAreaInfo ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetPatrolAreaInfo(struct soap*, _ns4__GetPatrolAreaInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetPatrolAreaInfo
#define soap_read_PointerTo_ns4__GetPatrolAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetPatrolAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetMapAreaInfoResponse
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetMapAreaInfoResponse (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetMapAreaInfoResponse(struct soap*, _ns4__GetMapAreaInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetMapAreaInfoResponse(struct soap*, const char *, int, _ns4__GetMapAreaInfoResponse *const*, const char *);
SOAP_FMAC3 _ns4__GetMapAreaInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetMapAreaInfoResponse(struct soap*, const char*, _ns4__GetMapAreaInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetMapAreaInfoResponse(struct soap*, _ns4__GetMapAreaInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetMapAreaInfoResponse
#define soap_write_PointerTo_ns4__GetMapAreaInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetMapAreaInfoResponse(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetMapAreaInfoResponse(soap, data, "ns4:GetMapAreaInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetMapAreaInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetMapAreaInfoResponse(struct soap*, _ns4__GetMapAreaInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetMapAreaInfoResponse
#define soap_read_PointerTo_ns4__GetMapAreaInfoResponse(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetMapAreaInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTo_ns4__GetMapAreaInfo
#define SOAP_TYPE_TaskData_PointerTo_ns4__GetMapAreaInfo (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns4__GetMapAreaInfo(struct soap*, _ns4__GetMapAreaInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns4__GetMapAreaInfo(struct soap*, const char *, int, _ns4__GetMapAreaInfo *const*, const char *);
SOAP_FMAC3 _ns4__GetMapAreaInfo ** SOAP_FMAC4 soap_in_PointerTo_ns4__GetMapAreaInfo(struct soap*, const char*, _ns4__GetMapAreaInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns4__GetMapAreaInfo(struct soap*, _ns4__GetMapAreaInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns4__GetMapAreaInfo
#define soap_write_PointerTo_ns4__GetMapAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTo_ns4__GetMapAreaInfo(soap, data),0) || TaskData::soap_put_PointerTo_ns4__GetMapAreaInfo(soap, data, "ns4:GetMapAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns4__GetMapAreaInfo ** SOAP_FMAC4 soap_get_PointerTo_ns4__GetMapAreaInfo(struct soap*, _ns4__GetMapAreaInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns4__GetMapAreaInfo
#define soap_read_PointerTo_ns4__GetMapAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTo_ns4__GetMapAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__TaskExcuteData
#define SOAP_TYPE_TaskData_PointerTons4__TaskExcuteData (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__TaskExcuteData(struct soap*, ns4__TaskExcuteData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__TaskExcuteData(struct soap*, const char *, int, ns4__TaskExcuteData *const*, const char *);
SOAP_FMAC3 ns4__TaskExcuteData ** SOAP_FMAC4 soap_in_PointerTons4__TaskExcuteData(struct soap*, const char*, ns4__TaskExcuteData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__TaskExcuteData(struct soap*, ns4__TaskExcuteData *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__TaskExcuteData
#define soap_write_PointerTons4__TaskExcuteData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__TaskExcuteData(soap, data),0) || TaskData::soap_put_PointerTons4__TaskExcuteData(soap, data, "ns4:TaskExcuteData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskExcuteData ** SOAP_FMAC4 soap_get_PointerTons4__TaskExcuteData(struct soap*, ns4__TaskExcuteData **, const char*, const char*);

#ifndef soap_read_PointerTons4__TaskExcuteData
#define soap_read_PointerTons4__TaskExcuteData(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__TaskExcuteData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__TaskPathInfos
#define SOAP_TYPE_TaskData_PointerTons4__TaskPathInfos (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__TaskPathInfos(struct soap*, ns4__TaskPathInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__TaskPathInfos(struct soap*, const char *, int, ns4__TaskPathInfos *const*, const char *);
SOAP_FMAC3 ns4__TaskPathInfos ** SOAP_FMAC4 soap_in_PointerTons4__TaskPathInfos(struct soap*, const char*, ns4__TaskPathInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__TaskPathInfos(struct soap*, ns4__TaskPathInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__TaskPathInfos
#define soap_write_PointerTons4__TaskPathInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__TaskPathInfos(soap, data),0) || TaskData::soap_put_PointerTons4__TaskPathInfos(soap, data, "ns4:TaskPathInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskPathInfos ** SOAP_FMAC4 soap_get_PointerTons4__TaskPathInfos(struct soap*, ns4__TaskPathInfos **, const char*, const char*);

#ifndef soap_read_PointerTons4__TaskPathInfos
#define soap_read_PointerTons4__TaskPathInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__TaskPathInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__PatrolPointInfos
#define SOAP_TYPE_TaskData_PointerTons4__PatrolPointInfos (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__PatrolPointInfos(struct soap*, ns4__PatrolPointInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__PatrolPointInfos(struct soap*, const char *, int, ns4__PatrolPointInfos *const*, const char *);
SOAP_FMAC3 ns4__PatrolPointInfos ** SOAP_FMAC4 soap_in_PointerTons4__PatrolPointInfos(struct soap*, const char*, ns4__PatrolPointInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__PatrolPointInfos(struct soap*, ns4__PatrolPointInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__PatrolPointInfos
#define soap_write_PointerTons4__PatrolPointInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__PatrolPointInfos(soap, data),0) || TaskData::soap_put_PointerTons4__PatrolPointInfos(soap, data, "ns4:PatrolPointInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__PatrolPointInfos ** SOAP_FMAC4 soap_get_PointerTons4__PatrolPointInfos(struct soap*, ns4__PatrolPointInfos **, const char*, const char*);

#ifndef soap_read_PointerTons4__PatrolPointInfos
#define soap_read_PointerTons4__PatrolPointInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__PatrolPointInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__DockPointInfos
#define SOAP_TYPE_TaskData_PointerTons4__DockPointInfos (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__DockPointInfos(struct soap*, ns4__DockPointInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__DockPointInfos(struct soap*, const char *, int, ns4__DockPointInfos *const*, const char *);
SOAP_FMAC3 ns4__DockPointInfos ** SOAP_FMAC4 soap_in_PointerTons4__DockPointInfos(struct soap*, const char*, ns4__DockPointInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__DockPointInfos(struct soap*, ns4__DockPointInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__DockPointInfos
#define soap_write_PointerTons4__DockPointInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__DockPointInfos(soap, data),0) || TaskData::soap_put_PointerTons4__DockPointInfos(soap, data, "ns4:DockPointInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__DockPointInfos ** SOAP_FMAC4 soap_get_PointerTons4__DockPointInfos(struct soap*, ns4__DockPointInfos **, const char*, const char*);

#ifndef soap_read_PointerTons4__DockPointInfos
#define soap_read_PointerTons4__DockPointInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__DockPointInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__MapEdgeInfos
#define SOAP_TYPE_TaskData_PointerTons4__MapEdgeInfos (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__MapEdgeInfos(struct soap*, ns4__MapEdgeInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__MapEdgeInfos(struct soap*, const char *, int, ns4__MapEdgeInfos *const*, const char *);
SOAP_FMAC3 ns4__MapEdgeInfos ** SOAP_FMAC4 soap_in_PointerTons4__MapEdgeInfos(struct soap*, const char*, ns4__MapEdgeInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__MapEdgeInfos(struct soap*, ns4__MapEdgeInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__MapEdgeInfos
#define soap_write_PointerTons4__MapEdgeInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__MapEdgeInfos(soap, data),0) || TaskData::soap_put_PointerTons4__MapEdgeInfos(soap, data, "ns4:MapEdgeInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__MapEdgeInfos ** SOAP_FMAC4 soap_get_PointerTons4__MapEdgeInfos(struct soap*, ns4__MapEdgeInfos **, const char*, const char*);

#ifndef soap_read_PointerTons4__MapEdgeInfos
#define soap_read_PointerTons4__MapEdgeInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__MapEdgeInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__PatrolAreaInfos
#define SOAP_TYPE_TaskData_PointerTons4__PatrolAreaInfos (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__PatrolAreaInfos(struct soap*, ns4__PatrolAreaInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__PatrolAreaInfos(struct soap*, const char *, int, ns4__PatrolAreaInfos *const*, const char *);
SOAP_FMAC3 ns4__PatrolAreaInfos ** SOAP_FMAC4 soap_in_PointerTons4__PatrolAreaInfos(struct soap*, const char*, ns4__PatrolAreaInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__PatrolAreaInfos(struct soap*, ns4__PatrolAreaInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__PatrolAreaInfos
#define soap_write_PointerTons4__PatrolAreaInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__PatrolAreaInfos(soap, data),0) || TaskData::soap_put_PointerTons4__PatrolAreaInfos(soap, data, "ns4:PatrolAreaInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__PatrolAreaInfos ** SOAP_FMAC4 soap_get_PointerTons4__PatrolAreaInfos(struct soap*, ns4__PatrolAreaInfos **, const char*, const char*);

#ifndef soap_read_PointerTons4__PatrolAreaInfos
#define soap_read_PointerTons4__PatrolAreaInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__PatrolAreaInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__MapAreaInfos
#define SOAP_TYPE_TaskData_PointerTons4__MapAreaInfos (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__MapAreaInfos(struct soap*, ns4__MapAreaInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__MapAreaInfos(struct soap*, const char *, int, ns4__MapAreaInfos *const*, const char *);
SOAP_FMAC3 ns4__MapAreaInfos ** SOAP_FMAC4 soap_in_PointerTons4__MapAreaInfos(struct soap*, const char*, ns4__MapAreaInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__MapAreaInfos(struct soap*, ns4__MapAreaInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__MapAreaInfos
#define soap_write_PointerTons4__MapAreaInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__MapAreaInfos(soap, data),0) || TaskData::soap_put_PointerTons4__MapAreaInfos(soap, data, "ns4:MapAreaInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__MapAreaInfos ** SOAP_FMAC4 soap_get_PointerTons4__MapAreaInfos(struct soap*, ns4__MapAreaInfos **, const char*, const char*);

#ifndef soap_read_PointerTons4__MapAreaInfos
#define soap_read_PointerTons4__MapAreaInfos(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__MapAreaInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__TaskExcuteInfo
#define SOAP_TYPE_TaskData_PointerTons4__TaskExcuteInfo (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__TaskExcuteInfo(struct soap*, ns4__TaskExcuteInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__TaskExcuteInfo(struct soap*, const char *, int, ns4__TaskExcuteInfo *const*, const char *);
SOAP_FMAC3 ns4__TaskExcuteInfo ** SOAP_FMAC4 soap_in_PointerTons4__TaskExcuteInfo(struct soap*, const char*, ns4__TaskExcuteInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__TaskExcuteInfo(struct soap*, ns4__TaskExcuteInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__TaskExcuteInfo
#define soap_write_PointerTons4__TaskExcuteInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__TaskExcuteInfo(soap, data),0) || TaskData::soap_put_PointerTons4__TaskExcuteInfo(soap, data, "ns4:TaskExcuteInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskExcuteInfo ** SOAP_FMAC4 soap_get_PointerTons4__TaskExcuteInfo(struct soap*, ns4__TaskExcuteInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__TaskExcuteInfo
#define soap_read_PointerTons4__TaskExcuteInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__TaskExcuteInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__TaskFinishInfo
#define SOAP_TYPE_TaskData_PointerTons4__TaskFinishInfo (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__TaskFinishInfo(struct soap*, ns4__TaskFinishInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__TaskFinishInfo(struct soap*, const char *, int, ns4__TaskFinishInfo *const*, const char *);
SOAP_FMAC3 ns4__TaskFinishInfo ** SOAP_FMAC4 soap_in_PointerTons4__TaskFinishInfo(struct soap*, const char*, ns4__TaskFinishInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__TaskFinishInfo(struct soap*, ns4__TaskFinishInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__TaskFinishInfo
#define soap_write_PointerTons4__TaskFinishInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__TaskFinishInfo(soap, data),0) || TaskData::soap_put_PointerTons4__TaskFinishInfo(soap, data, "ns4:TaskFinishInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskFinishInfo ** SOAP_FMAC4 soap_get_PointerTons4__TaskFinishInfo(struct soap*, ns4__TaskFinishInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__TaskFinishInfo
#define soap_read_PointerTons4__TaskFinishInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__TaskFinishInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__TaskPathInfo
#define SOAP_TYPE_TaskData_PointerTons4__TaskPathInfo (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__TaskPathInfo(struct soap*, ns4__TaskPathInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__TaskPathInfo(struct soap*, const char *, int, ns4__TaskPathInfo *const*, const char *);
SOAP_FMAC3 ns4__TaskPathInfo ** SOAP_FMAC4 soap_in_PointerTons4__TaskPathInfo(struct soap*, const char*, ns4__TaskPathInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__TaskPathInfo(struct soap*, ns4__TaskPathInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__TaskPathInfo
#define soap_write_PointerTons4__TaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__TaskPathInfo(soap, data),0) || TaskData::soap_put_PointerTons4__TaskPathInfo(soap, data, "ns4:TaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__TaskPathInfo ** SOAP_FMAC4 soap_get_PointerTons4__TaskPathInfo(struct soap*, ns4__TaskPathInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__TaskPathInfo
#define soap_read_PointerTons4__TaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__TaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__PatrolPointInfo
#define SOAP_TYPE_TaskData_PointerTons4__PatrolPointInfo (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__PatrolPointInfo(struct soap*, ns4__PatrolPointInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__PatrolPointInfo(struct soap*, const char *, int, ns4__PatrolPointInfo *const*, const char *);
SOAP_FMAC3 ns4__PatrolPointInfo ** SOAP_FMAC4 soap_in_PointerTons4__PatrolPointInfo(struct soap*, const char*, ns4__PatrolPointInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__PatrolPointInfo(struct soap*, ns4__PatrolPointInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__PatrolPointInfo
#define soap_write_PointerTons4__PatrolPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__PatrolPointInfo(soap, data),0) || TaskData::soap_put_PointerTons4__PatrolPointInfo(soap, data, "ns4:PatrolPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__PatrolPointInfo ** SOAP_FMAC4 soap_get_PointerTons4__PatrolPointInfo(struct soap*, ns4__PatrolPointInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__PatrolPointInfo
#define soap_read_PointerTons4__PatrolPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__PatrolPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__DockPointInfo
#define SOAP_TYPE_TaskData_PointerTons4__DockPointInfo (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__DockPointInfo(struct soap*, ns4__DockPointInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__DockPointInfo(struct soap*, const char *, int, ns4__DockPointInfo *const*, const char *);
SOAP_FMAC3 ns4__DockPointInfo ** SOAP_FMAC4 soap_in_PointerTons4__DockPointInfo(struct soap*, const char*, ns4__DockPointInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__DockPointInfo(struct soap*, ns4__DockPointInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__DockPointInfo
#define soap_write_PointerTons4__DockPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__DockPointInfo(soap, data),0) || TaskData::soap_put_PointerTons4__DockPointInfo(soap, data, "ns4:DockPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__DockPointInfo ** SOAP_FMAC4 soap_get_PointerTons4__DockPointInfo(struct soap*, ns4__DockPointInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__DockPointInfo
#define soap_read_PointerTons4__DockPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__DockPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__MapEdgeInfo
#define SOAP_TYPE_TaskData_PointerTons4__MapEdgeInfo (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__MapEdgeInfo(struct soap*, ns4__MapEdgeInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__MapEdgeInfo(struct soap*, const char *, int, ns4__MapEdgeInfo *const*, const char *);
SOAP_FMAC3 ns4__MapEdgeInfo ** SOAP_FMAC4 soap_in_PointerTons4__MapEdgeInfo(struct soap*, const char*, ns4__MapEdgeInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__MapEdgeInfo(struct soap*, ns4__MapEdgeInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__MapEdgeInfo
#define soap_write_PointerTons4__MapEdgeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__MapEdgeInfo(soap, data),0) || TaskData::soap_put_PointerTons4__MapEdgeInfo(soap, data, "ns4:MapEdgeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__MapEdgeInfo ** SOAP_FMAC4 soap_get_PointerTons4__MapEdgeInfo(struct soap*, ns4__MapEdgeInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__MapEdgeInfo
#define soap_read_PointerTons4__MapEdgeInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__MapEdgeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__PatrolAreaInfo
#define SOAP_TYPE_TaskData_PointerTons4__PatrolAreaInfo (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__PatrolAreaInfo(struct soap*, ns4__PatrolAreaInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__PatrolAreaInfo(struct soap*, const char *, int, ns4__PatrolAreaInfo *const*, const char *);
SOAP_FMAC3 ns4__PatrolAreaInfo ** SOAP_FMAC4 soap_in_PointerTons4__PatrolAreaInfo(struct soap*, const char*, ns4__PatrolAreaInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__PatrolAreaInfo(struct soap*, ns4__PatrolAreaInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__PatrolAreaInfo
#define soap_write_PointerTons4__PatrolAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__PatrolAreaInfo(soap, data),0) || TaskData::soap_put_PointerTons4__PatrolAreaInfo(soap, data, "ns4:PatrolAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__PatrolAreaInfo ** SOAP_FMAC4 soap_get_PointerTons4__PatrolAreaInfo(struct soap*, ns4__PatrolAreaInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__PatrolAreaInfo
#define soap_read_PointerTons4__PatrolAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__PatrolAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__MapAreaInfo
#define SOAP_TYPE_TaskData_PointerTons4__MapAreaInfo (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__MapAreaInfo(struct soap*, ns4__MapAreaInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__MapAreaInfo(struct soap*, const char *, int, ns4__MapAreaInfo *const*, const char *);
SOAP_FMAC3 ns4__MapAreaInfo ** SOAP_FMAC4 soap_in_PointerTons4__MapAreaInfo(struct soap*, const char*, ns4__MapAreaInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__MapAreaInfo(struct soap*, ns4__MapAreaInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__MapAreaInfo
#define soap_write_PointerTons4__MapAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__MapAreaInfo(soap, data),0) || TaskData::soap_put_PointerTons4__MapAreaInfo(soap, data, "ns4:MapAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__MapAreaInfo ** SOAP_FMAC4 soap_get_PointerTons4__MapAreaInfo(struct soap*, ns4__MapAreaInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__MapAreaInfo
#define soap_read_PointerTons4__MapAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__MapAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__RobotAlarmInfo
#define SOAP_TYPE_TaskData_PointerTons4__RobotAlarmInfo (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__RobotAlarmInfo(struct soap*, ns4__RobotAlarmInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__RobotAlarmInfo(struct soap*, const char *, int, ns4__RobotAlarmInfo *const*, const char *);
SOAP_FMAC3 ns4__RobotAlarmInfo ** SOAP_FMAC4 soap_in_PointerTons4__RobotAlarmInfo(struct soap*, const char*, ns4__RobotAlarmInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__RobotAlarmInfo(struct soap*, ns4__RobotAlarmInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__RobotAlarmInfo
#define soap_write_PointerTons4__RobotAlarmInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__RobotAlarmInfo(soap, data),0) || TaskData::soap_put_PointerTons4__RobotAlarmInfo(soap, data, "ns4:RobotAlarmInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotAlarmInfo ** SOAP_FMAC4 soap_get_PointerTons4__RobotAlarmInfo(struct soap*, ns4__RobotAlarmInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__RobotAlarmInfo
#define soap_read_PointerTons4__RobotAlarmInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__RobotAlarmInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__RobotGasInfo
#define SOAP_TYPE_TaskData_PointerTons4__RobotGasInfo (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__RobotGasInfo(struct soap*, ns4__RobotGasInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__RobotGasInfo(struct soap*, const char *, int, ns4__RobotGasInfo *const*, const char *);
SOAP_FMAC3 ns4__RobotGasInfo ** SOAP_FMAC4 soap_in_PointerTons4__RobotGasInfo(struct soap*, const char*, ns4__RobotGasInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__RobotGasInfo(struct soap*, ns4__RobotGasInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__RobotGasInfo
#define soap_write_PointerTons4__RobotGasInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__RobotGasInfo(soap, data),0) || TaskData::soap_put_PointerTons4__RobotGasInfo(soap, data, "ns4:RobotGasInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotGasInfo ** SOAP_FMAC4 soap_get_PointerTons4__RobotGasInfo(struct soap*, ns4__RobotGasInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__RobotGasInfo
#define soap_read_PointerTons4__RobotGasInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__RobotGasInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__RobotMileageInfo
#define SOAP_TYPE_TaskData_PointerTons4__RobotMileageInfo (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__RobotMileageInfo(struct soap*, ns4__RobotMileageInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__RobotMileageInfo(struct soap*, const char *, int, ns4__RobotMileageInfo *const*, const char *);
SOAP_FMAC3 ns4__RobotMileageInfo ** SOAP_FMAC4 soap_in_PointerTons4__RobotMileageInfo(struct soap*, const char*, ns4__RobotMileageInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__RobotMileageInfo(struct soap*, ns4__RobotMileageInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__RobotMileageInfo
#define soap_write_PointerTons4__RobotMileageInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__RobotMileageInfo(soap, data),0) || TaskData::soap_put_PointerTons4__RobotMileageInfo(soap, data, "ns4:RobotMileageInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotMileageInfo ** SOAP_FMAC4 soap_get_PointerTons4__RobotMileageInfo(struct soap*, ns4__RobotMileageInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__RobotMileageInfo
#define soap_read_PointerTons4__RobotMileageInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__RobotMileageInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__RobotYunTaiInfo
#define SOAP_TYPE_TaskData_PointerTons4__RobotYunTaiInfo (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__RobotYunTaiInfo(struct soap*, ns4__RobotYunTaiInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__RobotYunTaiInfo(struct soap*, const char *, int, ns4__RobotYunTaiInfo *const*, const char *);
SOAP_FMAC3 ns4__RobotYunTaiInfo ** SOAP_FMAC4 soap_in_PointerTons4__RobotYunTaiInfo(struct soap*, const char*, ns4__RobotYunTaiInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__RobotYunTaiInfo(struct soap*, ns4__RobotYunTaiInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__RobotYunTaiInfo
#define soap_write_PointerTons4__RobotYunTaiInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__RobotYunTaiInfo(soap, data),0) || TaskData::soap_put_PointerTons4__RobotYunTaiInfo(soap, data, "ns4:RobotYunTaiInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotYunTaiInfo ** SOAP_FMAC4 soap_get_PointerTons4__RobotYunTaiInfo(struct soap*, ns4__RobotYunTaiInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__RobotYunTaiInfo
#define soap_read_PointerTons4__RobotYunTaiInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__RobotYunTaiInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__RobotPosInfo
#define SOAP_TYPE_TaskData_PointerTons4__RobotPosInfo (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__RobotPosInfo(struct soap*, ns4__RobotPosInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__RobotPosInfo(struct soap*, const char *, int, ns4__RobotPosInfo *const*, const char *);
SOAP_FMAC3 ns4__RobotPosInfo ** SOAP_FMAC4 soap_in_PointerTons4__RobotPosInfo(struct soap*, const char*, ns4__RobotPosInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__RobotPosInfo(struct soap*, ns4__RobotPosInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__RobotPosInfo
#define soap_write_PointerTons4__RobotPosInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__RobotPosInfo(soap, data),0) || TaskData::soap_put_PointerTons4__RobotPosInfo(soap, data, "ns4:RobotPosInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotPosInfo ** SOAP_FMAC4 soap_get_PointerTons4__RobotPosInfo(struct soap*, ns4__RobotPosInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__RobotPosInfo
#define soap_read_PointerTons4__RobotPosInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__RobotPosInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__RobotTaskState
#define SOAP_TYPE_TaskData_PointerTons4__RobotTaskState (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__RobotTaskState(struct soap*, ns4__RobotTaskState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__RobotTaskState(struct soap*, const char *, int, ns4__RobotTaskState *const*, const char *);
SOAP_FMAC3 ns4__RobotTaskState ** SOAP_FMAC4 soap_in_PointerTons4__RobotTaskState(struct soap*, const char*, ns4__RobotTaskState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__RobotTaskState(struct soap*, ns4__RobotTaskState *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__RobotTaskState
#define soap_write_PointerTons4__RobotTaskState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__RobotTaskState(soap, data),0) || TaskData::soap_put_PointerTons4__RobotTaskState(soap, data, "ns4:RobotTaskState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotTaskState ** SOAP_FMAC4 soap_get_PointerTons4__RobotTaskState(struct soap*, ns4__RobotTaskState **, const char*, const char*);

#ifndef soap_read_PointerTons4__RobotTaskState
#define soap_read_PointerTons4__RobotTaskState(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__RobotTaskState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__SpeedInfo
#define SOAP_TYPE_TaskData_PointerTons4__SpeedInfo (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__SpeedInfo(struct soap*, ns4__SpeedInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__SpeedInfo(struct soap*, const char *, int, ns4__SpeedInfo *const*, const char *);
SOAP_FMAC3 ns4__SpeedInfo ** SOAP_FMAC4 soap_in_PointerTons4__SpeedInfo(struct soap*, const char*, ns4__SpeedInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__SpeedInfo(struct soap*, ns4__SpeedInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__SpeedInfo
#define soap_write_PointerTons4__SpeedInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__SpeedInfo(soap, data),0) || TaskData::soap_put_PointerTons4__SpeedInfo(soap, data, "ns4:SpeedInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__SpeedInfo ** SOAP_FMAC4 soap_get_PointerTons4__SpeedInfo(struct soap*, ns4__SpeedInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__SpeedInfo
#define soap_read_PointerTons4__SpeedInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__SpeedInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__BatteryInfo
#define SOAP_TYPE_TaskData_PointerTons4__BatteryInfo (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__BatteryInfo(struct soap*, ns4__BatteryInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__BatteryInfo(struct soap*, const char *, int, ns4__BatteryInfo *const*, const char *);
SOAP_FMAC3 ns4__BatteryInfo ** SOAP_FMAC4 soap_in_PointerTons4__BatteryInfo(struct soap*, const char*, ns4__BatteryInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__BatteryInfo(struct soap*, ns4__BatteryInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__BatteryInfo
#define soap_write_PointerTons4__BatteryInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__BatteryInfo(soap, data),0) || TaskData::soap_put_PointerTons4__BatteryInfo(soap, data, "ns4:BatteryInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__BatteryInfo ** SOAP_FMAC4 soap_get_PointerTons4__BatteryInfo(struct soap*, ns4__BatteryInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__BatteryInfo
#define soap_read_PointerTons4__BatteryInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__BatteryInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__RobotInfo
#define SOAP_TYPE_TaskData_PointerTons4__RobotInfo (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__RobotInfo(struct soap*, ns4__RobotInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__RobotInfo(struct soap*, const char *, int, ns4__RobotInfo *const*, const char *);
SOAP_FMAC3 ns4__RobotInfo ** SOAP_FMAC4 soap_in_PointerTons4__RobotInfo(struct soap*, const char*, ns4__RobotInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__RobotInfo(struct soap*, ns4__RobotInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__RobotInfo
#define soap_write_PointerTons4__RobotInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__RobotInfo(soap, data),0) || TaskData::soap_put_PointerTons4__RobotInfo(soap, data, "ns4:RobotInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__RobotInfo ** SOAP_FMAC4 soap_get_PointerTons4__RobotInfo(struct soap*, ns4__RobotInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__RobotInfo
#define soap_read_PointerTons4__RobotInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__RobotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_PointerTons4__ConnectInfo
#define SOAP_TYPE_TaskData_PointerTons4__ConnectInfo (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ConnectInfo(struct soap*, ns4__ConnectInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ConnectInfo(struct soap*, const char *, int, ns4__ConnectInfo *const*, const char *);
SOAP_FMAC3 ns4__ConnectInfo ** SOAP_FMAC4 soap_in_PointerTons4__ConnectInfo(struct soap*, const char*, ns4__ConnectInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ConnectInfo(struct soap*, ns4__ConnectInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__ConnectInfo
#define soap_write_PointerTons4__ConnectInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_PointerTons4__ConnectInfo(soap, data),0) || TaskData::soap_put_PointerTons4__ConnectInfo(soap, data, "ns4:ConnectInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__ConnectInfo ** SOAP_FMAC4 soap_get_PointerTons4__ConnectInfo(struct soap*, ns4__ConnectInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__ConnectInfo
#define soap_read_PointerTons4__ConnectInfo(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_PointerTons4__ConnectInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData__QName
#define SOAP_TYPE_TaskData__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize__QName(soap, data),0) || TaskData::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_string
#define SOAP_TYPE_TaskData_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskData::soap_serialize_string(soap, data),0) || TaskData::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !TaskData::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__TaskExcuteInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__TaskExcuteInfo (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__TaskExcuteInfo(struct soap*, std::vector<ns4__TaskExcuteInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__TaskExcuteInfo(struct soap*, const std::vector<ns4__TaskExcuteInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__TaskExcuteInfo(struct soap*, const char*, int, const std::vector<ns4__TaskExcuteInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__TaskExcuteInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__TaskExcuteInfo(struct soap*, const char*, std::vector<ns4__TaskExcuteInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__TaskExcuteInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__TaskExcuteInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__TaskExcuteInfo * > * soap_new_std__vectorTemplateOfPointerTons4__TaskExcuteInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__TaskExcuteInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__TaskExcuteInfo(struct soap *soap, std::vector<ns4__TaskExcuteInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__TaskExcuteInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__TaskFinishInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__TaskFinishInfo (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__TaskFinishInfo(struct soap*, std::vector<ns4__TaskFinishInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__TaskFinishInfo(struct soap*, const std::vector<ns4__TaskFinishInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__TaskFinishInfo(struct soap*, const char*, int, const std::vector<ns4__TaskFinishInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__TaskFinishInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__TaskFinishInfo(struct soap*, const char*, std::vector<ns4__TaskFinishInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__TaskFinishInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__TaskFinishInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__TaskFinishInfo * > * soap_new_std__vectorTemplateOfPointerTons4__TaskFinishInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__TaskFinishInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__TaskFinishInfo(struct soap *soap, std::vector<ns4__TaskFinishInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__TaskFinishInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__TaskPathInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__TaskPathInfo (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__TaskPathInfo(struct soap*, std::vector<ns4__TaskPathInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__TaskPathInfo(struct soap*, const std::vector<ns4__TaskPathInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__TaskPathInfo(struct soap*, const char*, int, const std::vector<ns4__TaskPathInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__TaskPathInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__TaskPathInfo(struct soap*, const char*, std::vector<ns4__TaskPathInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__TaskPathInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__TaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__TaskPathInfo * > * soap_new_std__vectorTemplateOfPointerTons4__TaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__TaskPathInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__TaskPathInfo(struct soap *soap, std::vector<ns4__TaskPathInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__TaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__PatrolPointInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__PatrolPointInfo (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__PatrolPointInfo(struct soap*, std::vector<ns4__PatrolPointInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__PatrolPointInfo(struct soap*, const std::vector<ns4__PatrolPointInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__PatrolPointInfo(struct soap*, const char*, int, const std::vector<ns4__PatrolPointInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__PatrolPointInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__PatrolPointInfo(struct soap*, const char*, std::vector<ns4__PatrolPointInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__PatrolPointInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__PatrolPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__PatrolPointInfo * > * soap_new_std__vectorTemplateOfPointerTons4__PatrolPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__PatrolPointInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__PatrolPointInfo(struct soap *soap, std::vector<ns4__PatrolPointInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__PatrolPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__DockPointInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__DockPointInfo (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__DockPointInfo(struct soap*, std::vector<ns4__DockPointInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__DockPointInfo(struct soap*, const std::vector<ns4__DockPointInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__DockPointInfo(struct soap*, const char*, int, const std::vector<ns4__DockPointInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__DockPointInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__DockPointInfo(struct soap*, const char*, std::vector<ns4__DockPointInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__DockPointInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__DockPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__DockPointInfo * > * soap_new_std__vectorTemplateOfPointerTons4__DockPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__DockPointInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__DockPointInfo(struct soap *soap, std::vector<ns4__DockPointInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__DockPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfstd__string
#define SOAP_TYPE_TaskData_std__vectorTemplateOfstd__string (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__MapEdgeInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__MapEdgeInfo (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__MapEdgeInfo(struct soap*, std::vector<ns4__MapEdgeInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__MapEdgeInfo(struct soap*, const std::vector<ns4__MapEdgeInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__MapEdgeInfo(struct soap*, const char*, int, const std::vector<ns4__MapEdgeInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__MapEdgeInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__MapEdgeInfo(struct soap*, const char*, std::vector<ns4__MapEdgeInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__MapEdgeInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__MapEdgeInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__MapEdgeInfo * > * soap_new_std__vectorTemplateOfPointerTons4__MapEdgeInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__MapEdgeInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__MapEdgeInfo(struct soap *soap, std::vector<ns4__MapEdgeInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__MapEdgeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__PatrolAreaInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__PatrolAreaInfo (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__PatrolAreaInfo(struct soap*, std::vector<ns4__PatrolAreaInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__PatrolAreaInfo(struct soap*, const std::vector<ns4__PatrolAreaInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__PatrolAreaInfo(struct soap*, const char*, int, const std::vector<ns4__PatrolAreaInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__PatrolAreaInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__PatrolAreaInfo(struct soap*, const char*, std::vector<ns4__PatrolAreaInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__PatrolAreaInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__PatrolAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__PatrolAreaInfo * > * soap_new_std__vectorTemplateOfPointerTons4__PatrolAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__PatrolAreaInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__PatrolAreaInfo(struct soap *soap, std::vector<ns4__PatrolAreaInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__PatrolAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__MapAreaInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__MapAreaInfo (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__MapAreaInfo(struct soap*, std::vector<ns4__MapAreaInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__MapAreaInfo(struct soap*, const std::vector<ns4__MapAreaInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__MapAreaInfo(struct soap*, const char*, int, const std::vector<ns4__MapAreaInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__MapAreaInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__MapAreaInfo(struct soap*, const char*, std::vector<ns4__MapAreaInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__MapAreaInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__MapAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__MapAreaInfo * > * soap_new_std__vectorTemplateOfPointerTons4__MapAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__MapAreaInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__MapAreaInfo(struct soap *soap, std::vector<ns4__MapAreaInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__MapAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotAlarmInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotAlarmInfo (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__RobotAlarmInfo(struct soap*, std::vector<ns4__RobotAlarmInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__RobotAlarmInfo(struct soap*, const std::vector<ns4__RobotAlarmInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__RobotAlarmInfo(struct soap*, const char*, int, const std::vector<ns4__RobotAlarmInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__RobotAlarmInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__RobotAlarmInfo(struct soap*, const char*, std::vector<ns4__RobotAlarmInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__RobotAlarmInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__RobotAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__RobotAlarmInfo * > * soap_new_std__vectorTemplateOfPointerTons4__RobotAlarmInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__RobotAlarmInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__RobotAlarmInfo(struct soap *soap, std::vector<ns4__RobotAlarmInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__RobotAlarmInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotGasInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotGasInfo (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__RobotGasInfo(struct soap*, std::vector<ns4__RobotGasInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__RobotGasInfo(struct soap*, const std::vector<ns4__RobotGasInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__RobotGasInfo(struct soap*, const char*, int, const std::vector<ns4__RobotGasInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__RobotGasInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__RobotGasInfo(struct soap*, const char*, std::vector<ns4__RobotGasInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__RobotGasInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__RobotGasInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__RobotGasInfo * > * soap_new_std__vectorTemplateOfPointerTons4__RobotGasInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__RobotGasInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__RobotGasInfo(struct soap *soap, std::vector<ns4__RobotGasInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__RobotGasInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotMileageInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotMileageInfo (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__RobotMileageInfo(struct soap*, std::vector<ns4__RobotMileageInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__RobotMileageInfo(struct soap*, const std::vector<ns4__RobotMileageInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__RobotMileageInfo(struct soap*, const char*, int, const std::vector<ns4__RobotMileageInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__RobotMileageInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__RobotMileageInfo(struct soap*, const char*, std::vector<ns4__RobotMileageInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__RobotMileageInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__RobotMileageInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__RobotMileageInfo * > * soap_new_std__vectorTemplateOfPointerTons4__RobotMileageInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__RobotMileageInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__RobotMileageInfo(struct soap *soap, std::vector<ns4__RobotMileageInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__RobotMileageInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo(struct soap*, std::vector<ns4__RobotYunTaiInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo(struct soap*, const std::vector<ns4__RobotYunTaiInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo(struct soap*, const char*, int, const std::vector<ns4__RobotYunTaiInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__RobotYunTaiInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo(struct soap*, const char*, std::vector<ns4__RobotYunTaiInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__RobotYunTaiInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__RobotYunTaiInfo * > * soap_new_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo(struct soap *soap, std::vector<ns4__RobotYunTaiInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__RobotYunTaiInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotPosInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotPosInfo (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__RobotPosInfo(struct soap*, std::vector<ns4__RobotPosInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__RobotPosInfo(struct soap*, const std::vector<ns4__RobotPosInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__RobotPosInfo(struct soap*, const char*, int, const std::vector<ns4__RobotPosInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__RobotPosInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__RobotPosInfo(struct soap*, const char*, std::vector<ns4__RobotPosInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__RobotPosInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__RobotPosInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__RobotPosInfo * > * soap_new_std__vectorTemplateOfPointerTons4__RobotPosInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__RobotPosInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__RobotPosInfo(struct soap *soap, std::vector<ns4__RobotPosInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__RobotPosInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotTaskState
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotTaskState (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__RobotTaskState(struct soap*, std::vector<ns4__RobotTaskState * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__RobotTaskState(struct soap*, const std::vector<ns4__RobotTaskState * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__RobotTaskState(struct soap*, const char*, int, const std::vector<ns4__RobotTaskState * >*, const char*);
SOAP_FMAC3 std::vector<ns4__RobotTaskState * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__RobotTaskState(struct soap*, const char*, std::vector<ns4__RobotTaskState * >*, const char*);
SOAP_FMAC1 std::vector<ns4__RobotTaskState * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__RobotTaskState(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__RobotTaskState * > * soap_new_std__vectorTemplateOfPointerTons4__RobotTaskState(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__RobotTaskState(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__RobotTaskState(struct soap *soap, std::vector<ns4__RobotTaskState * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__RobotTaskState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__SpeedInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__SpeedInfo (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__SpeedInfo(struct soap*, std::vector<ns4__SpeedInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__SpeedInfo(struct soap*, const std::vector<ns4__SpeedInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__SpeedInfo(struct soap*, const char*, int, const std::vector<ns4__SpeedInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__SpeedInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__SpeedInfo(struct soap*, const char*, std::vector<ns4__SpeedInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__SpeedInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__SpeedInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__SpeedInfo * > * soap_new_std__vectorTemplateOfPointerTons4__SpeedInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__SpeedInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__SpeedInfo(struct soap *soap, std::vector<ns4__SpeedInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__SpeedInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__BatteryInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__BatteryInfo (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__BatteryInfo(struct soap*, std::vector<ns4__BatteryInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__BatteryInfo(struct soap*, const std::vector<ns4__BatteryInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__BatteryInfo(struct soap*, const char*, int, const std::vector<ns4__BatteryInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__BatteryInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__BatteryInfo(struct soap*, const char*, std::vector<ns4__BatteryInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__BatteryInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__BatteryInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__BatteryInfo * > * soap_new_std__vectorTemplateOfPointerTons4__BatteryInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__BatteryInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__BatteryInfo(struct soap *soap, std::vector<ns4__BatteryInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__BatteryInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__RobotInfo (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__RobotInfo(struct soap*, std::vector<ns4__RobotInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__RobotInfo(struct soap*, const std::vector<ns4__RobotInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__RobotInfo(struct soap*, const char*, int, const std::vector<ns4__RobotInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__RobotInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__RobotInfo(struct soap*, const char*, std::vector<ns4__RobotInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__RobotInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__RobotInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__RobotInfo * > * soap_new_std__vectorTemplateOfPointerTons4__RobotInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__RobotInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__RobotInfo(struct soap *soap, std::vector<ns4__RobotInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__RobotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__ConnectInfo
#define SOAP_TYPE_TaskData_std__vectorTemplateOfPointerTons4__ConnectInfo (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__ConnectInfo(struct soap*, std::vector<ns4__ConnectInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__ConnectInfo(struct soap*, const std::vector<ns4__ConnectInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__ConnectInfo(struct soap*, const char*, int, const std::vector<ns4__ConnectInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__ConnectInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__ConnectInfo(struct soap*, const char*, std::vector<ns4__ConnectInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__ConnectInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__ConnectInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__ConnectInfo * > * soap_new_std__vectorTemplateOfPointerTons4__ConnectInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__ConnectInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__ConnectInfo(struct soap *soap, std::vector<ns4__ConnectInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__ConnectInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

} // namespace TaskData


#endif

/* End of TaskDataH.h */
