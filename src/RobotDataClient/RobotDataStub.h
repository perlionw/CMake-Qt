/* RobotDataStub.h
   Generated by gSOAP 2.8.16 from .\robotdata.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef RobotDataStub_H
#define RobotDataStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/station.xsd"
#define SOAP_NAMESPACE_OF_ns3	"http://tempuri.org/robotdata.xsd"
#define SOAP_NAMESPACE_OF_ns4	"http://tempuri.org/taskdata.xsd"
#define SOAP_NAMESPACE_OF_ns5	"http://tempuri.org/taskfinish.xsd"
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20816
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace RobotData {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_RobotData_ns3__YuntaiControlType
#define SOAP_TYPE_RobotData_ns3__YuntaiControlType (93)
/* ns3:YuntaiControlType */
enum ns3__YuntaiControlType { ns3__YuntaiControlType__TurnUp = 0, ns3__YuntaiControlType__TurnDown = 1, ns3__YuntaiControlType__TurnLeft = 2, ns3__YuntaiControlType__TurnRight = 3, ns3__YuntaiControlType__TurnStop = 4, ns3__YuntaiControlType__TurnReset = 5 };
#endif

#ifndef SOAP_TYPE_RobotData_ns3__CameraControlType
#define SOAP_TYPE_RobotData_ns3__CameraControlType (94)
/* ns3:CameraControlType */
enum ns3__CameraControlType { ns3__CameraControlType__ZoomUp = 0, ns3__CameraControlType__ZoomUpStop = 1, ns3__CameraControlType__ZoomDown = 2, ns3__CameraControlType__ZoomDownStop = 3, ns3__CameraControlType__FocusNear = 4, ns3__CameraControlType__FocusNearStop = 5, ns3__CameraControlType__FocusFar = 6, ns3__CameraControlType__FocusFarStop = 7, ns3__CameraControlType__CameraReset = 8 };
#endif

#ifndef SOAP_TYPE_RobotData_ns3__LightControlType
#define SOAP_TYPE_RobotData_ns3__LightControlType (95)
/* ns3:LightControlType */
enum ns3__LightControlType { ns3__LightControlType__LightOn = 0, ns3__LightControlType__LightOff = 1 };
#endif

#ifndef SOAP_TYPE_RobotData_ns3__WiperControlType
#define SOAP_TYPE_RobotData_ns3__WiperControlType (96)
/* ns3:WiperControlType */
enum ns3__WiperControlType { ns3__WiperControlType__WiperOn = 0, ns3__WiperControlType__WiperOff = 1 };
#endif

#ifndef SOAP_TYPE_RobotData_ns3__FilrControlType
#define SOAP_TYPE_RobotData_ns3__FilrControlType (97)
/* ns3:FilrControlType */
enum ns3__FilrControlType { ns3__FilrControlType__FocusUp = 0, ns3__FilrControlType__FocusDown = 1, ns3__FilrControlType__AutoFocus = 2 };
#endif

#ifndef SOAP_TYPE_RobotData_ns3__LifterControlType
#define SOAP_TYPE_RobotData_ns3__LifterControlType (98)
/* ns3:LifterControlType */
enum ns3__LifterControlType { ns3__LifterControlType__LifterUp = 0, ns3__LifterControlType__LifterDown = 1, ns3__LifterControlType__LifterStop = 2 };
#endif

#ifndef SOAP_TYPE_RobotData_ns3__PdControlType
#define SOAP_TYPE_RobotData_ns3__PdControlType (99)
/* ns3:PdControlType */
enum ns3__PdControlType { ns3__PdControlType__PdForWard = 0, ns3__PdControlType__PdBackWord = 1, ns3__PdControlType__PdStop = 2 };
#endif

#ifndef SOAP_TYPE_RobotData_ns3__ControlTaskType
#define SOAP_TYPE_RobotData_ns3__ControlTaskType (100)
/* ns3:ControlTaskType */
enum ns3__ControlTaskType { ns3__ControlTaskType__CancelTask = 0, ns3__ControlTaskType__PauseTask = 1, ns3__ControlTaskType__ResumeTask = 2, ns3__ControlTaskType__ChargeTask = 3 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_RobotData_ns3__ConnectInfo
#define SOAP_TYPE_RobotData_ns3__ConnectInfo (8)
/* ns3:ConnectInfo */
class SOAP_CMAC ns3__ConnectInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	bool State;	/* required element of type xsd:boolean */
	std::string ConnectDesc;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_RobotData_ns3__ConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ConnectInfo() { ns3__ConnectInfo::soap_default(NULL); }
	virtual ~ns3__ConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__ConnectInfos
#define SOAP_TYPE_RobotData_ns3__ConnectInfos (9)
/* ns3:ConnectInfos */
class SOAP_CMAC ns3__ConnectInfos
{
public:
	std::vector<ns3__ConnectInfo * >Infos;	/* optional element of type ns3:ConnectInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_RobotData_ns3__ConnectInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__ConnectInfos() { ns3__ConnectInfos::soap_default(NULL); }
	virtual ~ns3__ConnectInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotInfo
#define SOAP_TYPE_RobotData_ns3__RobotInfo (10)
/* ns3:RobotInfo */
class SOAP_CMAC ns3__RobotInfo
{
public:
	std::string RobotName;	/* required element of type xsd:string */
	std::string RobotIp;	/* required element of type xsd:string */
	std::string CameraIp;	/* required element of type xsd:string */
	int CameraPort;	/* required element of type xsd:int */
	std::string FlirIp;	/* required element of type xsd:string */
	int FlirPort;	/* required element of type xsd:int */
	std::string CameraUser;	/* required element of type xsd:string */
	std::string CameraPassword;	/* required element of type xsd:string */
	std::string FlirUser;	/* required element of type xsd:string */
	std::string FlirPassword;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotInfo() { ns3__RobotInfo::soap_default(NULL); }
	virtual ~ns3__RobotInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotInfos
#define SOAP_TYPE_RobotData_ns3__RobotInfos (11)
/* ns3:RobotInfos */
class SOAP_CMAC ns3__RobotInfos
{
public:
	std::vector<ns3__RobotInfo * >Infos;	/* optional element of type ns3:RobotInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotInfos() { ns3__RobotInfos::soap_default(NULL); }
	virtual ~ns3__RobotInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__BatteryInfo
#define SOAP_TYPE_RobotData_ns3__BatteryInfo (12)
/* ns3:BatteryInfo */
class SOAP_CMAC ns3__BatteryInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	double BatteryValue;	/* required element of type xsd:double */
	double BatteryPercent;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_RobotData_ns3__BatteryInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__BatteryInfo() { ns3__BatteryInfo::soap_default(NULL); }
	virtual ~ns3__BatteryInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__BatteryInfos
#define SOAP_TYPE_RobotData_ns3__BatteryInfos (13)
/* ns3:BatteryInfos */
class SOAP_CMAC ns3__BatteryInfos
{
public:
	std::vector<ns3__BatteryInfo * >Infos;	/* optional element of type ns3:BatteryInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_RobotData_ns3__BatteryInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__BatteryInfos() { ns3__BatteryInfos::soap_default(NULL); }
	virtual ~ns3__BatteryInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__SpeedInfo
#define SOAP_TYPE_RobotData_ns3__SpeedInfo (14)
/* ns3:SpeedInfo */
class SOAP_CMAC ns3__SpeedInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	double Speed;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_RobotData_ns3__SpeedInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__SpeedInfo() { ns3__SpeedInfo::soap_default(NULL); }
	virtual ~ns3__SpeedInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__SpeedInfos
#define SOAP_TYPE_RobotData_ns3__SpeedInfos (15)
/* ns3:SpeedInfos */
class SOAP_CMAC ns3__SpeedInfos
{
public:
	std::vector<ns3__SpeedInfo * >Infos;	/* optional element of type ns3:SpeedInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_RobotData_ns3__SpeedInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__SpeedInfos() { ns3__SpeedInfos::soap_default(NULL); }
	virtual ~ns3__SpeedInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotTaskState
#define SOAP_TYPE_RobotData_ns3__RobotTaskState (16)
/* ns3:RobotTaskState */
class SOAP_CMAC ns3__RobotTaskState
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string TaskId;	/* required element of type xsd:string */
	std::string TaskType;	/* required element of type xsd:string */
	std::string TaskDesc;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotTaskState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotTaskState() { ns3__RobotTaskState::soap_default(NULL); }
	virtual ~ns3__RobotTaskState() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotTaskStates
#define SOAP_TYPE_RobotData_ns3__RobotTaskStates (17)
/* ns3:RobotTaskStates */
class SOAP_CMAC ns3__RobotTaskStates
{
public:
	std::vector<ns3__RobotTaskState * >States;	/* optional element of type ns3:RobotTaskState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotTaskStates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotTaskStates() { ns3__RobotTaskStates::soap_default(NULL); }
	virtual ~ns3__RobotTaskStates() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotPosInfo
#define SOAP_TYPE_RobotData_ns3__RobotPosInfo (18)
/* ns3:RobotPosInfo */
class SOAP_CMAC ns3__RobotPosInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string PosX;	/* required element of type xsd:string */
	std::string PosY;	/* required element of type xsd:string */
	std::string Angle;	/* required element of type xsd:string */
	std::string EdgeID;	/* required element of type xsd:string */
	std::string Precent;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotPosInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotPosInfo() { ns3__RobotPosInfo::soap_default(NULL); }
	virtual ~ns3__RobotPosInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotPosInfos
#define SOAP_TYPE_RobotData_ns3__RobotPosInfos (19)
/* ns3:RobotPosInfos */
class SOAP_CMAC ns3__RobotPosInfos
{
public:
	std::vector<ns3__RobotPosInfo * >Infos;	/* optional element of type ns3:RobotPosInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotPosInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotPosInfos() { ns3__RobotPosInfos::soap_default(NULL); }
	virtual ~ns3__RobotPosInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotYunTaiInfo
#define SOAP_TYPE_RobotData_ns3__RobotYunTaiInfo (20)
/* ns3:RobotYunTaiInfo */
class SOAP_CMAC ns3__RobotYunTaiInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string PosPan;	/* required element of type xsd:string */
	std::string PosTile;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotYunTaiInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotYunTaiInfo() { ns3__RobotYunTaiInfo::soap_default(NULL); }
	virtual ~ns3__RobotYunTaiInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotYunTaiInfos
#define SOAP_TYPE_RobotData_ns3__RobotYunTaiInfos (21)
/* ns3:RobotYunTaiInfos */
class SOAP_CMAC ns3__RobotYunTaiInfos
{
public:
	std::vector<ns3__RobotYunTaiInfo * >Infos;	/* optional element of type ns3:RobotYunTaiInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotYunTaiInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotYunTaiInfos() { ns3__RobotYunTaiInfos::soap_default(NULL); }
	virtual ~ns3__RobotYunTaiInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotMileageInfo
#define SOAP_TYPE_RobotData_ns3__RobotMileageInfo (22)
/* ns3:RobotMileageInfo */
class SOAP_CMAC ns3__RobotMileageInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	double Mileage;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotMileageInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotMileageInfo() { ns3__RobotMileageInfo::soap_default(NULL); }
	virtual ~ns3__RobotMileageInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotMileageInfos
#define SOAP_TYPE_RobotData_ns3__RobotMileageInfos (23)
/* ns3:RobotMileageInfos */
class SOAP_CMAC ns3__RobotMileageInfos
{
public:
	std::vector<ns3__RobotMileageInfo * >Infos;	/* optional element of type ns3:RobotMileageInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotMileageInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotMileageInfos() { ns3__RobotMileageInfos::soap_default(NULL); }
	virtual ~ns3__RobotMileageInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotGasInfo
#define SOAP_TYPE_RobotData_ns3__RobotGasInfo (24)
/* ns3:RobotGasInfo */
class SOAP_CMAC ns3__RobotGasInfo
{
public:
	std::string robot_ip;	/* required element of type xsd:string */
	std::string H2S;	/* required element of type xsd:string */
	std::string CO;	/* required element of type xsd:string */
	std::string O2;	/* required element of type xsd:string */
	std::string CH4;	/* required element of type xsd:string */
	std::string TEMP;	/* required element of type xsd:string */
	std::string HUM;	/* required element of type xsd:string */
	std::string PM25;	/* required element of type xsd:string */
	std::string PM10;	/* required element of type xsd:string */
	std::string O3;	/* required element of type xsd:string */
	std::string SF6;	/* required element of type xsd:string */
	std::string Desc;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotGasInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotGasInfo() { ns3__RobotGasInfo::soap_default(NULL); }
	virtual ~ns3__RobotGasInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotGasInfos
#define SOAP_TYPE_RobotData_ns3__RobotGasInfos (25)
/* ns3:RobotGasInfos */
class SOAP_CMAC ns3__RobotGasInfos
{
public:
	std::vector<ns3__RobotGasInfo * >GasContents;	/* optional element of type ns3:RobotGasInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotGasInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotGasInfos() { ns3__RobotGasInfos::soap_default(NULL); }
	virtual ~ns3__RobotGasInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotAlarmInfo
#define SOAP_TYPE_RobotData_ns3__RobotAlarmInfo (26)
/* ns3:RobotAlarmInfo */
class SOAP_CMAC ns3__RobotAlarmInfo
{
public:
	std::string AlarmId;	/* required element of type xsd:string */
	std::string RobotIp;	/* required element of type xsd:string */
	std::string AlarmType;	/* required element of type xsd:string */
	std::string AlarmDesc;	/* required element of type xsd:string */
	std::string AlarmTime;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotAlarmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotAlarmInfo() { ns3__RobotAlarmInfo::soap_default(NULL); }
	virtual ~ns3__RobotAlarmInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__RobotAlarmInfos
#define SOAP_TYPE_RobotData_ns3__RobotAlarmInfos (27)
/* ns3:RobotAlarmInfos */
class SOAP_CMAC ns3__RobotAlarmInfos
{
public:
	std::vector<ns3__RobotAlarmInfo * >Infos;	/* optional element of type ns3:RobotAlarmInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_RobotData_ns3__RobotAlarmInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__RobotAlarmInfos() { ns3__RobotAlarmInfos::soap_default(NULL); }
	virtual ~ns3__RobotAlarmInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__MapAreaInfo
#define SOAP_TYPE_RobotData_ns3__MapAreaInfo (28)
/* ns3:MapAreaInfo */
class SOAP_CMAC ns3__MapAreaInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string AreaId;	/* required element of type xsd:string */
	std::string AreaName;	/* required element of type xsd:string */
	std::string AreaMap;	/* required element of type xsd:string */
	std::string MaxX;	/* required element of type xsd:string */
	std::string MaxY;	/* required element of type xsd:string */
	std::string MinX;	/* required element of type xsd:string */
	std::string MinY;	/* required element of type xsd:string */
	std::string ParentId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_RobotData_ns3__MapAreaInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__MapAreaInfo() { ns3__MapAreaInfo::soap_default(NULL); }
	virtual ~ns3__MapAreaInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__MapAreaInfos
#define SOAP_TYPE_RobotData_ns3__MapAreaInfos (29)
/* ns3:MapAreaInfos */
class SOAP_CMAC ns3__MapAreaInfos
{
public:
	std::vector<ns3__MapAreaInfo * >Infos;	/* optional element of type ns3:MapAreaInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_RobotData_ns3__MapAreaInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__MapAreaInfos() { ns3__MapAreaInfos::soap_default(NULL); }
	virtual ~ns3__MapAreaInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__PatrolAreaInfo
#define SOAP_TYPE_RobotData_ns3__PatrolAreaInfo (30)
/* ns3:PatrolAreaInfo */
class SOAP_CMAC ns3__PatrolAreaInfo
{
public:
	std::string AreaId;	/* required element of type xsd:string */
	std::string AreaName;	/* required element of type xsd:string */
	std::string ParentId;	/* required element of type xsd:string */
	std::string RobotIp;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_RobotData_ns3__PatrolAreaInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__PatrolAreaInfo() { ns3__PatrolAreaInfo::soap_default(NULL); }
	virtual ~ns3__PatrolAreaInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__PatrolAreaInfos
#define SOAP_TYPE_RobotData_ns3__PatrolAreaInfos (31)
/* ns3:PatrolAreaInfos */
class SOAP_CMAC ns3__PatrolAreaInfos
{
public:
	std::vector<ns3__PatrolAreaInfo * >Infos;	/* optional element of type ns3:PatrolAreaInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_RobotData_ns3__PatrolAreaInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__PatrolAreaInfos() { ns3__PatrolAreaInfos::soap_default(NULL); }
	virtual ~ns3__PatrolAreaInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__MapEdgeInfo
#define SOAP_TYPE_RobotData_ns3__MapEdgeInfo (32)
/* ns3:MapEdgeInfo */
class SOAP_CMAC ns3__MapEdgeInfo
{
public:
	std::string EdgeId;	/* required element of type xsd:string */
	std::string StartNodeId;	/* required element of type xsd:string */
	std::string EndNodeId;	/* required element of type xsd:string */
	std::string StartNodeX;	/* required element of type xsd:string */
	std::string StartNodeY;	/* required element of type xsd:string */
	std::string EndNodeX;	/* required element of type xsd:string */
	std::string EndNodeY;	/* required element of type xsd:string */
	std::string FirstControlX;	/* required element of type xsd:string */
	std::string FirstControlY;	/* required element of type xsd:string */
	std::string SecondControlX;	/* required element of type xsd:string */
	std::string SecondControlY;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_RobotData_ns3__MapEdgeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__MapEdgeInfo() { ns3__MapEdgeInfo::soap_default(NULL); }
	virtual ~ns3__MapEdgeInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__MapEdgeInfos
#define SOAP_TYPE_RobotData_ns3__MapEdgeInfos (33)
/* ns3:MapEdgeInfos */
class SOAP_CMAC ns3__MapEdgeInfos
{
public:
	std::vector<ns3__MapEdgeInfo * >Infos;	/* optional element of type ns3:MapEdgeInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_RobotData_ns3__MapEdgeInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__MapEdgeInfos() { ns3__MapEdgeInfos::soap_default(NULL); }
	virtual ~ns3__MapEdgeInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__DockPointInfo
#define SOAP_TYPE_RobotData_ns3__DockPointInfo (34)
/* ns3:DockPointInfo */
class SOAP_CMAC ns3__DockPointInfo
{
public:
	std::string DockId;	/* required element of type xsd:string */
	std::string DockX;	/* required element of type xsd:string */
	std::string DockY;	/* required element of type xsd:string */
	std::vector<std::string >PointList;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_RobotData_ns3__DockPointInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__DockPointInfo() { ns3__DockPointInfo::soap_default(NULL); }
	virtual ~ns3__DockPointInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__DockPointInfos
#define SOAP_TYPE_RobotData_ns3__DockPointInfos (35)
/* ns3:DockPointInfos */
class SOAP_CMAC ns3__DockPointInfos
{
public:
	std::vector<ns3__DockPointInfo * >Infos;	/* optional element of type ns3:DockPointInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_RobotData_ns3__DockPointInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__DockPointInfos() { ns3__DockPointInfos::soap_default(NULL); }
	virtual ~ns3__DockPointInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__PatrolPointInfo
#define SOAP_TYPE_RobotData_ns3__PatrolPointInfo (36)
/* ns3:PatrolPointInfo */
class SOAP_CMAC ns3__PatrolPointInfo
{
public:
	std::string PointId;	/* required element of type xsd:string */
	std::string PointName;	/* required element of type xsd:string */
	std::string PointType;	/* required element of type xsd:string */
	std::string DeviceType;	/* required element of type xsd:string */
	std::string AreaId;	/* required element of type xsd:string */
	std::string DockId;	/* required element of type xsd:string */
	std::string RobotIp;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_RobotData_ns3__PatrolPointInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__PatrolPointInfo() { ns3__PatrolPointInfo::soap_default(NULL); }
	virtual ~ns3__PatrolPointInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__PatrolPointInfos
#define SOAP_TYPE_RobotData_ns3__PatrolPointInfos (37)
/* ns3:PatrolPointInfos */
class SOAP_CMAC ns3__PatrolPointInfos
{
public:
	std::vector<ns3__PatrolPointInfo * >Infos;	/* optional element of type ns3:PatrolPointInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_RobotData_ns3__PatrolPointInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__PatrolPointInfos() { ns3__PatrolPointInfos::soap_default(NULL); }
	virtual ~ns3__PatrolPointInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__TaskPathInfo
#define SOAP_TYPE_RobotData_ns3__TaskPathInfo (38)
/* ns3:TaskPathInfo */
class SOAP_CMAC ns3__TaskPathInfo
{
public:
	std::string TaskPathId;	/* required element of type xsd:string */
	std::string TaskPathName;	/* required element of type xsd:string */
	std::vector<std::string >PointList;	/* optional element of type xsd:string */
	std::string TaskPathType;	/* required element of type xsd:string */
	std::string CreateTime;	/* required element of type xsd:string */
	int FinishAction;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_RobotData_ns3__TaskPathInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskPathInfo() { ns3__TaskPathInfo::soap_default(NULL); }
	virtual ~ns3__TaskPathInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__TaskPathInfos
#define SOAP_TYPE_RobotData_ns3__TaskPathInfos (39)
/* ns3:TaskPathInfos */
class SOAP_CMAC ns3__TaskPathInfos
{
public:
	std::vector<ns3__TaskPathInfo * >Infos;	/* optional element of type ns3:TaskPathInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_RobotData_ns3__TaskPathInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskPathInfos() { ns3__TaskPathInfos::soap_default(NULL); }
	virtual ~ns3__TaskPathInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__TaskExcuteData
#define SOAP_TYPE_RobotData_ns3__TaskExcuteData (40)
/* ns3:TaskExcuteData */
class SOAP_CMAC ns3__TaskExcuteData
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string TaskType;	/* required element of type xsd:string */
	std::string TaskId;	/* required element of type xsd:string */
	std::string TaskName;	/* required element of type xsd:string */
	std::string PatrolDeviceName;	/* required element of type xsd:string */
	std::string PatrolDeviceId;	/* required element of type xsd:string */
	int TotalDeviceSize;	/* required element of type xsd:int */
	int ErrorDeviceSize;	/* required element of type xsd:int */
	int FinishDeviceSize;	/* required element of type xsd:int */
	int TaskFinishPercentage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_RobotData_ns3__TaskExcuteData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskExcuteData() { ns3__TaskExcuteData::soap_default(NULL); }
	virtual ~ns3__TaskExcuteData() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__TaskFinishInfo
#define SOAP_TYPE_RobotData_ns3__TaskFinishInfo (41)
/* ns3:TaskFinishInfo */
class SOAP_CMAC ns3__TaskFinishInfo
{
public:
	std::string TaskId;	/* required element of type xsd:string */
	std::string TaskName;	/* required element of type xsd:string */
	std::string TaskType;	/* required element of type xsd:string */
	std::string TaskPathId;	/* required element of type xsd:string */
	std::vector<std::string >PointList;	/* optional element of type xsd:string */
	std::string StartTime;	/* required element of type xsd:string */
	std::string EndTime;	/* required element of type xsd:string */
	std::string FinishState;	/* required element of type xsd:string */
	std::string ExcuteRobot;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_RobotData_ns3__TaskFinishInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskFinishInfo() { ns3__TaskFinishInfo::soap_default(NULL); }
	virtual ~ns3__TaskFinishInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__TaskFinishInfos
#define SOAP_TYPE_RobotData_ns3__TaskFinishInfos (42)
/* ns3:TaskFinishInfos */
class SOAP_CMAC ns3__TaskFinishInfos
{
public:
	std::vector<ns3__TaskFinishInfo * >Infos;	/* optional element of type ns3:TaskFinishInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_RobotData_ns3__TaskFinishInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskFinishInfos() { ns3__TaskFinishInfos::soap_default(NULL); }
	virtual ~ns3__TaskFinishInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__TaskExcuteInfo
#define SOAP_TYPE_RobotData_ns3__TaskExcuteInfo (43)
/* ns3:TaskExcuteInfo */
class SOAP_CMAC ns3__TaskExcuteInfo
{
public:
	std::string TaskId;	/* required element of type xsd:string */
	std::string TaskName;	/* required element of type xsd:string */
	std::string TaskType;	/* required element of type xsd:string */
	std::string TaskPathId;	/* required element of type xsd:string */
	std::string TargetId;	/* required element of type xsd:string */
	std::string PointId;	/* required element of type xsd:string */
	std::string PointName;	/* required element of type xsd:string */
	std::string PointType;	/* required element of type xsd:string */
	std::string ExcuteTime;	/* required element of type xsd:string */
	std::string ExcuteValue;	/* required element of type xsd:string */
	std::string ExcuteUnit;	/* required element of type xsd:string */
	std::string ExcuteState;	/* required element of type xsd:string */
	std::string ExcuteDesc;	/* required element of type xsd:string */
	std::string HDPicture;	/* required element of type xsd:string */
	std::string InfraredPicture;	/* required element of type xsd:string */
	std::string OtherFile;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_RobotData_ns3__TaskExcuteInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskExcuteInfo() { ns3__TaskExcuteInfo::soap_default(NULL); }
	virtual ~ns3__TaskExcuteInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData_ns3__TaskExcuteInfos
#define SOAP_TYPE_RobotData_ns3__TaskExcuteInfos (44)
/* ns3:TaskExcuteInfos */
class SOAP_CMAC ns3__TaskExcuteInfos
{
public:
	std::vector<ns3__TaskExcuteInfo * >Infos;	/* optional element of type ns3:TaskExcuteInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_RobotData_ns3__TaskExcuteInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__TaskExcuteInfos() { ns3__TaskExcuteInfos::soap_default(NULL); }
	virtual ~ns3__TaskExcuteInfos() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotConnect
#define SOAP_TYPE_RobotData__ns3__GetRobotConnect (45)
/* ns3:GetRobotConnect */
class SOAP_CMAC _ns3__GetRobotConnect
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotConnect */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotConnect() { _ns3__GetRobotConnect::soap_default(NULL); }
	virtual ~_ns3__GetRobotConnect() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotConnectResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotConnectResponse (46)
/* ns3:GetRobotConnectResponse */
class SOAP_CMAC _ns3__GetRobotConnectResponse
{
public:
	ns3__ConnectInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:ConnectInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotConnectResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotConnectResponse() { _ns3__GetRobotConnectResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotConnectResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotInfo (47)
/* ns3:GetRobotInfo */
class SOAP_CMAC _ns3__GetRobotInfo
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotInfo() { _ns3__GetRobotInfo::soap_default(NULL); }
	virtual ~_ns3__GetRobotInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotInfoResponse (48)
/* ns3:GetRobotInfoResponse */
class SOAP_CMAC _ns3__GetRobotInfoResponse
{
public:
	ns3__RobotInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:RobotInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotInfoResponse() { _ns3__GetRobotInfoResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotTime
#define SOAP_TYPE_RobotData__ns3__GetRobotTime (49)
/* ns3:GetRobotTime */
class SOAP_CMAC _ns3__GetRobotTime
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotTime() { _ns3__GetRobotTime::soap_default(NULL); }
	virtual ~_ns3__GetRobotTime() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotTimeResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotTimeResponse (50)
/* ns3:GetRobotTimeResponse */
class SOAP_CMAC _ns3__GetRobotTimeResponse
{
public:
	std::string RobotTime;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotTimeResponse() { _ns3__GetRobotTimeResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__SetRobotTime
#define SOAP_TYPE_RobotData__ns3__SetRobotTime (51)
/* ns3:SetRobotTime */
class SOAP_CMAC _ns3__SetRobotTime
{
public:
	std::string RobotTime;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_RobotData__ns3__SetRobotTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__SetRobotTime() { _ns3__SetRobotTime::soap_default(NULL); }
	virtual ~_ns3__SetRobotTime() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__SetRobotTimeResponse
#define SOAP_TYPE_RobotData__ns3__SetRobotTimeResponse (52)
/* ns3:SetRobotTimeResponse */
class SOAP_CMAC _ns3__SetRobotTimeResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_RobotData__ns3__SetRobotTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__SetRobotTimeResponse() { _ns3__SetRobotTimeResponse::soap_default(NULL); }
	virtual ~_ns3__SetRobotTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__SetCurrentRobot
#define SOAP_TYPE_RobotData__ns3__SetCurrentRobot (53)
/* ns3:SetCurrentRobot */
class SOAP_CMAC _ns3__SetCurrentRobot
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_RobotData__ns3__SetCurrentRobot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__SetCurrentRobot() { _ns3__SetCurrentRobot::soap_default(NULL); }
	virtual ~_ns3__SetCurrentRobot() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__SetCurrentRobotResponse
#define SOAP_TYPE_RobotData__ns3__SetCurrentRobotResponse (54)
/* ns3:SetCurrentRobotResponse */
class SOAP_CMAC _ns3__SetCurrentRobotResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_RobotData__ns3__SetCurrentRobotResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__SetCurrentRobotResponse() { _ns3__SetCurrentRobotResponse::soap_default(NULL); }
	virtual ~_ns3__SetCurrentRobotResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobot
#define SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobot (55)
/* ns3:ReleaseCurrentRobot */
class SOAP_CMAC _ns3__ReleaseCurrentRobot
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobot */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ReleaseCurrentRobot() { _ns3__ReleaseCurrentRobot::soap_default(NULL); }
	virtual ~_ns3__ReleaseCurrentRobot() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobotResponse
#define SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobotResponse (56)
/* ns3:ReleaseCurrentRobotResponse */
class SOAP_CMAC _ns3__ReleaseCurrentRobotResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobotResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__ReleaseCurrentRobotResponse() { _ns3__ReleaseCurrentRobotResponse::soap_default(NULL); }
	virtual ~_ns3__ReleaseCurrentRobotResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__SetControlMode
#define SOAP_TYPE_RobotData__ns3__SetControlMode (57)
/* ns3:SetControlMode */
class SOAP_CMAC _ns3__SetControlMode
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	int ControlType;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_RobotData__ns3__SetControlMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__SetControlMode() { _ns3__SetControlMode::soap_default(NULL); }
	virtual ~_ns3__SetControlMode() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__SetControlModeResponse
#define SOAP_TYPE_RobotData__ns3__SetControlModeResponse (58)
/* ns3:SetControlModeResponse */
class SOAP_CMAC _ns3__SetControlModeResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_RobotData__ns3__SetControlModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__SetControlModeResponse() { _ns3__SetControlModeResponse::soap_default(NULL); }
	virtual ~_ns3__SetControlModeResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetControlMode
#define SOAP_TYPE_RobotData__ns3__GetControlMode (59)
/* ns3:GetControlMode */
class SOAP_CMAC _ns3__GetControlMode
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_RobotData__ns3__GetControlMode */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetControlMode() { _ns3__GetControlMode::soap_default(NULL); }
	virtual ~_ns3__GetControlMode() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetControlModeResponse
#define SOAP_TYPE_RobotData__ns3__GetControlModeResponse (60)
/* ns3:GetControlModeResponse */
class SOAP_CMAC _ns3__GetControlModeResponse
{
public:
	int ControlType;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_RobotData__ns3__GetControlModeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetControlModeResponse() { _ns3__GetControlModeResponse::soap_default(NULL); }
	virtual ~_ns3__GetControlModeResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotSpeedControl
#define SOAP_TYPE_RobotData__ns3__RobotSpeedControl (61)
/* ns3:RobotSpeedControl */
class SOAP_CMAC _ns3__RobotSpeedControl
{
public:
	double LinearVelocity;	/* required element of type xsd:double */
	double AngularVelocity;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotSpeedControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotSpeedControl() { _ns3__RobotSpeedControl::soap_default(NULL); }
	virtual ~_ns3__RobotSpeedControl() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotSpeedControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotSpeedControlResponse (62)
/* ns3:RobotSpeedControlResponse */
class SOAP_CMAC _ns3__RobotSpeedControlResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotSpeedControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotSpeedControlResponse() { _ns3__RobotSpeedControlResponse::soap_default(NULL); }
	virtual ~_ns3__RobotSpeedControlResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotYuntaiControl
#define SOAP_TYPE_RobotData__ns3__RobotYuntaiControl (63)
/* ns3:RobotYuntaiControl */
class SOAP_CMAC _ns3__RobotYuntaiControl
{
public:
	enum ns3__YuntaiControlType Type;	/* required element of type ns3:YuntaiControlType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotYuntaiControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotYuntaiControl() { _ns3__RobotYuntaiControl::soap_default(NULL); }
	virtual ~_ns3__RobotYuntaiControl() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotYuntaiControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotYuntaiControlResponse (64)
/* ns3:RobotYuntaiControlResponse */
class SOAP_CMAC _ns3__RobotYuntaiControlResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotYuntaiControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotYuntaiControlResponse() { _ns3__RobotYuntaiControlResponse::soap_default(NULL); }
	virtual ~_ns3__RobotYuntaiControlResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotCameraControl
#define SOAP_TYPE_RobotData__ns3__RobotCameraControl (65)
/* ns3:RobotCameraControl */
class SOAP_CMAC _ns3__RobotCameraControl
{
public:
	enum ns3__CameraControlType Type;	/* required element of type ns3:CameraControlType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotCameraControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotCameraControl() { _ns3__RobotCameraControl::soap_default(NULL); }
	virtual ~_ns3__RobotCameraControl() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotCameraControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotCameraControlResponse (66)
/* ns3:RobotCameraControlResponse */
class SOAP_CMAC _ns3__RobotCameraControlResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotCameraControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotCameraControlResponse() { _ns3__RobotCameraControlResponse::soap_default(NULL); }
	virtual ~_ns3__RobotCameraControlResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotLightControl
#define SOAP_TYPE_RobotData__ns3__RobotLightControl (67)
/* ns3:RobotLightControl */
class SOAP_CMAC _ns3__RobotLightControl
{
public:
	enum ns3__LightControlType Type;	/* required element of type ns3:LightControlType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotLightControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotLightControl() { _ns3__RobotLightControl::soap_default(NULL); }
	virtual ~_ns3__RobotLightControl() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotLightControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotLightControlResponse (68)
/* ns3:RobotLightControlResponse */
class SOAP_CMAC _ns3__RobotLightControlResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotLightControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotLightControlResponse() { _ns3__RobotLightControlResponse::soap_default(NULL); }
	virtual ~_ns3__RobotLightControlResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotWiperControl
#define SOAP_TYPE_RobotData__ns3__RobotWiperControl (69)
/* ns3:RobotWiperControl */
class SOAP_CMAC _ns3__RobotWiperControl
{
public:
	enum ns3__WiperControlType Type;	/* required element of type ns3:WiperControlType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotWiperControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotWiperControl() { _ns3__RobotWiperControl::soap_default(NULL); }
	virtual ~_ns3__RobotWiperControl() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotWiperControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotWiperControlResponse (70)
/* ns3:RobotWiperControlResponse */
class SOAP_CMAC _ns3__RobotWiperControlResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotWiperControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotWiperControlResponse() { _ns3__RobotWiperControlResponse::soap_default(NULL); }
	virtual ~_ns3__RobotWiperControlResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotFlirControl
#define SOAP_TYPE_RobotData__ns3__RobotFlirControl (71)
/* ns3:RobotFlirControl */
class SOAP_CMAC _ns3__RobotFlirControl
{
public:
	enum ns3__FilrControlType Type;	/* required element of type ns3:FilrControlType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotFlirControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotFlirControl() { _ns3__RobotFlirControl::soap_default(NULL); }
	virtual ~_ns3__RobotFlirControl() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotFlirControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotFlirControlResponse (72)
/* ns3:RobotFlirControlResponse */
class SOAP_CMAC _ns3__RobotFlirControlResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotFlirControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotFlirControlResponse() { _ns3__RobotFlirControlResponse::soap_default(NULL); }
	virtual ~_ns3__RobotFlirControlResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotLifterControl
#define SOAP_TYPE_RobotData__ns3__RobotLifterControl (73)
/* ns3:RobotLifterControl */
class SOAP_CMAC _ns3__RobotLifterControl
{
public:
	enum ns3__LifterControlType Type;	/* required element of type ns3:LifterControlType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotLifterControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotLifterControl() { _ns3__RobotLifterControl::soap_default(NULL); }
	virtual ~_ns3__RobotLifterControl() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotLifterControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotLifterControlResponse (74)
/* ns3:RobotLifterControlResponse */
class SOAP_CMAC _ns3__RobotLifterControlResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotLifterControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotLifterControlResponse() { _ns3__RobotLifterControlResponse::soap_default(NULL); }
	virtual ~_ns3__RobotLifterControlResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotPdControl
#define SOAP_TYPE_RobotData__ns3__RobotPdControl (75)
/* ns3:RobotPdControl */
class SOAP_CMAC _ns3__RobotPdControl
{
public:
	enum ns3__PdControlType Type;	/* required element of type ns3:PdControlType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotPdControl */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotPdControl() { _ns3__RobotPdControl::soap_default(NULL); }
	virtual ~_ns3__RobotPdControl() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__RobotPdControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotPdControlResponse (76)
/* ns3:RobotPdControlResponse */
class SOAP_CMAC _ns3__RobotPdControlResponse
{
public:
	int Result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_RobotData__ns3__RobotPdControlResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__RobotPdControlResponse() { _ns3__RobotPdControlResponse::soap_default(NULL); }
	virtual ~_ns3__RobotPdControlResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfo (77)
/* ns3:GetRobotBatteryInfo */
class SOAP_CMAC _ns3__GetRobotBatteryInfo
{
public:
	bool NeedAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotBatteryInfo() { _ns3__GetRobotBatteryInfo::soap_default(NULL); }
	virtual ~_ns3__GetRobotBatteryInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfoResponse (78)
/* ns3:GetRobotBatteryInfoResponse */
class SOAP_CMAC _ns3__GetRobotBatteryInfoResponse
{
public:
	ns3__BatteryInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:BatteryInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotBatteryInfoResponse() { _ns3__GetRobotBatteryInfoResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotBatteryInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfo (79)
/* ns3:GetRobotSpeedInfo */
class SOAP_CMAC _ns3__GetRobotSpeedInfo
{
public:
	bool NeedAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotSpeedInfo() { _ns3__GetRobotSpeedInfo::soap_default(NULL); }
	virtual ~_ns3__GetRobotSpeedInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfoResponse (80)
/* ns3:GetRobotSpeedInfoResponse */
class SOAP_CMAC _ns3__GetRobotSpeedInfoResponse
{
public:
	ns3__SpeedInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:SpeedInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotSpeedInfoResponse() { _ns3__GetRobotSpeedInfoResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotSpeedInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotTaskState
#define SOAP_TYPE_RobotData__ns3__GetRobotTaskState (81)
/* ns3:GetRobotTaskState */
class SOAP_CMAC _ns3__GetRobotTaskState
{
public:
	bool NeedAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotTaskState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotTaskState() { _ns3__GetRobotTaskState::soap_default(NULL); }
	virtual ~_ns3__GetRobotTaskState() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotTaskStateResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotTaskStateResponse (82)
/* ns3:GetRobotTaskStateResponse */
class SOAP_CMAC _ns3__GetRobotTaskStateResponse
{
public:
	ns3__RobotTaskStates *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:RobotTaskStates */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotTaskStateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotTaskStateResponse() { _ns3__GetRobotTaskStateResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotTaskStateResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotPosInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotPosInfo (83)
/* ns3:GetRobotPosInfo */
class SOAP_CMAC _ns3__GetRobotPosInfo
{
public:
	bool NeedAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotPosInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotPosInfo() { _ns3__GetRobotPosInfo::soap_default(NULL); }
	virtual ~_ns3__GetRobotPosInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotPosInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotPosInfoResponse (84)
/* ns3:GetRobotPosInfoResponse */
class SOAP_CMAC _ns3__GetRobotPosInfoResponse
{
public:
	ns3__RobotPosInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:RobotPosInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotPosInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotPosInfoResponse() { _ns3__GetRobotPosInfoResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotPosInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfo (85)
/* ns3:GetRobotYunTaiInfo */
class SOAP_CMAC _ns3__GetRobotYunTaiInfo
{
public:
	bool NeedAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotYunTaiInfo() { _ns3__GetRobotYunTaiInfo::soap_default(NULL); }
	virtual ~_ns3__GetRobotYunTaiInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfoResponse (86)
/* ns3:GetRobotYunTaiInfoResponse */
class SOAP_CMAC _ns3__GetRobotYunTaiInfoResponse
{
public:
	ns3__RobotYunTaiInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:RobotYunTaiInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotYunTaiInfoResponse() { _ns3__GetRobotYunTaiInfoResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotYunTaiInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotMileageInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotMileageInfo (87)
/* ns3:GetRobotMileageInfo */
class SOAP_CMAC _ns3__GetRobotMileageInfo
{
public:
	bool NeedAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotMileageInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotMileageInfo() { _ns3__GetRobotMileageInfo::soap_default(NULL); }
	virtual ~_ns3__GetRobotMileageInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotMileageInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotMileageInfoResponse (88)
/* ns3:GetRobotMileageInfoResponse */
class SOAP_CMAC _ns3__GetRobotMileageInfoResponse
{
public:
	ns3__RobotMileageInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:RobotMileageInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotMileageInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotMileageInfoResponse() { _ns3__GetRobotMileageInfoResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotMileageInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotGasInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotGasInfo (89)
/* ns3:GetRobotGasInfo */
class SOAP_CMAC _ns3__GetRobotGasInfo
{
public:
	bool NeedAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotGasInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotGasInfo() { _ns3__GetRobotGasInfo::soap_default(NULL); }
	virtual ~_ns3__GetRobotGasInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotGasInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotGasInfoResponse (90)
/* ns3:GetRobotGasInfoResponse */
class SOAP_CMAC _ns3__GetRobotGasInfoResponse
{
public:
	ns3__RobotGasInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:RobotGasInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotGasInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotGasInfoResponse() { _ns3__GetRobotGasInfoResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotGasInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfo (91)
/* ns3:GetRobotAlarmInfo */
class SOAP_CMAC _ns3__GetRobotAlarmInfo
{
public:
	bool NeedAll;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotAlarmInfo() { _ns3__GetRobotAlarmInfo::soap_default(NULL); }
	virtual ~_ns3__GetRobotAlarmInfo() { }
};
#endif

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfoResponse (92)
/* ns3:GetRobotAlarmInfoResponse */
class SOAP_CMAC _ns3__GetRobotAlarmInfoResponse
{
public:
	ns3__RobotAlarmInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns3:RobotAlarmInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetRobotAlarmInfoResponse() { _ns3__GetRobotAlarmInfoResponse::soap_default(NULL); }
	virtual ~_ns3__GetRobotAlarmInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotConnect
#define SOAP_TYPE_RobotData___ns1__GetRobotConnect (155)
/* Operation wrapper: */
struct __ns1__GetRobotConnect
{
public:
	_ns3__GetRobotConnect *ns3__GetRobotConnect;	/* optional element of type ns3:GetRobotConnect */
public:
	int soap_type() const { return 155; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotConnect */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotInfo (159)
/* Operation wrapper: */
struct __ns1__GetRobotInfo
{
public:
	_ns3__GetRobotInfo *ns3__GetRobotInfo;	/* optional element of type ns3:GetRobotInfo */
public:
	int soap_type() const { return 159; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotInfo */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotTime
#define SOAP_TYPE_RobotData___ns1__GetRobotTime (163)
/* Operation wrapper: */
struct __ns1__GetRobotTime
{
public:
	_ns3__GetRobotTime *ns3__GetRobotTime;	/* optional element of type ns3:GetRobotTime */
public:
	int soap_type() const { return 163; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotTime */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__SetRobotTime
#define SOAP_TYPE_RobotData___ns1__SetRobotTime (167)
/* Operation wrapper: */
struct __ns1__SetRobotTime
{
public:
	_ns3__SetRobotTime *ns3__SetRobotTime;	/* optional element of type ns3:SetRobotTime */
public:
	int soap_type() const { return 167; } /* = unique id SOAP_TYPE_RobotData___ns1__SetRobotTime */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__SetCurrentRobot
#define SOAP_TYPE_RobotData___ns1__SetCurrentRobot (171)
/* Operation wrapper: */
struct __ns1__SetCurrentRobot
{
public:
	_ns3__SetCurrentRobot *ns3__SetCurrentRobot;	/* optional element of type ns3:SetCurrentRobot */
public:
	int soap_type() const { return 171; } /* = unique id SOAP_TYPE_RobotData___ns1__SetCurrentRobot */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__ReleaseCurrentRobot
#define SOAP_TYPE_RobotData___ns1__ReleaseCurrentRobot (175)
/* Operation wrapper: */
struct __ns1__ReleaseCurrentRobot
{
public:
	_ns3__ReleaseCurrentRobot *ns3__ReleaseCurrentRobot;	/* optional element of type ns3:ReleaseCurrentRobot */
public:
	int soap_type() const { return 175; } /* = unique id SOAP_TYPE_RobotData___ns1__ReleaseCurrentRobot */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__SetControlMode
#define SOAP_TYPE_RobotData___ns1__SetControlMode (179)
/* Operation wrapper: */
struct __ns1__SetControlMode
{
public:
	_ns3__SetControlMode *ns3__SetControlMode;	/* optional element of type ns3:SetControlMode */
public:
	int soap_type() const { return 179; } /* = unique id SOAP_TYPE_RobotData___ns1__SetControlMode */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetControlMode
#define SOAP_TYPE_RobotData___ns1__GetControlMode (183)
/* Operation wrapper: */
struct __ns1__GetControlMode
{
public:
	_ns3__GetControlMode *ns3__GetControlMode;	/* optional element of type ns3:GetControlMode */
public:
	int soap_type() const { return 183; } /* = unique id SOAP_TYPE_RobotData___ns1__GetControlMode */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__RobotSpeedControl
#define SOAP_TYPE_RobotData___ns1__RobotSpeedControl (187)
/* Operation wrapper: */
struct __ns1__RobotSpeedControl
{
public:
	_ns3__RobotSpeedControl *ns3__RobotSpeedControl;	/* optional element of type ns3:RobotSpeedControl */
public:
	int soap_type() const { return 187; } /* = unique id SOAP_TYPE_RobotData___ns1__RobotSpeedControl */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__RobotYuntaiControl
#define SOAP_TYPE_RobotData___ns1__RobotYuntaiControl (191)
/* Operation wrapper: */
struct __ns1__RobotYuntaiControl
{
public:
	_ns3__RobotYuntaiControl *ns3__RobotYuntaiControl;	/* optional element of type ns3:RobotYuntaiControl */
public:
	int soap_type() const { return 191; } /* = unique id SOAP_TYPE_RobotData___ns1__RobotYuntaiControl */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__RobotCameraControl
#define SOAP_TYPE_RobotData___ns1__RobotCameraControl (195)
/* Operation wrapper: */
struct __ns1__RobotCameraControl
{
public:
	_ns3__RobotCameraControl *ns3__RobotCameraControl;	/* optional element of type ns3:RobotCameraControl */
public:
	int soap_type() const { return 195; } /* = unique id SOAP_TYPE_RobotData___ns1__RobotCameraControl */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__RobotLightControl
#define SOAP_TYPE_RobotData___ns1__RobotLightControl (199)
/* Operation wrapper: */
struct __ns1__RobotLightControl
{
public:
	_ns3__RobotLightControl *ns3__RobotLightControl;	/* optional element of type ns3:RobotLightControl */
public:
	int soap_type() const { return 199; } /* = unique id SOAP_TYPE_RobotData___ns1__RobotLightControl */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__RobotWiperControl
#define SOAP_TYPE_RobotData___ns1__RobotWiperControl (203)
/* Operation wrapper: */
struct __ns1__RobotWiperControl
{
public:
	_ns3__RobotWiperControl *ns3__RobotWiperControl;	/* optional element of type ns3:RobotWiperControl */
public:
	int soap_type() const { return 203; } /* = unique id SOAP_TYPE_RobotData___ns1__RobotWiperControl */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__RobotFlirControl
#define SOAP_TYPE_RobotData___ns1__RobotFlirControl (207)
/* Operation wrapper: */
struct __ns1__RobotFlirControl
{
public:
	_ns3__RobotFlirControl *ns3__RobotFlirControl;	/* optional element of type ns3:RobotFlirControl */
public:
	int soap_type() const { return 207; } /* = unique id SOAP_TYPE_RobotData___ns1__RobotFlirControl */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__RobotLifterControl
#define SOAP_TYPE_RobotData___ns1__RobotLifterControl (211)
/* Operation wrapper: */
struct __ns1__RobotLifterControl
{
public:
	_ns3__RobotLifterControl *ns3__RobotLifterControl;	/* optional element of type ns3:RobotLifterControl */
public:
	int soap_type() const { return 211; } /* = unique id SOAP_TYPE_RobotData___ns1__RobotLifterControl */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__RobotPdControl
#define SOAP_TYPE_RobotData___ns1__RobotPdControl (215)
/* Operation wrapper: */
struct __ns1__RobotPdControl
{
public:
	_ns3__RobotPdControl *ns3__RobotPdControl;	/* optional element of type ns3:RobotPdControl */
public:
	int soap_type() const { return 215; } /* = unique id SOAP_TYPE_RobotData___ns1__RobotPdControl */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotBatteryInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotBatteryInfo (219)
/* Operation wrapper: */
struct __ns1__GetRobotBatteryInfo
{
public:
	_ns3__GetRobotBatteryInfo *ns3__GetRobotBatteryInfo;	/* optional element of type ns3:GetRobotBatteryInfo */
public:
	int soap_type() const { return 219; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotBatteryInfo */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotSpeedInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotSpeedInfo (223)
/* Operation wrapper: */
struct __ns1__GetRobotSpeedInfo
{
public:
	_ns3__GetRobotSpeedInfo *ns3__GetRobotSpeedInfo;	/* optional element of type ns3:GetRobotSpeedInfo */
public:
	int soap_type() const { return 223; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotSpeedInfo */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotTaskState
#define SOAP_TYPE_RobotData___ns1__GetRobotTaskState (227)
/* Operation wrapper: */
struct __ns1__GetRobotTaskState
{
public:
	_ns3__GetRobotTaskState *ns3__GetRobotTaskState;	/* optional element of type ns3:GetRobotTaskState */
public:
	int soap_type() const { return 227; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotTaskState */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotPosInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotPosInfo (231)
/* Operation wrapper: */
struct __ns1__GetRobotPosInfo
{
public:
	_ns3__GetRobotPosInfo *ns3__GetRobotPosInfo;	/* optional element of type ns3:GetRobotPosInfo */
public:
	int soap_type() const { return 231; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotPosInfo */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotYunTaiInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotYunTaiInfo (235)
/* Operation wrapper: */
struct __ns1__GetRobotYunTaiInfo
{
public:
	_ns3__GetRobotYunTaiInfo *ns3__GetRobotYunTaiInfo;	/* optional element of type ns3:GetRobotYunTaiInfo */
public:
	int soap_type() const { return 235; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotYunTaiInfo */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotMileageInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotMileageInfo (239)
/* Operation wrapper: */
struct __ns1__GetRobotMileageInfo
{
public:
	_ns3__GetRobotMileageInfo *ns3__GetRobotMileageInfo;	/* optional element of type ns3:GetRobotMileageInfo */
public:
	int soap_type() const { return 239; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotMileageInfo */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotGasInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotGasInfo (243)
/* Operation wrapper: */
struct __ns1__GetRobotGasInfo
{
public:
	_ns3__GetRobotGasInfo *ns3__GetRobotGasInfo;	/* optional element of type ns3:GetRobotGasInfo */
public:
	int soap_type() const { return 243; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotGasInfo */
};
#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotAlarmInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotAlarmInfo (247)
/* Operation wrapper: */
struct __ns1__GetRobotAlarmInfo
{
public:
	_ns3__GetRobotAlarmInfo *ns3__GetRobotAlarmInfo;	/* optional element of type ns3:GetRobotAlarmInfo */
public:
	int soap_type() const { return 247; } /* = unique id SOAP_TYPE_RobotData___ns1__GetRobotAlarmInfo */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Header
#define SOAP_TYPE_RobotData_SOAP_ENV__Header (248)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 248; } /* = unique id SOAP_TYPE_RobotData_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Code
#define SOAP_TYPE_RobotData_SOAP_ENV__Code (249)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 249; } /* = unique id SOAP_TYPE_RobotData_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Detail
#define SOAP_TYPE_RobotData_SOAP_ENV__Detail (251)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 251; } /* = unique id SOAP_TYPE_RobotData_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Reason
#define SOAP_TYPE_RobotData_SOAP_ENV__Reason (254)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 254; } /* = unique id SOAP_TYPE_RobotData_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Fault
#define SOAP_TYPE_RobotData_SOAP_ENV__Fault (255)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 255; } /* = unique id SOAP_TYPE_RobotData_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_RobotData__QName
#define SOAP_TYPE_RobotData__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_RobotData__XML
#define SOAP_TYPE_RobotData__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotConnect(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotConnect *ns3__GetRobotConnect, _ns3__GetRobotConnectResponse *ns3__GetRobotConnectResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotInfo *ns3__GetRobotInfo, _ns3__GetRobotInfoResponse *ns3__GetRobotInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotTime *ns3__GetRobotTime, _ns3__GetRobotTimeResponse *ns3__GetRobotTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetRobotTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__SetRobotTime *ns3__SetRobotTime, _ns3__SetRobotTimeResponse *ns3__SetRobotTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetCurrentRobot(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__SetCurrentRobot *ns3__SetCurrentRobot, _ns3__SetCurrentRobotResponse *ns3__SetCurrentRobotResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__ReleaseCurrentRobot(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__ReleaseCurrentRobot *ns3__ReleaseCurrentRobot, _ns3__ReleaseCurrentRobotResponse *ns3__ReleaseCurrentRobotResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__SetControlMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__SetControlMode *ns3__SetControlMode, _ns3__SetControlModeResponse *ns3__SetControlModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetControlMode(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetControlMode *ns3__GetControlMode, _ns3__GetControlModeResponse *ns3__GetControlModeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RobotSpeedControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RobotSpeedControl *ns3__RobotSpeedControl, _ns3__RobotSpeedControlResponse *ns3__RobotSpeedControlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RobotYuntaiControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RobotYuntaiControl *ns3__RobotYuntaiControl, _ns3__RobotYuntaiControlResponse *ns3__RobotYuntaiControlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RobotCameraControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RobotCameraControl *ns3__RobotCameraControl, _ns3__RobotCameraControlResponse *ns3__RobotCameraControlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RobotLightControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RobotLightControl *ns3__RobotLightControl, _ns3__RobotLightControlResponse *ns3__RobotLightControlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RobotWiperControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RobotWiperControl *ns3__RobotWiperControl, _ns3__RobotWiperControlResponse *ns3__RobotWiperControlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RobotFlirControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RobotFlirControl *ns3__RobotFlirControl, _ns3__RobotFlirControlResponse *ns3__RobotFlirControlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RobotLifterControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RobotLifterControl *ns3__RobotLifterControl, _ns3__RobotLifterControlResponse *ns3__RobotLifterControlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__RobotPdControl(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__RobotPdControl *ns3__RobotPdControl, _ns3__RobotPdControlResponse *ns3__RobotPdControlResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotBatteryInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotBatteryInfo *ns3__GetRobotBatteryInfo, _ns3__GetRobotBatteryInfoResponse *ns3__GetRobotBatteryInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotSpeedInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotSpeedInfo *ns3__GetRobotSpeedInfo, _ns3__GetRobotSpeedInfoResponse *ns3__GetRobotSpeedInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotTaskState(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotTaskState *ns3__GetRobotTaskState, _ns3__GetRobotTaskStateResponse *ns3__GetRobotTaskStateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotPosInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotPosInfo *ns3__GetRobotPosInfo, _ns3__GetRobotPosInfoResponse *ns3__GetRobotPosInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotYunTaiInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotYunTaiInfo *ns3__GetRobotYunTaiInfo, _ns3__GetRobotYunTaiInfoResponse *ns3__GetRobotYunTaiInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotMileageInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotMileageInfo *ns3__GetRobotMileageInfo, _ns3__GetRobotMileageInfoResponse *ns3__GetRobotMileageInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotGasInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotGasInfo *ns3__GetRobotGasInfo, _ns3__GetRobotGasInfoResponse *ns3__GetRobotGasInfoResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetRobotAlarmInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetRobotAlarmInfo *ns3__GetRobotAlarmInfo, _ns3__GetRobotAlarmInfoResponse *ns3__GetRobotAlarmInfoResponse);

} // namespace RobotData


#endif

/* End of RobotDataStub.h */
