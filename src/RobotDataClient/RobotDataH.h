/* RobotDataH.h
   Generated by gSOAP 2.8.16 from .\robotdata.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef RobotDataH_H
#define RobotDataH_H
#include "RobotDataStub.h"

namespace RobotData {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 RobotData_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 RobotData_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 RobotData_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_byte
#define SOAP_TYPE_RobotData_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_byte(soap, data),0) || RobotData::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_int
#define SOAP_TYPE_RobotData_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_int(soap, data),0) || RobotData::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_double
#define SOAP_TYPE_RobotData_double (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_double(soap, data),0) || RobotData::soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_bool
#define SOAP_TYPE_RobotData_bool (102)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_bool(soap, data),0) || RobotData::soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_ns3__ControlTaskType
#define SOAP_TYPE_RobotData_ns3__ControlTaskType (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__ControlTaskType(struct soap*, enum ns3__ControlTaskType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ControlTaskType(struct soap*, const char*, int, const enum ns3__ControlTaskType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__ControlTaskType2s(struct soap*, enum ns3__ControlTaskType);
SOAP_FMAC3 enum ns3__ControlTaskType * SOAP_FMAC4 soap_in_ns3__ControlTaskType(struct soap*, const char*, enum ns3__ControlTaskType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__ControlTaskType(struct soap*, const char*, enum ns3__ControlTaskType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__ControlTaskType(struct soap*, const enum ns3__ControlTaskType *, const char*, const char*);

#ifndef soap_write_ns3__ControlTaskType
#define soap_write_ns3__ControlTaskType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_ns3__ControlTaskType(soap, data),0) || RobotData::soap_put_ns3__ControlTaskType(soap, data, "ns3:ControlTaskType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns3__ControlTaskType * SOAP_FMAC4 soap_get_ns3__ControlTaskType(struct soap*, enum ns3__ControlTaskType *, const char*, const char*);

#ifndef soap_read_ns3__ControlTaskType
#define soap_read_ns3__ControlTaskType(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__ControlTaskType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_ns3__PdControlType
#define SOAP_TYPE_RobotData_ns3__PdControlType (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__PdControlType(struct soap*, enum ns3__PdControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PdControlType(struct soap*, const char*, int, const enum ns3__PdControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__PdControlType2s(struct soap*, enum ns3__PdControlType);
SOAP_FMAC3 enum ns3__PdControlType * SOAP_FMAC4 soap_in_ns3__PdControlType(struct soap*, const char*, enum ns3__PdControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__PdControlType(struct soap*, const char*, enum ns3__PdControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__PdControlType(struct soap*, const enum ns3__PdControlType *, const char*, const char*);

#ifndef soap_write_ns3__PdControlType
#define soap_write_ns3__PdControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_ns3__PdControlType(soap, data),0) || RobotData::soap_put_ns3__PdControlType(soap, data, "ns3:PdControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns3__PdControlType * SOAP_FMAC4 soap_get_ns3__PdControlType(struct soap*, enum ns3__PdControlType *, const char*, const char*);

#ifndef soap_read_ns3__PdControlType
#define soap_read_ns3__PdControlType(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__PdControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_ns3__LifterControlType
#define SOAP_TYPE_RobotData_ns3__LifterControlType (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__LifterControlType(struct soap*, enum ns3__LifterControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__LifterControlType(struct soap*, const char*, int, const enum ns3__LifterControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__LifterControlType2s(struct soap*, enum ns3__LifterControlType);
SOAP_FMAC3 enum ns3__LifterControlType * SOAP_FMAC4 soap_in_ns3__LifterControlType(struct soap*, const char*, enum ns3__LifterControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__LifterControlType(struct soap*, const char*, enum ns3__LifterControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__LifterControlType(struct soap*, const enum ns3__LifterControlType *, const char*, const char*);

#ifndef soap_write_ns3__LifterControlType
#define soap_write_ns3__LifterControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_ns3__LifterControlType(soap, data),0) || RobotData::soap_put_ns3__LifterControlType(soap, data, "ns3:LifterControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns3__LifterControlType * SOAP_FMAC4 soap_get_ns3__LifterControlType(struct soap*, enum ns3__LifterControlType *, const char*, const char*);

#ifndef soap_read_ns3__LifterControlType
#define soap_read_ns3__LifterControlType(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__LifterControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_ns3__FilrControlType
#define SOAP_TYPE_RobotData_ns3__FilrControlType (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__FilrControlType(struct soap*, enum ns3__FilrControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FilrControlType(struct soap*, const char*, int, const enum ns3__FilrControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__FilrControlType2s(struct soap*, enum ns3__FilrControlType);
SOAP_FMAC3 enum ns3__FilrControlType * SOAP_FMAC4 soap_in_ns3__FilrControlType(struct soap*, const char*, enum ns3__FilrControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__FilrControlType(struct soap*, const char*, enum ns3__FilrControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__FilrControlType(struct soap*, const enum ns3__FilrControlType *, const char*, const char*);

#ifndef soap_write_ns3__FilrControlType
#define soap_write_ns3__FilrControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_ns3__FilrControlType(soap, data),0) || RobotData::soap_put_ns3__FilrControlType(soap, data, "ns3:FilrControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns3__FilrControlType * SOAP_FMAC4 soap_get_ns3__FilrControlType(struct soap*, enum ns3__FilrControlType *, const char*, const char*);

#ifndef soap_read_ns3__FilrControlType
#define soap_read_ns3__FilrControlType(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__FilrControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_ns3__WiperControlType
#define SOAP_TYPE_RobotData_ns3__WiperControlType (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__WiperControlType(struct soap*, enum ns3__WiperControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__WiperControlType(struct soap*, const char*, int, const enum ns3__WiperControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__WiperControlType2s(struct soap*, enum ns3__WiperControlType);
SOAP_FMAC3 enum ns3__WiperControlType * SOAP_FMAC4 soap_in_ns3__WiperControlType(struct soap*, const char*, enum ns3__WiperControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__WiperControlType(struct soap*, const char*, enum ns3__WiperControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__WiperControlType(struct soap*, const enum ns3__WiperControlType *, const char*, const char*);

#ifndef soap_write_ns3__WiperControlType
#define soap_write_ns3__WiperControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_ns3__WiperControlType(soap, data),0) || RobotData::soap_put_ns3__WiperControlType(soap, data, "ns3:WiperControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns3__WiperControlType * SOAP_FMAC4 soap_get_ns3__WiperControlType(struct soap*, enum ns3__WiperControlType *, const char*, const char*);

#ifndef soap_read_ns3__WiperControlType
#define soap_read_ns3__WiperControlType(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__WiperControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_ns3__LightControlType
#define SOAP_TYPE_RobotData_ns3__LightControlType (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__LightControlType(struct soap*, enum ns3__LightControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__LightControlType(struct soap*, const char*, int, const enum ns3__LightControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__LightControlType2s(struct soap*, enum ns3__LightControlType);
SOAP_FMAC3 enum ns3__LightControlType * SOAP_FMAC4 soap_in_ns3__LightControlType(struct soap*, const char*, enum ns3__LightControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__LightControlType(struct soap*, const char*, enum ns3__LightControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__LightControlType(struct soap*, const enum ns3__LightControlType *, const char*, const char*);

#ifndef soap_write_ns3__LightControlType
#define soap_write_ns3__LightControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_ns3__LightControlType(soap, data),0) || RobotData::soap_put_ns3__LightControlType(soap, data, "ns3:LightControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns3__LightControlType * SOAP_FMAC4 soap_get_ns3__LightControlType(struct soap*, enum ns3__LightControlType *, const char*, const char*);

#ifndef soap_read_ns3__LightControlType
#define soap_read_ns3__LightControlType(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__LightControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_ns3__CameraControlType
#define SOAP_TYPE_RobotData_ns3__CameraControlType (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__CameraControlType(struct soap*, enum ns3__CameraControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CameraControlType(struct soap*, const char*, int, const enum ns3__CameraControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__CameraControlType2s(struct soap*, enum ns3__CameraControlType);
SOAP_FMAC3 enum ns3__CameraControlType * SOAP_FMAC4 soap_in_ns3__CameraControlType(struct soap*, const char*, enum ns3__CameraControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__CameraControlType(struct soap*, const char*, enum ns3__CameraControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__CameraControlType(struct soap*, const enum ns3__CameraControlType *, const char*, const char*);

#ifndef soap_write_ns3__CameraControlType
#define soap_write_ns3__CameraControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_ns3__CameraControlType(soap, data),0) || RobotData::soap_put_ns3__CameraControlType(soap, data, "ns3:CameraControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns3__CameraControlType * SOAP_FMAC4 soap_get_ns3__CameraControlType(struct soap*, enum ns3__CameraControlType *, const char*, const char*);

#ifndef soap_read_ns3__CameraControlType
#define soap_read_ns3__CameraControlType(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__CameraControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_ns3__YuntaiControlType
#define SOAP_TYPE_RobotData_ns3__YuntaiControlType (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__YuntaiControlType(struct soap*, enum ns3__YuntaiControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__YuntaiControlType(struct soap*, const char*, int, const enum ns3__YuntaiControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__YuntaiControlType2s(struct soap*, enum ns3__YuntaiControlType);
SOAP_FMAC3 enum ns3__YuntaiControlType * SOAP_FMAC4 soap_in_ns3__YuntaiControlType(struct soap*, const char*, enum ns3__YuntaiControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__YuntaiControlType(struct soap*, const char*, enum ns3__YuntaiControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__YuntaiControlType(struct soap*, const enum ns3__YuntaiControlType *, const char*, const char*);

#ifndef soap_write_ns3__YuntaiControlType
#define soap_write_ns3__YuntaiControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_ns3__YuntaiControlType(soap, data),0) || RobotData::soap_put_ns3__YuntaiControlType(soap, data, "ns3:YuntaiControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns3__YuntaiControlType * SOAP_FMAC4 soap_get_ns3__YuntaiControlType(struct soap*, enum ns3__YuntaiControlType *, const char*, const char*);

#ifndef soap_read_ns3__YuntaiControlType
#define soap_read_ns3__YuntaiControlType(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__YuntaiControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_std__string
#define SOAP_TYPE_RobotData_std__string (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfoResponse (92)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotAlarmInfoResponse(struct soap*, const char*, int, const _ns3__GetRobotAlarmInfoResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotAlarmInfoResponse * SOAP_FMAC4 soap_in__ns3__GetRobotAlarmInfoResponse(struct soap*, const char*, _ns3__GetRobotAlarmInfoResponse *, const char*);

#ifndef soap_write__ns3__GetRobotAlarmInfoResponse
#define soap_write__ns3__GetRobotAlarmInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotAlarmInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotAlarmInfoResponse * SOAP_FMAC4 soap_get__ns3__GetRobotAlarmInfoResponse(struct soap*, _ns3__GetRobotAlarmInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotAlarmInfoResponse
#define soap_read__ns3__GetRobotAlarmInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotAlarmInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotAlarmInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotAlarmInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotAlarmInfoResponse * soap_new__ns3__GetRobotAlarmInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotAlarmInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotAlarmInfoResponse * soap_new_req__ns3__GetRobotAlarmInfoResponse(struct soap *soap, ns3__RobotAlarmInfos *Data) { _ns3__GetRobotAlarmInfoResponse *_p = soap_instantiate__ns3__GetRobotAlarmInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotAlarmInfoResponse::Data = Data; } return _p; }

inline _ns3__GetRobotAlarmInfoResponse * soap_new_set__ns3__GetRobotAlarmInfoResponse(struct soap *soap, ns3__RobotAlarmInfos *Data) { _ns3__GetRobotAlarmInfoResponse *_p = soap_instantiate__ns3__GetRobotAlarmInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotAlarmInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotAlarmInfoResponse(struct soap *soap, _ns3__GetRobotAlarmInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotAlarmInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotAlarmInfo (91)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotAlarmInfo(struct soap*, const char*, int, const _ns3__GetRobotAlarmInfo *, const char*);
SOAP_FMAC3 _ns3__GetRobotAlarmInfo * SOAP_FMAC4 soap_in__ns3__GetRobotAlarmInfo(struct soap*, const char*, _ns3__GetRobotAlarmInfo *, const char*);

#ifndef soap_write__ns3__GetRobotAlarmInfo
#define soap_write__ns3__GetRobotAlarmInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotAlarmInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotAlarmInfo * SOAP_FMAC4 soap_get__ns3__GetRobotAlarmInfo(struct soap*, _ns3__GetRobotAlarmInfo *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotAlarmInfo
#define soap_read__ns3__GetRobotAlarmInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotAlarmInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotAlarmInfo * SOAP_FMAC2 soap_instantiate__ns3__GetRobotAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotAlarmInfo * soap_new__ns3__GetRobotAlarmInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotAlarmInfo(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotAlarmInfo * soap_new_req__ns3__GetRobotAlarmInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotAlarmInfo *_p = soap_instantiate__ns3__GetRobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotAlarmInfo::NeedAll = NeedAll; } return _p; }

inline _ns3__GetRobotAlarmInfo * soap_new_set__ns3__GetRobotAlarmInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotAlarmInfo *_p = soap_instantiate__ns3__GetRobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotAlarmInfo::NeedAll = NeedAll; } return _p; }

inline void soap_delete__ns3__GetRobotAlarmInfo(struct soap *soap, _ns3__GetRobotAlarmInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotAlarmInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotGasInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotGasInfoResponse (90)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotGasInfoResponse(struct soap*, const char*, int, const _ns3__GetRobotGasInfoResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotGasInfoResponse * SOAP_FMAC4 soap_in__ns3__GetRobotGasInfoResponse(struct soap*, const char*, _ns3__GetRobotGasInfoResponse *, const char*);

#ifndef soap_write__ns3__GetRobotGasInfoResponse
#define soap_write__ns3__GetRobotGasInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotGasInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotGasInfoResponse * SOAP_FMAC4 soap_get__ns3__GetRobotGasInfoResponse(struct soap*, _ns3__GetRobotGasInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotGasInfoResponse
#define soap_read__ns3__GetRobotGasInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotGasInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotGasInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotGasInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotGasInfoResponse * soap_new__ns3__GetRobotGasInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotGasInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotGasInfoResponse * soap_new_req__ns3__GetRobotGasInfoResponse(struct soap *soap, ns3__RobotGasInfos *Data) { _ns3__GetRobotGasInfoResponse *_p = soap_instantiate__ns3__GetRobotGasInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotGasInfoResponse::Data = Data; } return _p; }

inline _ns3__GetRobotGasInfoResponse * soap_new_set__ns3__GetRobotGasInfoResponse(struct soap *soap, ns3__RobotGasInfos *Data) { _ns3__GetRobotGasInfoResponse *_p = soap_instantiate__ns3__GetRobotGasInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotGasInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotGasInfoResponse(struct soap *soap, _ns3__GetRobotGasInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotGasInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotGasInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotGasInfo (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotGasInfo(struct soap*, const char*, int, const _ns3__GetRobotGasInfo *, const char*);
SOAP_FMAC3 _ns3__GetRobotGasInfo * SOAP_FMAC4 soap_in__ns3__GetRobotGasInfo(struct soap*, const char*, _ns3__GetRobotGasInfo *, const char*);

#ifndef soap_write__ns3__GetRobotGasInfo
#define soap_write__ns3__GetRobotGasInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotGasInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotGasInfo * SOAP_FMAC4 soap_get__ns3__GetRobotGasInfo(struct soap*, _ns3__GetRobotGasInfo *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotGasInfo
#define soap_read__ns3__GetRobotGasInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotGasInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotGasInfo * SOAP_FMAC2 soap_instantiate__ns3__GetRobotGasInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotGasInfo * soap_new__ns3__GetRobotGasInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotGasInfo(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotGasInfo * soap_new_req__ns3__GetRobotGasInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotGasInfo *_p = soap_instantiate__ns3__GetRobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotGasInfo::NeedAll = NeedAll; } return _p; }

inline _ns3__GetRobotGasInfo * soap_new_set__ns3__GetRobotGasInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotGasInfo *_p = soap_instantiate__ns3__GetRobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotGasInfo::NeedAll = NeedAll; } return _p; }

inline void soap_delete__ns3__GetRobotGasInfo(struct soap *soap, _ns3__GetRobotGasInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotGasInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotMileageInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotMileageInfoResponse (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotMileageInfoResponse(struct soap*, const char*, int, const _ns3__GetRobotMileageInfoResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotMileageInfoResponse * SOAP_FMAC4 soap_in__ns3__GetRobotMileageInfoResponse(struct soap*, const char*, _ns3__GetRobotMileageInfoResponse *, const char*);

#ifndef soap_write__ns3__GetRobotMileageInfoResponse
#define soap_write__ns3__GetRobotMileageInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotMileageInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotMileageInfoResponse * SOAP_FMAC4 soap_get__ns3__GetRobotMileageInfoResponse(struct soap*, _ns3__GetRobotMileageInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotMileageInfoResponse
#define soap_read__ns3__GetRobotMileageInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotMileageInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotMileageInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotMileageInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotMileageInfoResponse * soap_new__ns3__GetRobotMileageInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotMileageInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotMileageInfoResponse * soap_new_req__ns3__GetRobotMileageInfoResponse(struct soap *soap, ns3__RobotMileageInfos *Data) { _ns3__GetRobotMileageInfoResponse *_p = soap_instantiate__ns3__GetRobotMileageInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotMileageInfoResponse::Data = Data; } return _p; }

inline _ns3__GetRobotMileageInfoResponse * soap_new_set__ns3__GetRobotMileageInfoResponse(struct soap *soap, ns3__RobotMileageInfos *Data) { _ns3__GetRobotMileageInfoResponse *_p = soap_instantiate__ns3__GetRobotMileageInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotMileageInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotMileageInfoResponse(struct soap *soap, _ns3__GetRobotMileageInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotMileageInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotMileageInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotMileageInfo (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotMileageInfo(struct soap*, const char*, int, const _ns3__GetRobotMileageInfo *, const char*);
SOAP_FMAC3 _ns3__GetRobotMileageInfo * SOAP_FMAC4 soap_in__ns3__GetRobotMileageInfo(struct soap*, const char*, _ns3__GetRobotMileageInfo *, const char*);

#ifndef soap_write__ns3__GetRobotMileageInfo
#define soap_write__ns3__GetRobotMileageInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotMileageInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotMileageInfo * SOAP_FMAC4 soap_get__ns3__GetRobotMileageInfo(struct soap*, _ns3__GetRobotMileageInfo *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotMileageInfo
#define soap_read__ns3__GetRobotMileageInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotMileageInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotMileageInfo * SOAP_FMAC2 soap_instantiate__ns3__GetRobotMileageInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotMileageInfo * soap_new__ns3__GetRobotMileageInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotMileageInfo(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotMileageInfo * soap_new_req__ns3__GetRobotMileageInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotMileageInfo *_p = soap_instantiate__ns3__GetRobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotMileageInfo::NeedAll = NeedAll; } return _p; }

inline _ns3__GetRobotMileageInfo * soap_new_set__ns3__GetRobotMileageInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotMileageInfo *_p = soap_instantiate__ns3__GetRobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotMileageInfo::NeedAll = NeedAll; } return _p; }

inline void soap_delete__ns3__GetRobotMileageInfo(struct soap *soap, _ns3__GetRobotMileageInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotMileageInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfoResponse (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotYunTaiInfoResponse(struct soap*, const char*, int, const _ns3__GetRobotYunTaiInfoResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotYunTaiInfoResponse * SOAP_FMAC4 soap_in__ns3__GetRobotYunTaiInfoResponse(struct soap*, const char*, _ns3__GetRobotYunTaiInfoResponse *, const char*);

#ifndef soap_write__ns3__GetRobotYunTaiInfoResponse
#define soap_write__ns3__GetRobotYunTaiInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotYunTaiInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotYunTaiInfoResponse * SOAP_FMAC4 soap_get__ns3__GetRobotYunTaiInfoResponse(struct soap*, _ns3__GetRobotYunTaiInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotYunTaiInfoResponse
#define soap_read__ns3__GetRobotYunTaiInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotYunTaiInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotYunTaiInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotYunTaiInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotYunTaiInfoResponse * soap_new__ns3__GetRobotYunTaiInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotYunTaiInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotYunTaiInfoResponse * soap_new_req__ns3__GetRobotYunTaiInfoResponse(struct soap *soap, ns3__RobotYunTaiInfos *Data) { _ns3__GetRobotYunTaiInfoResponse *_p = soap_instantiate__ns3__GetRobotYunTaiInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotYunTaiInfoResponse::Data = Data; } return _p; }

inline _ns3__GetRobotYunTaiInfoResponse * soap_new_set__ns3__GetRobotYunTaiInfoResponse(struct soap *soap, ns3__RobotYunTaiInfos *Data) { _ns3__GetRobotYunTaiInfoResponse *_p = soap_instantiate__ns3__GetRobotYunTaiInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotYunTaiInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotYunTaiInfoResponse(struct soap *soap, _ns3__GetRobotYunTaiInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotYunTaiInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotYunTaiInfo (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotYunTaiInfo(struct soap*, const char*, int, const _ns3__GetRobotYunTaiInfo *, const char*);
SOAP_FMAC3 _ns3__GetRobotYunTaiInfo * SOAP_FMAC4 soap_in__ns3__GetRobotYunTaiInfo(struct soap*, const char*, _ns3__GetRobotYunTaiInfo *, const char*);

#ifndef soap_write__ns3__GetRobotYunTaiInfo
#define soap_write__ns3__GetRobotYunTaiInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotYunTaiInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotYunTaiInfo * SOAP_FMAC4 soap_get__ns3__GetRobotYunTaiInfo(struct soap*, _ns3__GetRobotYunTaiInfo *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotYunTaiInfo
#define soap_read__ns3__GetRobotYunTaiInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotYunTaiInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotYunTaiInfo * SOAP_FMAC2 soap_instantiate__ns3__GetRobotYunTaiInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotYunTaiInfo * soap_new__ns3__GetRobotYunTaiInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotYunTaiInfo(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotYunTaiInfo * soap_new_req__ns3__GetRobotYunTaiInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotYunTaiInfo *_p = soap_instantiate__ns3__GetRobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotYunTaiInfo::NeedAll = NeedAll; } return _p; }

inline _ns3__GetRobotYunTaiInfo * soap_new_set__ns3__GetRobotYunTaiInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotYunTaiInfo *_p = soap_instantiate__ns3__GetRobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotYunTaiInfo::NeedAll = NeedAll; } return _p; }

inline void soap_delete__ns3__GetRobotYunTaiInfo(struct soap *soap, _ns3__GetRobotYunTaiInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotYunTaiInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotPosInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotPosInfoResponse (84)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotPosInfoResponse(struct soap*, const char*, int, const _ns3__GetRobotPosInfoResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotPosInfoResponse * SOAP_FMAC4 soap_in__ns3__GetRobotPosInfoResponse(struct soap*, const char*, _ns3__GetRobotPosInfoResponse *, const char*);

#ifndef soap_write__ns3__GetRobotPosInfoResponse
#define soap_write__ns3__GetRobotPosInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotPosInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotPosInfoResponse * SOAP_FMAC4 soap_get__ns3__GetRobotPosInfoResponse(struct soap*, _ns3__GetRobotPosInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotPosInfoResponse
#define soap_read__ns3__GetRobotPosInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotPosInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotPosInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotPosInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotPosInfoResponse * soap_new__ns3__GetRobotPosInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotPosInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotPosInfoResponse * soap_new_req__ns3__GetRobotPosInfoResponse(struct soap *soap, ns3__RobotPosInfos *Data) { _ns3__GetRobotPosInfoResponse *_p = soap_instantiate__ns3__GetRobotPosInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotPosInfoResponse::Data = Data; } return _p; }

inline _ns3__GetRobotPosInfoResponse * soap_new_set__ns3__GetRobotPosInfoResponse(struct soap *soap, ns3__RobotPosInfos *Data) { _ns3__GetRobotPosInfoResponse *_p = soap_instantiate__ns3__GetRobotPosInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotPosInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotPosInfoResponse(struct soap *soap, _ns3__GetRobotPosInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotPosInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotPosInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotPosInfo (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotPosInfo(struct soap*, const char*, int, const _ns3__GetRobotPosInfo *, const char*);
SOAP_FMAC3 _ns3__GetRobotPosInfo * SOAP_FMAC4 soap_in__ns3__GetRobotPosInfo(struct soap*, const char*, _ns3__GetRobotPosInfo *, const char*);

#ifndef soap_write__ns3__GetRobotPosInfo
#define soap_write__ns3__GetRobotPosInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotPosInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotPosInfo * SOAP_FMAC4 soap_get__ns3__GetRobotPosInfo(struct soap*, _ns3__GetRobotPosInfo *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotPosInfo
#define soap_read__ns3__GetRobotPosInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotPosInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotPosInfo * SOAP_FMAC2 soap_instantiate__ns3__GetRobotPosInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotPosInfo * soap_new__ns3__GetRobotPosInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotPosInfo(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotPosInfo * soap_new_req__ns3__GetRobotPosInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotPosInfo *_p = soap_instantiate__ns3__GetRobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotPosInfo::NeedAll = NeedAll; } return _p; }

inline _ns3__GetRobotPosInfo * soap_new_set__ns3__GetRobotPosInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotPosInfo *_p = soap_instantiate__ns3__GetRobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotPosInfo::NeedAll = NeedAll; } return _p; }

inline void soap_delete__ns3__GetRobotPosInfo(struct soap *soap, _ns3__GetRobotPosInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotPosInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotTaskStateResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotTaskStateResponse (82)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotTaskStateResponse(struct soap*, const char*, int, const _ns3__GetRobotTaskStateResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotTaskStateResponse * SOAP_FMAC4 soap_in__ns3__GetRobotTaskStateResponse(struct soap*, const char*, _ns3__GetRobotTaskStateResponse *, const char*);

#ifndef soap_write__ns3__GetRobotTaskStateResponse
#define soap_write__ns3__GetRobotTaskStateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotTaskStateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotTaskStateResponse * SOAP_FMAC4 soap_get__ns3__GetRobotTaskStateResponse(struct soap*, _ns3__GetRobotTaskStateResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotTaskStateResponse
#define soap_read__ns3__GetRobotTaskStateResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotTaskStateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotTaskStateResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotTaskStateResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotTaskStateResponse * soap_new__ns3__GetRobotTaskStateResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotTaskStateResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotTaskStateResponse * soap_new_req__ns3__GetRobotTaskStateResponse(struct soap *soap, ns3__RobotTaskStates *Data) { _ns3__GetRobotTaskStateResponse *_p = soap_instantiate__ns3__GetRobotTaskStateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotTaskStateResponse::Data = Data; } return _p; }

inline _ns3__GetRobotTaskStateResponse * soap_new_set__ns3__GetRobotTaskStateResponse(struct soap *soap, ns3__RobotTaskStates *Data) { _ns3__GetRobotTaskStateResponse *_p = soap_instantiate__ns3__GetRobotTaskStateResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotTaskStateResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotTaskStateResponse(struct soap *soap, _ns3__GetRobotTaskStateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotTaskStateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotTaskState
#define SOAP_TYPE_RobotData__ns3__GetRobotTaskState (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotTaskState(struct soap*, const char*, int, const _ns3__GetRobotTaskState *, const char*);
SOAP_FMAC3 _ns3__GetRobotTaskState * SOAP_FMAC4 soap_in__ns3__GetRobotTaskState(struct soap*, const char*, _ns3__GetRobotTaskState *, const char*);

#ifndef soap_write__ns3__GetRobotTaskState
#define soap_write__ns3__GetRobotTaskState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotTaskState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotTaskState * SOAP_FMAC4 soap_get__ns3__GetRobotTaskState(struct soap*, _ns3__GetRobotTaskState *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotTaskState
#define soap_read__ns3__GetRobotTaskState(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotTaskState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotTaskState * SOAP_FMAC2 soap_instantiate__ns3__GetRobotTaskState(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotTaskState * soap_new__ns3__GetRobotTaskState(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotTaskState(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotTaskState * soap_new_req__ns3__GetRobotTaskState(struct soap *soap, bool NeedAll) { _ns3__GetRobotTaskState *_p = soap_instantiate__ns3__GetRobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotTaskState::NeedAll = NeedAll; } return _p; }

inline _ns3__GetRobotTaskState * soap_new_set__ns3__GetRobotTaskState(struct soap *soap, bool NeedAll) { _ns3__GetRobotTaskState *_p = soap_instantiate__ns3__GetRobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotTaskState::NeedAll = NeedAll; } return _p; }

inline void soap_delete__ns3__GetRobotTaskState(struct soap *soap, _ns3__GetRobotTaskState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotTaskState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfoResponse (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotSpeedInfoResponse(struct soap*, const char*, int, const _ns3__GetRobotSpeedInfoResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotSpeedInfoResponse * SOAP_FMAC4 soap_in__ns3__GetRobotSpeedInfoResponse(struct soap*, const char*, _ns3__GetRobotSpeedInfoResponse *, const char*);

#ifndef soap_write__ns3__GetRobotSpeedInfoResponse
#define soap_write__ns3__GetRobotSpeedInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotSpeedInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotSpeedInfoResponse * SOAP_FMAC4 soap_get__ns3__GetRobotSpeedInfoResponse(struct soap*, _ns3__GetRobotSpeedInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotSpeedInfoResponse
#define soap_read__ns3__GetRobotSpeedInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotSpeedInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotSpeedInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotSpeedInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotSpeedInfoResponse * soap_new__ns3__GetRobotSpeedInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotSpeedInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotSpeedInfoResponse * soap_new_req__ns3__GetRobotSpeedInfoResponse(struct soap *soap, ns3__SpeedInfos *Data) { _ns3__GetRobotSpeedInfoResponse *_p = soap_instantiate__ns3__GetRobotSpeedInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotSpeedInfoResponse::Data = Data; } return _p; }

inline _ns3__GetRobotSpeedInfoResponse * soap_new_set__ns3__GetRobotSpeedInfoResponse(struct soap *soap, ns3__SpeedInfos *Data) { _ns3__GetRobotSpeedInfoResponse *_p = soap_instantiate__ns3__GetRobotSpeedInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotSpeedInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotSpeedInfoResponse(struct soap *soap, _ns3__GetRobotSpeedInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotSpeedInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotSpeedInfo (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotSpeedInfo(struct soap*, const char*, int, const _ns3__GetRobotSpeedInfo *, const char*);
SOAP_FMAC3 _ns3__GetRobotSpeedInfo * SOAP_FMAC4 soap_in__ns3__GetRobotSpeedInfo(struct soap*, const char*, _ns3__GetRobotSpeedInfo *, const char*);

#ifndef soap_write__ns3__GetRobotSpeedInfo
#define soap_write__ns3__GetRobotSpeedInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotSpeedInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotSpeedInfo * SOAP_FMAC4 soap_get__ns3__GetRobotSpeedInfo(struct soap*, _ns3__GetRobotSpeedInfo *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotSpeedInfo
#define soap_read__ns3__GetRobotSpeedInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotSpeedInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotSpeedInfo * SOAP_FMAC2 soap_instantiate__ns3__GetRobotSpeedInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotSpeedInfo * soap_new__ns3__GetRobotSpeedInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotSpeedInfo(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotSpeedInfo * soap_new_req__ns3__GetRobotSpeedInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotSpeedInfo *_p = soap_instantiate__ns3__GetRobotSpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotSpeedInfo::NeedAll = NeedAll; } return _p; }

inline _ns3__GetRobotSpeedInfo * soap_new_set__ns3__GetRobotSpeedInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotSpeedInfo *_p = soap_instantiate__ns3__GetRobotSpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotSpeedInfo::NeedAll = NeedAll; } return _p; }

inline void soap_delete__ns3__GetRobotSpeedInfo(struct soap *soap, _ns3__GetRobotSpeedInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotSpeedInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfoResponse (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotBatteryInfoResponse(struct soap*, const char*, int, const _ns3__GetRobotBatteryInfoResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotBatteryInfoResponse * SOAP_FMAC4 soap_in__ns3__GetRobotBatteryInfoResponse(struct soap*, const char*, _ns3__GetRobotBatteryInfoResponse *, const char*);

#ifndef soap_write__ns3__GetRobotBatteryInfoResponse
#define soap_write__ns3__GetRobotBatteryInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotBatteryInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotBatteryInfoResponse * SOAP_FMAC4 soap_get__ns3__GetRobotBatteryInfoResponse(struct soap*, _ns3__GetRobotBatteryInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotBatteryInfoResponse
#define soap_read__ns3__GetRobotBatteryInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotBatteryInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotBatteryInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotBatteryInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotBatteryInfoResponse * soap_new__ns3__GetRobotBatteryInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotBatteryInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotBatteryInfoResponse * soap_new_req__ns3__GetRobotBatteryInfoResponse(struct soap *soap, ns3__BatteryInfos *Data) { _ns3__GetRobotBatteryInfoResponse *_p = soap_instantiate__ns3__GetRobotBatteryInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotBatteryInfoResponse::Data = Data; } return _p; }

inline _ns3__GetRobotBatteryInfoResponse * soap_new_set__ns3__GetRobotBatteryInfoResponse(struct soap *soap, ns3__BatteryInfos *Data) { _ns3__GetRobotBatteryInfoResponse *_p = soap_instantiate__ns3__GetRobotBatteryInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotBatteryInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotBatteryInfoResponse(struct soap *soap, _ns3__GetRobotBatteryInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotBatteryInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotBatteryInfo (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotBatteryInfo(struct soap*, const char*, int, const _ns3__GetRobotBatteryInfo *, const char*);
SOAP_FMAC3 _ns3__GetRobotBatteryInfo * SOAP_FMAC4 soap_in__ns3__GetRobotBatteryInfo(struct soap*, const char*, _ns3__GetRobotBatteryInfo *, const char*);

#ifndef soap_write__ns3__GetRobotBatteryInfo
#define soap_write__ns3__GetRobotBatteryInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotBatteryInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotBatteryInfo * SOAP_FMAC4 soap_get__ns3__GetRobotBatteryInfo(struct soap*, _ns3__GetRobotBatteryInfo *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotBatteryInfo
#define soap_read__ns3__GetRobotBatteryInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotBatteryInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotBatteryInfo * SOAP_FMAC2 soap_instantiate__ns3__GetRobotBatteryInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotBatteryInfo * soap_new__ns3__GetRobotBatteryInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotBatteryInfo(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotBatteryInfo * soap_new_req__ns3__GetRobotBatteryInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotBatteryInfo *_p = soap_instantiate__ns3__GetRobotBatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotBatteryInfo::NeedAll = NeedAll; } return _p; }

inline _ns3__GetRobotBatteryInfo * soap_new_set__ns3__GetRobotBatteryInfo(struct soap *soap, bool NeedAll) { _ns3__GetRobotBatteryInfo *_p = soap_instantiate__ns3__GetRobotBatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotBatteryInfo::NeedAll = NeedAll; } return _p; }

inline void soap_delete__ns3__GetRobotBatteryInfo(struct soap *soap, _ns3__GetRobotBatteryInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotBatteryInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotPdControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotPdControlResponse (76)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotPdControlResponse(struct soap*, const char*, int, const _ns3__RobotPdControlResponse *, const char*);
SOAP_FMAC3 _ns3__RobotPdControlResponse * SOAP_FMAC4 soap_in__ns3__RobotPdControlResponse(struct soap*, const char*, _ns3__RobotPdControlResponse *, const char*);

#ifndef soap_write__ns3__RobotPdControlResponse
#define soap_write__ns3__RobotPdControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotPdControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotPdControlResponse * SOAP_FMAC4 soap_get__ns3__RobotPdControlResponse(struct soap*, _ns3__RobotPdControlResponse *, const char*, const char*);

#ifndef soap_read__ns3__RobotPdControlResponse
#define soap_read__ns3__RobotPdControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotPdControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotPdControlResponse * SOAP_FMAC2 soap_instantiate__ns3__RobotPdControlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotPdControlResponse * soap_new__ns3__RobotPdControlResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotPdControlResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotPdControlResponse * soap_new_req__ns3__RobotPdControlResponse(struct soap *soap, int Result) { _ns3__RobotPdControlResponse *_p = soap_instantiate__ns3__RobotPdControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotPdControlResponse::Result = Result; } return _p; }

inline _ns3__RobotPdControlResponse * soap_new_set__ns3__RobotPdControlResponse(struct soap *soap, int Result) { _ns3__RobotPdControlResponse *_p = soap_instantiate__ns3__RobotPdControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotPdControlResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__RobotPdControlResponse(struct soap *soap, _ns3__RobotPdControlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotPdControlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotPdControl
#define SOAP_TYPE_RobotData__ns3__RobotPdControl (75)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotPdControl(struct soap*, const char*, int, const _ns3__RobotPdControl *, const char*);
SOAP_FMAC3 _ns3__RobotPdControl * SOAP_FMAC4 soap_in__ns3__RobotPdControl(struct soap*, const char*, _ns3__RobotPdControl *, const char*);

#ifndef soap_write__ns3__RobotPdControl
#define soap_write__ns3__RobotPdControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotPdControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotPdControl * SOAP_FMAC4 soap_get__ns3__RobotPdControl(struct soap*, _ns3__RobotPdControl *, const char*, const char*);

#ifndef soap_read__ns3__RobotPdControl
#define soap_read__ns3__RobotPdControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotPdControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotPdControl * SOAP_FMAC2 soap_instantiate__ns3__RobotPdControl(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotPdControl * soap_new__ns3__RobotPdControl(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotPdControl(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotPdControl * soap_new_req__ns3__RobotPdControl(struct soap *soap, enum ns3__PdControlType Type) { _ns3__RobotPdControl *_p = soap_instantiate__ns3__RobotPdControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotPdControl::Type = Type; } return _p; }

inline _ns3__RobotPdControl * soap_new_set__ns3__RobotPdControl(struct soap *soap, enum ns3__PdControlType Type) { _ns3__RobotPdControl *_p = soap_instantiate__ns3__RobotPdControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotPdControl::Type = Type; } return _p; }

inline void soap_delete__ns3__RobotPdControl(struct soap *soap, _ns3__RobotPdControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotPdControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotLifterControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotLifterControlResponse (74)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotLifterControlResponse(struct soap*, const char*, int, const _ns3__RobotLifterControlResponse *, const char*);
SOAP_FMAC3 _ns3__RobotLifterControlResponse * SOAP_FMAC4 soap_in__ns3__RobotLifterControlResponse(struct soap*, const char*, _ns3__RobotLifterControlResponse *, const char*);

#ifndef soap_write__ns3__RobotLifterControlResponse
#define soap_write__ns3__RobotLifterControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotLifterControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotLifterControlResponse * SOAP_FMAC4 soap_get__ns3__RobotLifterControlResponse(struct soap*, _ns3__RobotLifterControlResponse *, const char*, const char*);

#ifndef soap_read__ns3__RobotLifterControlResponse
#define soap_read__ns3__RobotLifterControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotLifterControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotLifterControlResponse * SOAP_FMAC2 soap_instantiate__ns3__RobotLifterControlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotLifterControlResponse * soap_new__ns3__RobotLifterControlResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotLifterControlResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotLifterControlResponse * soap_new_req__ns3__RobotLifterControlResponse(struct soap *soap, int Result) { _ns3__RobotLifterControlResponse *_p = soap_instantiate__ns3__RobotLifterControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotLifterControlResponse::Result = Result; } return _p; }

inline _ns3__RobotLifterControlResponse * soap_new_set__ns3__RobotLifterControlResponse(struct soap *soap, int Result) { _ns3__RobotLifterControlResponse *_p = soap_instantiate__ns3__RobotLifterControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotLifterControlResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__RobotLifterControlResponse(struct soap *soap, _ns3__RobotLifterControlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotLifterControlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotLifterControl
#define SOAP_TYPE_RobotData__ns3__RobotLifterControl (73)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotLifterControl(struct soap*, const char*, int, const _ns3__RobotLifterControl *, const char*);
SOAP_FMAC3 _ns3__RobotLifterControl * SOAP_FMAC4 soap_in__ns3__RobotLifterControl(struct soap*, const char*, _ns3__RobotLifterControl *, const char*);

#ifndef soap_write__ns3__RobotLifterControl
#define soap_write__ns3__RobotLifterControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotLifterControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotLifterControl * SOAP_FMAC4 soap_get__ns3__RobotLifterControl(struct soap*, _ns3__RobotLifterControl *, const char*, const char*);

#ifndef soap_read__ns3__RobotLifterControl
#define soap_read__ns3__RobotLifterControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotLifterControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotLifterControl * SOAP_FMAC2 soap_instantiate__ns3__RobotLifterControl(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotLifterControl * soap_new__ns3__RobotLifterControl(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotLifterControl(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotLifterControl * soap_new_req__ns3__RobotLifterControl(struct soap *soap, enum ns3__LifterControlType Type) { _ns3__RobotLifterControl *_p = soap_instantiate__ns3__RobotLifterControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotLifterControl::Type = Type; } return _p; }

inline _ns3__RobotLifterControl * soap_new_set__ns3__RobotLifterControl(struct soap *soap, enum ns3__LifterControlType Type) { _ns3__RobotLifterControl *_p = soap_instantiate__ns3__RobotLifterControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotLifterControl::Type = Type; } return _p; }

inline void soap_delete__ns3__RobotLifterControl(struct soap *soap, _ns3__RobotLifterControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotLifterControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotFlirControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotFlirControlResponse (72)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotFlirControlResponse(struct soap*, const char*, int, const _ns3__RobotFlirControlResponse *, const char*);
SOAP_FMAC3 _ns3__RobotFlirControlResponse * SOAP_FMAC4 soap_in__ns3__RobotFlirControlResponse(struct soap*, const char*, _ns3__RobotFlirControlResponse *, const char*);

#ifndef soap_write__ns3__RobotFlirControlResponse
#define soap_write__ns3__RobotFlirControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotFlirControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotFlirControlResponse * SOAP_FMAC4 soap_get__ns3__RobotFlirControlResponse(struct soap*, _ns3__RobotFlirControlResponse *, const char*, const char*);

#ifndef soap_read__ns3__RobotFlirControlResponse
#define soap_read__ns3__RobotFlirControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotFlirControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotFlirControlResponse * SOAP_FMAC2 soap_instantiate__ns3__RobotFlirControlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotFlirControlResponse * soap_new__ns3__RobotFlirControlResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotFlirControlResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotFlirControlResponse * soap_new_req__ns3__RobotFlirControlResponse(struct soap *soap, int Result) { _ns3__RobotFlirControlResponse *_p = soap_instantiate__ns3__RobotFlirControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotFlirControlResponse::Result = Result; } return _p; }

inline _ns3__RobotFlirControlResponse * soap_new_set__ns3__RobotFlirControlResponse(struct soap *soap, int Result) { _ns3__RobotFlirControlResponse *_p = soap_instantiate__ns3__RobotFlirControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotFlirControlResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__RobotFlirControlResponse(struct soap *soap, _ns3__RobotFlirControlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotFlirControlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotFlirControl
#define SOAP_TYPE_RobotData__ns3__RobotFlirControl (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotFlirControl(struct soap*, const char*, int, const _ns3__RobotFlirControl *, const char*);
SOAP_FMAC3 _ns3__RobotFlirControl * SOAP_FMAC4 soap_in__ns3__RobotFlirControl(struct soap*, const char*, _ns3__RobotFlirControl *, const char*);

#ifndef soap_write__ns3__RobotFlirControl
#define soap_write__ns3__RobotFlirControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotFlirControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotFlirControl * SOAP_FMAC4 soap_get__ns3__RobotFlirControl(struct soap*, _ns3__RobotFlirControl *, const char*, const char*);

#ifndef soap_read__ns3__RobotFlirControl
#define soap_read__ns3__RobotFlirControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotFlirControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotFlirControl * SOAP_FMAC2 soap_instantiate__ns3__RobotFlirControl(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotFlirControl * soap_new__ns3__RobotFlirControl(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotFlirControl(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotFlirControl * soap_new_req__ns3__RobotFlirControl(struct soap *soap, enum ns3__FilrControlType Type) { _ns3__RobotFlirControl *_p = soap_instantiate__ns3__RobotFlirControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotFlirControl::Type = Type; } return _p; }

inline _ns3__RobotFlirControl * soap_new_set__ns3__RobotFlirControl(struct soap *soap, enum ns3__FilrControlType Type) { _ns3__RobotFlirControl *_p = soap_instantiate__ns3__RobotFlirControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotFlirControl::Type = Type; } return _p; }

inline void soap_delete__ns3__RobotFlirControl(struct soap *soap, _ns3__RobotFlirControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotFlirControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotWiperControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotWiperControlResponse (70)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotWiperControlResponse(struct soap*, const char*, int, const _ns3__RobotWiperControlResponse *, const char*);
SOAP_FMAC3 _ns3__RobotWiperControlResponse * SOAP_FMAC4 soap_in__ns3__RobotWiperControlResponse(struct soap*, const char*, _ns3__RobotWiperControlResponse *, const char*);

#ifndef soap_write__ns3__RobotWiperControlResponse
#define soap_write__ns3__RobotWiperControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotWiperControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotWiperControlResponse * SOAP_FMAC4 soap_get__ns3__RobotWiperControlResponse(struct soap*, _ns3__RobotWiperControlResponse *, const char*, const char*);

#ifndef soap_read__ns3__RobotWiperControlResponse
#define soap_read__ns3__RobotWiperControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotWiperControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotWiperControlResponse * SOAP_FMAC2 soap_instantiate__ns3__RobotWiperControlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotWiperControlResponse * soap_new__ns3__RobotWiperControlResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotWiperControlResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotWiperControlResponse * soap_new_req__ns3__RobotWiperControlResponse(struct soap *soap, int Result) { _ns3__RobotWiperControlResponse *_p = soap_instantiate__ns3__RobotWiperControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotWiperControlResponse::Result = Result; } return _p; }

inline _ns3__RobotWiperControlResponse * soap_new_set__ns3__RobotWiperControlResponse(struct soap *soap, int Result) { _ns3__RobotWiperControlResponse *_p = soap_instantiate__ns3__RobotWiperControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotWiperControlResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__RobotWiperControlResponse(struct soap *soap, _ns3__RobotWiperControlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotWiperControlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotWiperControl
#define SOAP_TYPE_RobotData__ns3__RobotWiperControl (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotWiperControl(struct soap*, const char*, int, const _ns3__RobotWiperControl *, const char*);
SOAP_FMAC3 _ns3__RobotWiperControl * SOAP_FMAC4 soap_in__ns3__RobotWiperControl(struct soap*, const char*, _ns3__RobotWiperControl *, const char*);

#ifndef soap_write__ns3__RobotWiperControl
#define soap_write__ns3__RobotWiperControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotWiperControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotWiperControl * SOAP_FMAC4 soap_get__ns3__RobotWiperControl(struct soap*, _ns3__RobotWiperControl *, const char*, const char*);

#ifndef soap_read__ns3__RobotWiperControl
#define soap_read__ns3__RobotWiperControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotWiperControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotWiperControl * SOAP_FMAC2 soap_instantiate__ns3__RobotWiperControl(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotWiperControl * soap_new__ns3__RobotWiperControl(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotWiperControl(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotWiperControl * soap_new_req__ns3__RobotWiperControl(struct soap *soap, enum ns3__WiperControlType Type) { _ns3__RobotWiperControl *_p = soap_instantiate__ns3__RobotWiperControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotWiperControl::Type = Type; } return _p; }

inline _ns3__RobotWiperControl * soap_new_set__ns3__RobotWiperControl(struct soap *soap, enum ns3__WiperControlType Type) { _ns3__RobotWiperControl *_p = soap_instantiate__ns3__RobotWiperControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotWiperControl::Type = Type; } return _p; }

inline void soap_delete__ns3__RobotWiperControl(struct soap *soap, _ns3__RobotWiperControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotWiperControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotLightControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotLightControlResponse (68)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotLightControlResponse(struct soap*, const char*, int, const _ns3__RobotLightControlResponse *, const char*);
SOAP_FMAC3 _ns3__RobotLightControlResponse * SOAP_FMAC4 soap_in__ns3__RobotLightControlResponse(struct soap*, const char*, _ns3__RobotLightControlResponse *, const char*);

#ifndef soap_write__ns3__RobotLightControlResponse
#define soap_write__ns3__RobotLightControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotLightControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotLightControlResponse * SOAP_FMAC4 soap_get__ns3__RobotLightControlResponse(struct soap*, _ns3__RobotLightControlResponse *, const char*, const char*);

#ifndef soap_read__ns3__RobotLightControlResponse
#define soap_read__ns3__RobotLightControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotLightControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotLightControlResponse * SOAP_FMAC2 soap_instantiate__ns3__RobotLightControlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotLightControlResponse * soap_new__ns3__RobotLightControlResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotLightControlResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotLightControlResponse * soap_new_req__ns3__RobotLightControlResponse(struct soap *soap, int Result) { _ns3__RobotLightControlResponse *_p = soap_instantiate__ns3__RobotLightControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotLightControlResponse::Result = Result; } return _p; }

inline _ns3__RobotLightControlResponse * soap_new_set__ns3__RobotLightControlResponse(struct soap *soap, int Result) { _ns3__RobotLightControlResponse *_p = soap_instantiate__ns3__RobotLightControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotLightControlResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__RobotLightControlResponse(struct soap *soap, _ns3__RobotLightControlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotLightControlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotLightControl
#define SOAP_TYPE_RobotData__ns3__RobotLightControl (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotLightControl(struct soap*, const char*, int, const _ns3__RobotLightControl *, const char*);
SOAP_FMAC3 _ns3__RobotLightControl * SOAP_FMAC4 soap_in__ns3__RobotLightControl(struct soap*, const char*, _ns3__RobotLightControl *, const char*);

#ifndef soap_write__ns3__RobotLightControl
#define soap_write__ns3__RobotLightControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotLightControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotLightControl * SOAP_FMAC4 soap_get__ns3__RobotLightControl(struct soap*, _ns3__RobotLightControl *, const char*, const char*);

#ifndef soap_read__ns3__RobotLightControl
#define soap_read__ns3__RobotLightControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotLightControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotLightControl * SOAP_FMAC2 soap_instantiate__ns3__RobotLightControl(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotLightControl * soap_new__ns3__RobotLightControl(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotLightControl(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotLightControl * soap_new_req__ns3__RobotLightControl(struct soap *soap, enum ns3__LightControlType Type) { _ns3__RobotLightControl *_p = soap_instantiate__ns3__RobotLightControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotLightControl::Type = Type; } return _p; }

inline _ns3__RobotLightControl * soap_new_set__ns3__RobotLightControl(struct soap *soap, enum ns3__LightControlType Type) { _ns3__RobotLightControl *_p = soap_instantiate__ns3__RobotLightControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotLightControl::Type = Type; } return _p; }

inline void soap_delete__ns3__RobotLightControl(struct soap *soap, _ns3__RobotLightControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotLightControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotCameraControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotCameraControlResponse (66)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotCameraControlResponse(struct soap*, const char*, int, const _ns3__RobotCameraControlResponse *, const char*);
SOAP_FMAC3 _ns3__RobotCameraControlResponse * SOAP_FMAC4 soap_in__ns3__RobotCameraControlResponse(struct soap*, const char*, _ns3__RobotCameraControlResponse *, const char*);

#ifndef soap_write__ns3__RobotCameraControlResponse
#define soap_write__ns3__RobotCameraControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotCameraControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotCameraControlResponse * SOAP_FMAC4 soap_get__ns3__RobotCameraControlResponse(struct soap*, _ns3__RobotCameraControlResponse *, const char*, const char*);

#ifndef soap_read__ns3__RobotCameraControlResponse
#define soap_read__ns3__RobotCameraControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotCameraControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotCameraControlResponse * SOAP_FMAC2 soap_instantiate__ns3__RobotCameraControlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotCameraControlResponse * soap_new__ns3__RobotCameraControlResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotCameraControlResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotCameraControlResponse * soap_new_req__ns3__RobotCameraControlResponse(struct soap *soap, int Result) { _ns3__RobotCameraControlResponse *_p = soap_instantiate__ns3__RobotCameraControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotCameraControlResponse::Result = Result; } return _p; }

inline _ns3__RobotCameraControlResponse * soap_new_set__ns3__RobotCameraControlResponse(struct soap *soap, int Result) { _ns3__RobotCameraControlResponse *_p = soap_instantiate__ns3__RobotCameraControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotCameraControlResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__RobotCameraControlResponse(struct soap *soap, _ns3__RobotCameraControlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotCameraControlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotCameraControl
#define SOAP_TYPE_RobotData__ns3__RobotCameraControl (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotCameraControl(struct soap*, const char*, int, const _ns3__RobotCameraControl *, const char*);
SOAP_FMAC3 _ns3__RobotCameraControl * SOAP_FMAC4 soap_in__ns3__RobotCameraControl(struct soap*, const char*, _ns3__RobotCameraControl *, const char*);

#ifndef soap_write__ns3__RobotCameraControl
#define soap_write__ns3__RobotCameraControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotCameraControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotCameraControl * SOAP_FMAC4 soap_get__ns3__RobotCameraControl(struct soap*, _ns3__RobotCameraControl *, const char*, const char*);

#ifndef soap_read__ns3__RobotCameraControl
#define soap_read__ns3__RobotCameraControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotCameraControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotCameraControl * SOAP_FMAC2 soap_instantiate__ns3__RobotCameraControl(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotCameraControl * soap_new__ns3__RobotCameraControl(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotCameraControl(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotCameraControl * soap_new_req__ns3__RobotCameraControl(struct soap *soap, enum ns3__CameraControlType Type) { _ns3__RobotCameraControl *_p = soap_instantiate__ns3__RobotCameraControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotCameraControl::Type = Type; } return _p; }

inline _ns3__RobotCameraControl * soap_new_set__ns3__RobotCameraControl(struct soap *soap, enum ns3__CameraControlType Type) { _ns3__RobotCameraControl *_p = soap_instantiate__ns3__RobotCameraControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotCameraControl::Type = Type; } return _p; }

inline void soap_delete__ns3__RobotCameraControl(struct soap *soap, _ns3__RobotCameraControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotCameraControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotYuntaiControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotYuntaiControlResponse (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotYuntaiControlResponse(struct soap*, const char*, int, const _ns3__RobotYuntaiControlResponse *, const char*);
SOAP_FMAC3 _ns3__RobotYuntaiControlResponse * SOAP_FMAC4 soap_in__ns3__RobotYuntaiControlResponse(struct soap*, const char*, _ns3__RobotYuntaiControlResponse *, const char*);

#ifndef soap_write__ns3__RobotYuntaiControlResponse
#define soap_write__ns3__RobotYuntaiControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotYuntaiControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotYuntaiControlResponse * SOAP_FMAC4 soap_get__ns3__RobotYuntaiControlResponse(struct soap*, _ns3__RobotYuntaiControlResponse *, const char*, const char*);

#ifndef soap_read__ns3__RobotYuntaiControlResponse
#define soap_read__ns3__RobotYuntaiControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotYuntaiControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotYuntaiControlResponse * SOAP_FMAC2 soap_instantiate__ns3__RobotYuntaiControlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotYuntaiControlResponse * soap_new__ns3__RobotYuntaiControlResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotYuntaiControlResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotYuntaiControlResponse * soap_new_req__ns3__RobotYuntaiControlResponse(struct soap *soap, int Result) { _ns3__RobotYuntaiControlResponse *_p = soap_instantiate__ns3__RobotYuntaiControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotYuntaiControlResponse::Result = Result; } return _p; }

inline _ns3__RobotYuntaiControlResponse * soap_new_set__ns3__RobotYuntaiControlResponse(struct soap *soap, int Result) { _ns3__RobotYuntaiControlResponse *_p = soap_instantiate__ns3__RobotYuntaiControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotYuntaiControlResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__RobotYuntaiControlResponse(struct soap *soap, _ns3__RobotYuntaiControlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotYuntaiControlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotYuntaiControl
#define SOAP_TYPE_RobotData__ns3__RobotYuntaiControl (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotYuntaiControl(struct soap*, const char*, int, const _ns3__RobotYuntaiControl *, const char*);
SOAP_FMAC3 _ns3__RobotYuntaiControl * SOAP_FMAC4 soap_in__ns3__RobotYuntaiControl(struct soap*, const char*, _ns3__RobotYuntaiControl *, const char*);

#ifndef soap_write__ns3__RobotYuntaiControl
#define soap_write__ns3__RobotYuntaiControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotYuntaiControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotYuntaiControl * SOAP_FMAC4 soap_get__ns3__RobotYuntaiControl(struct soap*, _ns3__RobotYuntaiControl *, const char*, const char*);

#ifndef soap_read__ns3__RobotYuntaiControl
#define soap_read__ns3__RobotYuntaiControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotYuntaiControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotYuntaiControl * SOAP_FMAC2 soap_instantiate__ns3__RobotYuntaiControl(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotYuntaiControl * soap_new__ns3__RobotYuntaiControl(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotYuntaiControl(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotYuntaiControl * soap_new_req__ns3__RobotYuntaiControl(struct soap *soap, enum ns3__YuntaiControlType Type) { _ns3__RobotYuntaiControl *_p = soap_instantiate__ns3__RobotYuntaiControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotYuntaiControl::Type = Type; } return _p; }

inline _ns3__RobotYuntaiControl * soap_new_set__ns3__RobotYuntaiControl(struct soap *soap, enum ns3__YuntaiControlType Type) { _ns3__RobotYuntaiControl *_p = soap_instantiate__ns3__RobotYuntaiControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotYuntaiControl::Type = Type; } return _p; }

inline void soap_delete__ns3__RobotYuntaiControl(struct soap *soap, _ns3__RobotYuntaiControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotYuntaiControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotSpeedControlResponse
#define SOAP_TYPE_RobotData__ns3__RobotSpeedControlResponse (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotSpeedControlResponse(struct soap*, const char*, int, const _ns3__RobotSpeedControlResponse *, const char*);
SOAP_FMAC3 _ns3__RobotSpeedControlResponse * SOAP_FMAC4 soap_in__ns3__RobotSpeedControlResponse(struct soap*, const char*, _ns3__RobotSpeedControlResponse *, const char*);

#ifndef soap_write__ns3__RobotSpeedControlResponse
#define soap_write__ns3__RobotSpeedControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotSpeedControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotSpeedControlResponse * SOAP_FMAC4 soap_get__ns3__RobotSpeedControlResponse(struct soap*, _ns3__RobotSpeedControlResponse *, const char*, const char*);

#ifndef soap_read__ns3__RobotSpeedControlResponse
#define soap_read__ns3__RobotSpeedControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotSpeedControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotSpeedControlResponse * SOAP_FMAC2 soap_instantiate__ns3__RobotSpeedControlResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotSpeedControlResponse * soap_new__ns3__RobotSpeedControlResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotSpeedControlResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotSpeedControlResponse * soap_new_req__ns3__RobotSpeedControlResponse(struct soap *soap, int Result) { _ns3__RobotSpeedControlResponse *_p = soap_instantiate__ns3__RobotSpeedControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotSpeedControlResponse::Result = Result; } return _p; }

inline _ns3__RobotSpeedControlResponse * soap_new_set__ns3__RobotSpeedControlResponse(struct soap *soap, int Result) { _ns3__RobotSpeedControlResponse *_p = soap_instantiate__ns3__RobotSpeedControlResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotSpeedControlResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__RobotSpeedControlResponse(struct soap *soap, _ns3__RobotSpeedControlResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotSpeedControlResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__RobotSpeedControl
#define SOAP_TYPE_RobotData__ns3__RobotSpeedControl (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__RobotSpeedControl(struct soap*, const char*, int, const _ns3__RobotSpeedControl *, const char*);
SOAP_FMAC3 _ns3__RobotSpeedControl * SOAP_FMAC4 soap_in__ns3__RobotSpeedControl(struct soap*, const char*, _ns3__RobotSpeedControl *, const char*);

#ifndef soap_write__ns3__RobotSpeedControl
#define soap_write__ns3__RobotSpeedControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotSpeedControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotSpeedControl * SOAP_FMAC4 soap_get__ns3__RobotSpeedControl(struct soap*, _ns3__RobotSpeedControl *, const char*, const char*);

#ifndef soap_read__ns3__RobotSpeedControl
#define soap_read__ns3__RobotSpeedControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__RobotSpeedControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__RobotSpeedControl * SOAP_FMAC2 soap_instantiate__ns3__RobotSpeedControl(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__RobotSpeedControl * soap_new__ns3__RobotSpeedControl(struct soap *soap, int n = -1) { return soap_instantiate__ns3__RobotSpeedControl(soap, n, NULL, NULL, NULL); }

inline _ns3__RobotSpeedControl * soap_new_req__ns3__RobotSpeedControl(struct soap *soap, double LinearVelocity, double AngularVelocity) { _ns3__RobotSpeedControl *_p = soap_instantiate__ns3__RobotSpeedControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotSpeedControl::LinearVelocity = LinearVelocity; _p->_ns3__RobotSpeedControl::AngularVelocity = AngularVelocity; } return _p; }

inline _ns3__RobotSpeedControl * soap_new_set__ns3__RobotSpeedControl(struct soap *soap, double LinearVelocity, double AngularVelocity) { _ns3__RobotSpeedControl *_p = soap_instantiate__ns3__RobotSpeedControl(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__RobotSpeedControl::LinearVelocity = LinearVelocity; _p->_ns3__RobotSpeedControl::AngularVelocity = AngularVelocity; } return _p; }

inline void soap_delete__ns3__RobotSpeedControl(struct soap *soap, _ns3__RobotSpeedControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__RobotSpeedControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetControlModeResponse
#define SOAP_TYPE_RobotData__ns3__GetControlModeResponse (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetControlModeResponse(struct soap*, const char*, int, const _ns3__GetControlModeResponse *, const char*);
SOAP_FMAC3 _ns3__GetControlModeResponse * SOAP_FMAC4 soap_in__ns3__GetControlModeResponse(struct soap*, const char*, _ns3__GetControlModeResponse *, const char*);

#ifndef soap_write__ns3__GetControlModeResponse
#define soap_write__ns3__GetControlModeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetControlModeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetControlModeResponse * SOAP_FMAC4 soap_get__ns3__GetControlModeResponse(struct soap*, _ns3__GetControlModeResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetControlModeResponse
#define soap_read__ns3__GetControlModeResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetControlModeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetControlModeResponse * SOAP_FMAC2 soap_instantiate__ns3__GetControlModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetControlModeResponse * soap_new__ns3__GetControlModeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetControlModeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetControlModeResponse * soap_new_req__ns3__GetControlModeResponse(struct soap *soap, int ControlType) { _ns3__GetControlModeResponse *_p = soap_instantiate__ns3__GetControlModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetControlModeResponse::ControlType = ControlType; } return _p; }

inline _ns3__GetControlModeResponse * soap_new_set__ns3__GetControlModeResponse(struct soap *soap, int ControlType) { _ns3__GetControlModeResponse *_p = soap_instantiate__ns3__GetControlModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetControlModeResponse::ControlType = ControlType; } return _p; }

inline void soap_delete__ns3__GetControlModeResponse(struct soap *soap, _ns3__GetControlModeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetControlModeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetControlMode
#define SOAP_TYPE_RobotData__ns3__GetControlMode (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetControlMode(struct soap*, const char*, int, const _ns3__GetControlMode *, const char*);
SOAP_FMAC3 _ns3__GetControlMode * SOAP_FMAC4 soap_in__ns3__GetControlMode(struct soap*, const char*, _ns3__GetControlMode *, const char*);

#ifndef soap_write__ns3__GetControlMode
#define soap_write__ns3__GetControlMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetControlMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetControlMode * SOAP_FMAC4 soap_get__ns3__GetControlMode(struct soap*, _ns3__GetControlMode *, const char*, const char*);

#ifndef soap_read__ns3__GetControlMode
#define soap_read__ns3__GetControlMode(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetControlMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetControlMode * SOAP_FMAC2 soap_instantiate__ns3__GetControlMode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetControlMode * soap_new__ns3__GetControlMode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetControlMode(soap, n, NULL, NULL, NULL); }

inline _ns3__GetControlMode * soap_new_req__ns3__GetControlMode(struct soap *soap, std::string& RobotIp) { _ns3__GetControlMode *_p = soap_instantiate__ns3__GetControlMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetControlMode::RobotIp = RobotIp; } return _p; }

inline _ns3__GetControlMode * soap_new_set__ns3__GetControlMode(struct soap *soap, std::string& RobotIp) { _ns3__GetControlMode *_p = soap_instantiate__ns3__GetControlMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetControlMode::RobotIp = RobotIp; } return _p; }

inline void soap_delete__ns3__GetControlMode(struct soap *soap, _ns3__GetControlMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetControlMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__SetControlModeResponse
#define SOAP_TYPE_RobotData__ns3__SetControlModeResponse (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SetControlModeResponse(struct soap*, const char*, int, const _ns3__SetControlModeResponse *, const char*);
SOAP_FMAC3 _ns3__SetControlModeResponse * SOAP_FMAC4 soap_in__ns3__SetControlModeResponse(struct soap*, const char*, _ns3__SetControlModeResponse *, const char*);

#ifndef soap_write__ns3__SetControlModeResponse
#define soap_write__ns3__SetControlModeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:SetControlModeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetControlModeResponse * SOAP_FMAC4 soap_get__ns3__SetControlModeResponse(struct soap*, _ns3__SetControlModeResponse *, const char*, const char*);

#ifndef soap_read__ns3__SetControlModeResponse
#define soap_read__ns3__SetControlModeResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__SetControlModeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SetControlModeResponse * SOAP_FMAC2 soap_instantiate__ns3__SetControlModeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SetControlModeResponse * soap_new__ns3__SetControlModeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SetControlModeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__SetControlModeResponse * soap_new_req__ns3__SetControlModeResponse(struct soap *soap, int Result) { _ns3__SetControlModeResponse *_p = soap_instantiate__ns3__SetControlModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetControlModeResponse::Result = Result; } return _p; }

inline _ns3__SetControlModeResponse * soap_new_set__ns3__SetControlModeResponse(struct soap *soap, int Result) { _ns3__SetControlModeResponse *_p = soap_instantiate__ns3__SetControlModeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetControlModeResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__SetControlModeResponse(struct soap *soap, _ns3__SetControlModeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SetControlModeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__SetControlMode
#define SOAP_TYPE_RobotData__ns3__SetControlMode (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SetControlMode(struct soap*, const char*, int, const _ns3__SetControlMode *, const char*);
SOAP_FMAC3 _ns3__SetControlMode * SOAP_FMAC4 soap_in__ns3__SetControlMode(struct soap*, const char*, _ns3__SetControlMode *, const char*);

#ifndef soap_write__ns3__SetControlMode
#define soap_write__ns3__SetControlMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:SetControlMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetControlMode * SOAP_FMAC4 soap_get__ns3__SetControlMode(struct soap*, _ns3__SetControlMode *, const char*, const char*);

#ifndef soap_read__ns3__SetControlMode
#define soap_read__ns3__SetControlMode(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__SetControlMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SetControlMode * SOAP_FMAC2 soap_instantiate__ns3__SetControlMode(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SetControlMode * soap_new__ns3__SetControlMode(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SetControlMode(soap, n, NULL, NULL, NULL); }

inline _ns3__SetControlMode * soap_new_req__ns3__SetControlMode(struct soap *soap, std::string& RobotIp, int ControlType) { _ns3__SetControlMode *_p = soap_instantiate__ns3__SetControlMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetControlMode::RobotIp = RobotIp; _p->_ns3__SetControlMode::ControlType = ControlType; } return _p; }

inline _ns3__SetControlMode * soap_new_set__ns3__SetControlMode(struct soap *soap, std::string& RobotIp, int ControlType) { _ns3__SetControlMode *_p = soap_instantiate__ns3__SetControlMode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetControlMode::RobotIp = RobotIp; _p->_ns3__SetControlMode::ControlType = ControlType; } return _p; }

inline void soap_delete__ns3__SetControlMode(struct soap *soap, _ns3__SetControlMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SetControlMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobotResponse
#define SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobotResponse (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ReleaseCurrentRobotResponse(struct soap*, const char*, int, const _ns3__ReleaseCurrentRobotResponse *, const char*);
SOAP_FMAC3 _ns3__ReleaseCurrentRobotResponse * SOAP_FMAC4 soap_in__ns3__ReleaseCurrentRobotResponse(struct soap*, const char*, _ns3__ReleaseCurrentRobotResponse *, const char*);

#ifndef soap_write__ns3__ReleaseCurrentRobotResponse
#define soap_write__ns3__ReleaseCurrentRobotResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:ReleaseCurrentRobotResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ReleaseCurrentRobotResponse * SOAP_FMAC4 soap_get__ns3__ReleaseCurrentRobotResponse(struct soap*, _ns3__ReleaseCurrentRobotResponse *, const char*, const char*);

#ifndef soap_read__ns3__ReleaseCurrentRobotResponse
#define soap_read__ns3__ReleaseCurrentRobotResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__ReleaseCurrentRobotResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__ReleaseCurrentRobotResponse * SOAP_FMAC2 soap_instantiate__ns3__ReleaseCurrentRobotResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__ReleaseCurrentRobotResponse * soap_new__ns3__ReleaseCurrentRobotResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__ReleaseCurrentRobotResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__ReleaseCurrentRobotResponse * soap_new_req__ns3__ReleaseCurrentRobotResponse(struct soap *soap, int Result) { _ns3__ReleaseCurrentRobotResponse *_p = soap_instantiate__ns3__ReleaseCurrentRobotResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ReleaseCurrentRobotResponse::Result = Result; } return _p; }

inline _ns3__ReleaseCurrentRobotResponse * soap_new_set__ns3__ReleaseCurrentRobotResponse(struct soap *soap, int Result) { _ns3__ReleaseCurrentRobotResponse *_p = soap_instantiate__ns3__ReleaseCurrentRobotResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ReleaseCurrentRobotResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__ReleaseCurrentRobotResponse(struct soap *soap, _ns3__ReleaseCurrentRobotResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__ReleaseCurrentRobotResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobot
#define SOAP_TYPE_RobotData__ns3__ReleaseCurrentRobot (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__ReleaseCurrentRobot(struct soap*, const char*, int, const _ns3__ReleaseCurrentRobot *, const char*);
SOAP_FMAC3 _ns3__ReleaseCurrentRobot * SOAP_FMAC4 soap_in__ns3__ReleaseCurrentRobot(struct soap*, const char*, _ns3__ReleaseCurrentRobot *, const char*);

#ifndef soap_write__ns3__ReleaseCurrentRobot
#define soap_write__ns3__ReleaseCurrentRobot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:ReleaseCurrentRobot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ReleaseCurrentRobot * SOAP_FMAC4 soap_get__ns3__ReleaseCurrentRobot(struct soap*, _ns3__ReleaseCurrentRobot *, const char*, const char*);

#ifndef soap_read__ns3__ReleaseCurrentRobot
#define soap_read__ns3__ReleaseCurrentRobot(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__ReleaseCurrentRobot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__ReleaseCurrentRobot * SOAP_FMAC2 soap_instantiate__ns3__ReleaseCurrentRobot(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__ReleaseCurrentRobot * soap_new__ns3__ReleaseCurrentRobot(struct soap *soap, int n = -1) { return soap_instantiate__ns3__ReleaseCurrentRobot(soap, n, NULL, NULL, NULL); }

inline _ns3__ReleaseCurrentRobot * soap_new_req__ns3__ReleaseCurrentRobot(struct soap *soap, std::string& RobotIp) { _ns3__ReleaseCurrentRobot *_p = soap_instantiate__ns3__ReleaseCurrentRobot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ReleaseCurrentRobot::RobotIp = RobotIp; } return _p; }

inline _ns3__ReleaseCurrentRobot * soap_new_set__ns3__ReleaseCurrentRobot(struct soap *soap, std::string& RobotIp) { _ns3__ReleaseCurrentRobot *_p = soap_instantiate__ns3__ReleaseCurrentRobot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__ReleaseCurrentRobot::RobotIp = RobotIp; } return _p; }

inline void soap_delete__ns3__ReleaseCurrentRobot(struct soap *soap, _ns3__ReleaseCurrentRobot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__ReleaseCurrentRobot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__SetCurrentRobotResponse
#define SOAP_TYPE_RobotData__ns3__SetCurrentRobotResponse (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SetCurrentRobotResponse(struct soap*, const char*, int, const _ns3__SetCurrentRobotResponse *, const char*);
SOAP_FMAC3 _ns3__SetCurrentRobotResponse * SOAP_FMAC4 soap_in__ns3__SetCurrentRobotResponse(struct soap*, const char*, _ns3__SetCurrentRobotResponse *, const char*);

#ifndef soap_write__ns3__SetCurrentRobotResponse
#define soap_write__ns3__SetCurrentRobotResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:SetCurrentRobotResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetCurrentRobotResponse * SOAP_FMAC4 soap_get__ns3__SetCurrentRobotResponse(struct soap*, _ns3__SetCurrentRobotResponse *, const char*, const char*);

#ifndef soap_read__ns3__SetCurrentRobotResponse
#define soap_read__ns3__SetCurrentRobotResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__SetCurrentRobotResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SetCurrentRobotResponse * SOAP_FMAC2 soap_instantiate__ns3__SetCurrentRobotResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SetCurrentRobotResponse * soap_new__ns3__SetCurrentRobotResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SetCurrentRobotResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__SetCurrentRobotResponse * soap_new_req__ns3__SetCurrentRobotResponse(struct soap *soap, int Result) { _ns3__SetCurrentRobotResponse *_p = soap_instantiate__ns3__SetCurrentRobotResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetCurrentRobotResponse::Result = Result; } return _p; }

inline _ns3__SetCurrentRobotResponse * soap_new_set__ns3__SetCurrentRobotResponse(struct soap *soap, int Result) { _ns3__SetCurrentRobotResponse *_p = soap_instantiate__ns3__SetCurrentRobotResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetCurrentRobotResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__SetCurrentRobotResponse(struct soap *soap, _ns3__SetCurrentRobotResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SetCurrentRobotResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__SetCurrentRobot
#define SOAP_TYPE_RobotData__ns3__SetCurrentRobot (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SetCurrentRobot(struct soap*, const char*, int, const _ns3__SetCurrentRobot *, const char*);
SOAP_FMAC3 _ns3__SetCurrentRobot * SOAP_FMAC4 soap_in__ns3__SetCurrentRobot(struct soap*, const char*, _ns3__SetCurrentRobot *, const char*);

#ifndef soap_write__ns3__SetCurrentRobot
#define soap_write__ns3__SetCurrentRobot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:SetCurrentRobot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetCurrentRobot * SOAP_FMAC4 soap_get__ns3__SetCurrentRobot(struct soap*, _ns3__SetCurrentRobot *, const char*, const char*);

#ifndef soap_read__ns3__SetCurrentRobot
#define soap_read__ns3__SetCurrentRobot(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__SetCurrentRobot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SetCurrentRobot * SOAP_FMAC2 soap_instantiate__ns3__SetCurrentRobot(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SetCurrentRobot * soap_new__ns3__SetCurrentRobot(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SetCurrentRobot(soap, n, NULL, NULL, NULL); }

inline _ns3__SetCurrentRobot * soap_new_req__ns3__SetCurrentRobot(struct soap *soap, std::string& RobotIp) { _ns3__SetCurrentRobot *_p = soap_instantiate__ns3__SetCurrentRobot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetCurrentRobot::RobotIp = RobotIp; } return _p; }

inline _ns3__SetCurrentRobot * soap_new_set__ns3__SetCurrentRobot(struct soap *soap, std::string& RobotIp) { _ns3__SetCurrentRobot *_p = soap_instantiate__ns3__SetCurrentRobot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetCurrentRobot::RobotIp = RobotIp; } return _p; }

inline void soap_delete__ns3__SetCurrentRobot(struct soap *soap, _ns3__SetCurrentRobot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SetCurrentRobot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__SetRobotTimeResponse
#define SOAP_TYPE_RobotData__ns3__SetRobotTimeResponse (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SetRobotTimeResponse(struct soap*, const char*, int, const _ns3__SetRobotTimeResponse *, const char*);
SOAP_FMAC3 _ns3__SetRobotTimeResponse * SOAP_FMAC4 soap_in__ns3__SetRobotTimeResponse(struct soap*, const char*, _ns3__SetRobotTimeResponse *, const char*);

#ifndef soap_write__ns3__SetRobotTimeResponse
#define soap_write__ns3__SetRobotTimeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:SetRobotTimeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetRobotTimeResponse * SOAP_FMAC4 soap_get__ns3__SetRobotTimeResponse(struct soap*, _ns3__SetRobotTimeResponse *, const char*, const char*);

#ifndef soap_read__ns3__SetRobotTimeResponse
#define soap_read__ns3__SetRobotTimeResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__SetRobotTimeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SetRobotTimeResponse * SOAP_FMAC2 soap_instantiate__ns3__SetRobotTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SetRobotTimeResponse * soap_new__ns3__SetRobotTimeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SetRobotTimeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__SetRobotTimeResponse * soap_new_req__ns3__SetRobotTimeResponse(struct soap *soap, int Result) { _ns3__SetRobotTimeResponse *_p = soap_instantiate__ns3__SetRobotTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetRobotTimeResponse::Result = Result; } return _p; }

inline _ns3__SetRobotTimeResponse * soap_new_set__ns3__SetRobotTimeResponse(struct soap *soap, int Result) { _ns3__SetRobotTimeResponse *_p = soap_instantiate__ns3__SetRobotTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetRobotTimeResponse::Result = Result; } return _p; }

inline void soap_delete__ns3__SetRobotTimeResponse(struct soap *soap, _ns3__SetRobotTimeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SetRobotTimeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__SetRobotTime
#define SOAP_TYPE_RobotData__ns3__SetRobotTime (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SetRobotTime(struct soap*, const char*, int, const _ns3__SetRobotTime *, const char*);
SOAP_FMAC3 _ns3__SetRobotTime * SOAP_FMAC4 soap_in__ns3__SetRobotTime(struct soap*, const char*, _ns3__SetRobotTime *, const char*);

#ifndef soap_write__ns3__SetRobotTime
#define soap_write__ns3__SetRobotTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:SetRobotTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetRobotTime * SOAP_FMAC4 soap_get__ns3__SetRobotTime(struct soap*, _ns3__SetRobotTime *, const char*, const char*);

#ifndef soap_read__ns3__SetRobotTime
#define soap_read__ns3__SetRobotTime(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__SetRobotTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__SetRobotTime * SOAP_FMAC2 soap_instantiate__ns3__SetRobotTime(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__SetRobotTime * soap_new__ns3__SetRobotTime(struct soap *soap, int n = -1) { return soap_instantiate__ns3__SetRobotTime(soap, n, NULL, NULL, NULL); }

inline _ns3__SetRobotTime * soap_new_req__ns3__SetRobotTime(struct soap *soap, std::string& RobotTime) { _ns3__SetRobotTime *_p = soap_instantiate__ns3__SetRobotTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetRobotTime::RobotTime = RobotTime; } return _p; }

inline _ns3__SetRobotTime * soap_new_set__ns3__SetRobotTime(struct soap *soap, std::string& RobotTime) { _ns3__SetRobotTime *_p = soap_instantiate__ns3__SetRobotTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__SetRobotTime::RobotTime = RobotTime; } return _p; }

inline void soap_delete__ns3__SetRobotTime(struct soap *soap, _ns3__SetRobotTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SetRobotTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotTimeResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotTimeResponse (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotTimeResponse(struct soap*, const char*, int, const _ns3__GetRobotTimeResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotTimeResponse * SOAP_FMAC4 soap_in__ns3__GetRobotTimeResponse(struct soap*, const char*, _ns3__GetRobotTimeResponse *, const char*);

#ifndef soap_write__ns3__GetRobotTimeResponse
#define soap_write__ns3__GetRobotTimeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotTimeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotTimeResponse * SOAP_FMAC4 soap_get__ns3__GetRobotTimeResponse(struct soap*, _ns3__GetRobotTimeResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotTimeResponse
#define soap_read__ns3__GetRobotTimeResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotTimeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotTimeResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotTimeResponse * soap_new__ns3__GetRobotTimeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotTimeResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotTimeResponse * soap_new_req__ns3__GetRobotTimeResponse(struct soap *soap, std::string& RobotTime) { _ns3__GetRobotTimeResponse *_p = soap_instantiate__ns3__GetRobotTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotTimeResponse::RobotTime = RobotTime; } return _p; }

inline _ns3__GetRobotTimeResponse * soap_new_set__ns3__GetRobotTimeResponse(struct soap *soap, std::string& RobotTime) { _ns3__GetRobotTimeResponse *_p = soap_instantiate__ns3__GetRobotTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotTimeResponse::RobotTime = RobotTime; } return _p; }

inline void soap_delete__ns3__GetRobotTimeResponse(struct soap *soap, _ns3__GetRobotTimeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotTimeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotTime
#define SOAP_TYPE_RobotData__ns3__GetRobotTime (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotTime(struct soap*, const char*, int, const _ns3__GetRobotTime *, const char*);
SOAP_FMAC3 _ns3__GetRobotTime * SOAP_FMAC4 soap_in__ns3__GetRobotTime(struct soap*, const char*, _ns3__GetRobotTime *, const char*);

#ifndef soap_write__ns3__GetRobotTime
#define soap_write__ns3__GetRobotTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotTime * SOAP_FMAC4 soap_get__ns3__GetRobotTime(struct soap*, _ns3__GetRobotTime *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotTime
#define soap_read__ns3__GetRobotTime(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotTime * SOAP_FMAC2 soap_instantiate__ns3__GetRobotTime(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotTime * soap_new__ns3__GetRobotTime(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotTime(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotTime * soap_new_req__ns3__GetRobotTime(struct soap *soap) { _ns3__GetRobotTime *_p = soap_instantiate__ns3__GetRobotTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__GetRobotTime * soap_new_set__ns3__GetRobotTime(struct soap *soap) { _ns3__GetRobotTime *_p = soap_instantiate__ns3__GetRobotTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__GetRobotTime(struct soap *soap, _ns3__GetRobotTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotInfoResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotInfoResponse (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotInfoResponse(struct soap*, const char*, int, const _ns3__GetRobotInfoResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotInfoResponse * SOAP_FMAC4 soap_in__ns3__GetRobotInfoResponse(struct soap*, const char*, _ns3__GetRobotInfoResponse *, const char*);

#ifndef soap_write__ns3__GetRobotInfoResponse
#define soap_write__ns3__GetRobotInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotInfoResponse * SOAP_FMAC4 soap_get__ns3__GetRobotInfoResponse(struct soap*, _ns3__GetRobotInfoResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotInfoResponse
#define soap_read__ns3__GetRobotInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotInfoResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotInfoResponse * soap_new__ns3__GetRobotInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotInfoResponse * soap_new_req__ns3__GetRobotInfoResponse(struct soap *soap, ns3__RobotInfos *Data) { _ns3__GetRobotInfoResponse *_p = soap_instantiate__ns3__GetRobotInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotInfoResponse::Data = Data; } return _p; }

inline _ns3__GetRobotInfoResponse * soap_new_set__ns3__GetRobotInfoResponse(struct soap *soap, ns3__RobotInfos *Data) { _ns3__GetRobotInfoResponse *_p = soap_instantiate__ns3__GetRobotInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotInfoResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotInfoResponse(struct soap *soap, _ns3__GetRobotInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotInfo
#define SOAP_TYPE_RobotData__ns3__GetRobotInfo (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotInfo(struct soap*, const char*, int, const _ns3__GetRobotInfo *, const char*);
SOAP_FMAC3 _ns3__GetRobotInfo * SOAP_FMAC4 soap_in__ns3__GetRobotInfo(struct soap*, const char*, _ns3__GetRobotInfo *, const char*);

#ifndef soap_write__ns3__GetRobotInfo
#define soap_write__ns3__GetRobotInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotInfo * SOAP_FMAC4 soap_get__ns3__GetRobotInfo(struct soap*, _ns3__GetRobotInfo *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotInfo
#define soap_read__ns3__GetRobotInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotInfo * SOAP_FMAC2 soap_instantiate__ns3__GetRobotInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotInfo * soap_new__ns3__GetRobotInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotInfo(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotInfo * soap_new_req__ns3__GetRobotInfo(struct soap *soap) { _ns3__GetRobotInfo *_p = soap_instantiate__ns3__GetRobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__GetRobotInfo * soap_new_set__ns3__GetRobotInfo(struct soap *soap) { _ns3__GetRobotInfo *_p = soap_instantiate__ns3__GetRobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__GetRobotInfo(struct soap *soap, _ns3__GetRobotInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotConnectResponse
#define SOAP_TYPE_RobotData__ns3__GetRobotConnectResponse (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotConnectResponse(struct soap*, const char*, int, const _ns3__GetRobotConnectResponse *, const char*);
SOAP_FMAC3 _ns3__GetRobotConnectResponse * SOAP_FMAC4 soap_in__ns3__GetRobotConnectResponse(struct soap*, const char*, _ns3__GetRobotConnectResponse *, const char*);

#ifndef soap_write__ns3__GetRobotConnectResponse
#define soap_write__ns3__GetRobotConnectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotConnectResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotConnectResponse * SOAP_FMAC4 soap_get__ns3__GetRobotConnectResponse(struct soap*, _ns3__GetRobotConnectResponse *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotConnectResponse
#define soap_read__ns3__GetRobotConnectResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotConnectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotConnectResponse * SOAP_FMAC2 soap_instantiate__ns3__GetRobotConnectResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotConnectResponse * soap_new__ns3__GetRobotConnectResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotConnectResponse(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotConnectResponse * soap_new_req__ns3__GetRobotConnectResponse(struct soap *soap, ns3__ConnectInfos *Data) { _ns3__GetRobotConnectResponse *_p = soap_instantiate__ns3__GetRobotConnectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotConnectResponse::Data = Data; } return _p; }

inline _ns3__GetRobotConnectResponse * soap_new_set__ns3__GetRobotConnectResponse(struct soap *soap, ns3__ConnectInfos *Data) { _ns3__GetRobotConnectResponse *_p = soap_instantiate__ns3__GetRobotConnectResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns3__GetRobotConnectResponse::Data = Data; } return _p; }

inline void soap_delete__ns3__GetRobotConnectResponse(struct soap *soap, _ns3__GetRobotConnectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotConnectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData__ns3__GetRobotConnect
#define SOAP_TYPE_RobotData__ns3__GetRobotConnect (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetRobotConnect(struct soap*, const char*, int, const _ns3__GetRobotConnect *, const char*);
SOAP_FMAC3 _ns3__GetRobotConnect * SOAP_FMAC4 soap_in__ns3__GetRobotConnect(struct soap*, const char*, _ns3__GetRobotConnect *, const char*);

#ifndef soap_write__ns3__GetRobotConnect
#define soap_write__ns3__GetRobotConnect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:GetRobotConnect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotConnect * SOAP_FMAC4 soap_get__ns3__GetRobotConnect(struct soap*, _ns3__GetRobotConnect *, const char*, const char*);

#ifndef soap_read__ns3__GetRobotConnect
#define soap_read__ns3__GetRobotConnect(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__ns3__GetRobotConnect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns3__GetRobotConnect * SOAP_FMAC2 soap_instantiate__ns3__GetRobotConnect(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__GetRobotConnect * soap_new__ns3__GetRobotConnect(struct soap *soap, int n = -1) { return soap_instantiate__ns3__GetRobotConnect(soap, n, NULL, NULL, NULL); }

inline _ns3__GetRobotConnect * soap_new_req__ns3__GetRobotConnect(struct soap *soap) { _ns3__GetRobotConnect *_p = soap_instantiate__ns3__GetRobotConnect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns3__GetRobotConnect * soap_new_set__ns3__GetRobotConnect(struct soap *soap) { _ns3__GetRobotConnect *_p = soap_instantiate__ns3__GetRobotConnect(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns3__GetRobotConnect(struct soap *soap, _ns3__GetRobotConnect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetRobotConnect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__TaskExcuteInfos
#define SOAP_TYPE_RobotData_ns3__TaskExcuteInfos (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TaskExcuteInfos(struct soap*, const char*, int, const ns3__TaskExcuteInfos *, const char*);
SOAP_FMAC3 ns3__TaskExcuteInfos * SOAP_FMAC4 soap_in_ns3__TaskExcuteInfos(struct soap*, const char*, ns3__TaskExcuteInfos *, const char*);

#ifndef soap_write_ns3__TaskExcuteInfos
#define soap_write_ns3__TaskExcuteInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:TaskExcuteInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskExcuteInfos * SOAP_FMAC4 soap_get_ns3__TaskExcuteInfos(struct soap*, ns3__TaskExcuteInfos *, const char*, const char*);

#ifndef soap_read_ns3__TaskExcuteInfos
#define soap_read_ns3__TaskExcuteInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__TaskExcuteInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TaskExcuteInfos * SOAP_FMAC2 soap_instantiate_ns3__TaskExcuteInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TaskExcuteInfos * soap_new_ns3__TaskExcuteInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TaskExcuteInfos(soap, n, NULL, NULL, NULL); }

inline ns3__TaskExcuteInfos * soap_new_req_ns3__TaskExcuteInfos(struct soap *soap) { ns3__TaskExcuteInfos *_p = soap_instantiate_ns3__TaskExcuteInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__TaskExcuteInfos * soap_new_set_ns3__TaskExcuteInfos(struct soap *soap, std::vector<ns3__TaskExcuteInfo * >& Infos) { ns3__TaskExcuteInfos *_p = soap_instantiate_ns3__TaskExcuteInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskExcuteInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__TaskExcuteInfos(struct soap *soap, ns3__TaskExcuteInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TaskExcuteInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__TaskExcuteInfo
#define SOAP_TYPE_RobotData_ns3__TaskExcuteInfo (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TaskExcuteInfo(struct soap*, const char*, int, const ns3__TaskExcuteInfo *, const char*);
SOAP_FMAC3 ns3__TaskExcuteInfo * SOAP_FMAC4 soap_in_ns3__TaskExcuteInfo(struct soap*, const char*, ns3__TaskExcuteInfo *, const char*);

#ifndef soap_write_ns3__TaskExcuteInfo
#define soap_write_ns3__TaskExcuteInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:TaskExcuteInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskExcuteInfo * SOAP_FMAC4 soap_get_ns3__TaskExcuteInfo(struct soap*, ns3__TaskExcuteInfo *, const char*, const char*);

#ifndef soap_read_ns3__TaskExcuteInfo
#define soap_read_ns3__TaskExcuteInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__TaskExcuteInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TaskExcuteInfo * SOAP_FMAC2 soap_instantiate_ns3__TaskExcuteInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TaskExcuteInfo * soap_new_ns3__TaskExcuteInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TaskExcuteInfo(soap, n, NULL, NULL, NULL); }

inline ns3__TaskExcuteInfo * soap_new_req_ns3__TaskExcuteInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::string& TargetId, std::string& PointId, std::string& PointName, std::string& PointType, std::string& ExcuteTime, std::string& ExcuteValue, std::string& ExcuteUnit, std::string& ExcuteState, std::string& ExcuteDesc, std::string& HDPicture, std::string& InfraredPicture, std::string& OtherFile) { ns3__TaskExcuteInfo *_p = soap_instantiate_ns3__TaskExcuteInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskExcuteInfo::TaskId = TaskId; _p->ns3__TaskExcuteInfo::TaskName = TaskName; _p->ns3__TaskExcuteInfo::TaskType = TaskType; _p->ns3__TaskExcuteInfo::TaskPathId = TaskPathId; _p->ns3__TaskExcuteInfo::TargetId = TargetId; _p->ns3__TaskExcuteInfo::PointId = PointId; _p->ns3__TaskExcuteInfo::PointName = PointName; _p->ns3__TaskExcuteInfo::PointType = PointType; _p->ns3__TaskExcuteInfo::ExcuteTime = ExcuteTime; _p->ns3__TaskExcuteInfo::ExcuteValue = ExcuteValue; _p->ns3__TaskExcuteInfo::ExcuteUnit = ExcuteUnit; _p->ns3__TaskExcuteInfo::ExcuteState = ExcuteState; _p->ns3__TaskExcuteInfo::ExcuteDesc = ExcuteDesc; _p->ns3__TaskExcuteInfo::HDPicture = HDPicture; _p->ns3__TaskExcuteInfo::InfraredPicture = InfraredPicture; _p->ns3__TaskExcuteInfo::OtherFile = OtherFile; } return _p; }

inline ns3__TaskExcuteInfo * soap_new_set_ns3__TaskExcuteInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::string& TargetId, std::string& PointId, std::string& PointName, std::string& PointType, std::string& ExcuteTime, std::string& ExcuteValue, std::string& ExcuteUnit, std::string& ExcuteState, std::string& ExcuteDesc, std::string& HDPicture, std::string& InfraredPicture, std::string& OtherFile) { ns3__TaskExcuteInfo *_p = soap_instantiate_ns3__TaskExcuteInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskExcuteInfo::TaskId = TaskId; _p->ns3__TaskExcuteInfo::TaskName = TaskName; _p->ns3__TaskExcuteInfo::TaskType = TaskType; _p->ns3__TaskExcuteInfo::TaskPathId = TaskPathId; _p->ns3__TaskExcuteInfo::TargetId = TargetId; _p->ns3__TaskExcuteInfo::PointId = PointId; _p->ns3__TaskExcuteInfo::PointName = PointName; _p->ns3__TaskExcuteInfo::PointType = PointType; _p->ns3__TaskExcuteInfo::ExcuteTime = ExcuteTime; _p->ns3__TaskExcuteInfo::ExcuteValue = ExcuteValue; _p->ns3__TaskExcuteInfo::ExcuteUnit = ExcuteUnit; _p->ns3__TaskExcuteInfo::ExcuteState = ExcuteState; _p->ns3__TaskExcuteInfo::ExcuteDesc = ExcuteDesc; _p->ns3__TaskExcuteInfo::HDPicture = HDPicture; _p->ns3__TaskExcuteInfo::InfraredPicture = InfraredPicture; _p->ns3__TaskExcuteInfo::OtherFile = OtherFile; } return _p; }

inline void soap_delete_ns3__TaskExcuteInfo(struct soap *soap, ns3__TaskExcuteInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TaskExcuteInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__TaskFinishInfos
#define SOAP_TYPE_RobotData_ns3__TaskFinishInfos (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TaskFinishInfos(struct soap*, const char*, int, const ns3__TaskFinishInfos *, const char*);
SOAP_FMAC3 ns3__TaskFinishInfos * SOAP_FMAC4 soap_in_ns3__TaskFinishInfos(struct soap*, const char*, ns3__TaskFinishInfos *, const char*);

#ifndef soap_write_ns3__TaskFinishInfos
#define soap_write_ns3__TaskFinishInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:TaskFinishInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskFinishInfos * SOAP_FMAC4 soap_get_ns3__TaskFinishInfos(struct soap*, ns3__TaskFinishInfos *, const char*, const char*);

#ifndef soap_read_ns3__TaskFinishInfos
#define soap_read_ns3__TaskFinishInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__TaskFinishInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TaskFinishInfos * SOAP_FMAC2 soap_instantiate_ns3__TaskFinishInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TaskFinishInfos * soap_new_ns3__TaskFinishInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TaskFinishInfos(soap, n, NULL, NULL, NULL); }

inline ns3__TaskFinishInfos * soap_new_req_ns3__TaskFinishInfos(struct soap *soap) { ns3__TaskFinishInfos *_p = soap_instantiate_ns3__TaskFinishInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__TaskFinishInfos * soap_new_set_ns3__TaskFinishInfos(struct soap *soap, std::vector<ns3__TaskFinishInfo * >& Infos) { ns3__TaskFinishInfos *_p = soap_instantiate_ns3__TaskFinishInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskFinishInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__TaskFinishInfos(struct soap *soap, ns3__TaskFinishInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TaskFinishInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__TaskFinishInfo
#define SOAP_TYPE_RobotData_ns3__TaskFinishInfo (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TaskFinishInfo(struct soap*, const char*, int, const ns3__TaskFinishInfo *, const char*);
SOAP_FMAC3 ns3__TaskFinishInfo * SOAP_FMAC4 soap_in_ns3__TaskFinishInfo(struct soap*, const char*, ns3__TaskFinishInfo *, const char*);

#ifndef soap_write_ns3__TaskFinishInfo
#define soap_write_ns3__TaskFinishInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:TaskFinishInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskFinishInfo * SOAP_FMAC4 soap_get_ns3__TaskFinishInfo(struct soap*, ns3__TaskFinishInfo *, const char*, const char*);

#ifndef soap_read_ns3__TaskFinishInfo
#define soap_read_ns3__TaskFinishInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__TaskFinishInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TaskFinishInfo * SOAP_FMAC2 soap_instantiate_ns3__TaskFinishInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TaskFinishInfo * soap_new_ns3__TaskFinishInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TaskFinishInfo(soap, n, NULL, NULL, NULL); }

inline ns3__TaskFinishInfo * soap_new_req_ns3__TaskFinishInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::string& StartTime, std::string& EndTime, std::string& FinishState, std::string& ExcuteRobot) { ns3__TaskFinishInfo *_p = soap_instantiate_ns3__TaskFinishInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskFinishInfo::TaskId = TaskId; _p->ns3__TaskFinishInfo::TaskName = TaskName; _p->ns3__TaskFinishInfo::TaskType = TaskType; _p->ns3__TaskFinishInfo::TaskPathId = TaskPathId; _p->ns3__TaskFinishInfo::StartTime = StartTime; _p->ns3__TaskFinishInfo::EndTime = EndTime; _p->ns3__TaskFinishInfo::FinishState = FinishState; _p->ns3__TaskFinishInfo::ExcuteRobot = ExcuteRobot; } return _p; }

inline ns3__TaskFinishInfo * soap_new_set_ns3__TaskFinishInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::vector<std::string >& PointList, std::string& StartTime, std::string& EndTime, std::string& FinishState, std::string& ExcuteRobot) { ns3__TaskFinishInfo *_p = soap_instantiate_ns3__TaskFinishInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskFinishInfo::TaskId = TaskId; _p->ns3__TaskFinishInfo::TaskName = TaskName; _p->ns3__TaskFinishInfo::TaskType = TaskType; _p->ns3__TaskFinishInfo::TaskPathId = TaskPathId; _p->ns3__TaskFinishInfo::PointList = PointList; _p->ns3__TaskFinishInfo::StartTime = StartTime; _p->ns3__TaskFinishInfo::EndTime = EndTime; _p->ns3__TaskFinishInfo::FinishState = FinishState; _p->ns3__TaskFinishInfo::ExcuteRobot = ExcuteRobot; } return _p; }

inline void soap_delete_ns3__TaskFinishInfo(struct soap *soap, ns3__TaskFinishInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TaskFinishInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__TaskExcuteData
#define SOAP_TYPE_RobotData_ns3__TaskExcuteData (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TaskExcuteData(struct soap*, const char*, int, const ns3__TaskExcuteData *, const char*);
SOAP_FMAC3 ns3__TaskExcuteData * SOAP_FMAC4 soap_in_ns3__TaskExcuteData(struct soap*, const char*, ns3__TaskExcuteData *, const char*);

#ifndef soap_write_ns3__TaskExcuteData
#define soap_write_ns3__TaskExcuteData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:TaskExcuteData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskExcuteData * SOAP_FMAC4 soap_get_ns3__TaskExcuteData(struct soap*, ns3__TaskExcuteData *, const char*, const char*);

#ifndef soap_read_ns3__TaskExcuteData
#define soap_read_ns3__TaskExcuteData(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__TaskExcuteData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TaskExcuteData * SOAP_FMAC2 soap_instantiate_ns3__TaskExcuteData(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TaskExcuteData * soap_new_ns3__TaskExcuteData(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TaskExcuteData(soap, n, NULL, NULL, NULL); }

inline ns3__TaskExcuteData * soap_new_req_ns3__TaskExcuteData(struct soap *soap, std::string& RobotIp, std::string& TaskType, std::string& TaskId, std::string& TaskName, std::string& PatrolDeviceName, std::string& PatrolDeviceId, int TotalDeviceSize, int ErrorDeviceSize, int FinishDeviceSize, int TaskFinishPercentage) { ns3__TaskExcuteData *_p = soap_instantiate_ns3__TaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskExcuteData::RobotIp = RobotIp; _p->ns3__TaskExcuteData::TaskType = TaskType; _p->ns3__TaskExcuteData::TaskId = TaskId; _p->ns3__TaskExcuteData::TaskName = TaskName; _p->ns3__TaskExcuteData::PatrolDeviceName = PatrolDeviceName; _p->ns3__TaskExcuteData::PatrolDeviceId = PatrolDeviceId; _p->ns3__TaskExcuteData::TotalDeviceSize = TotalDeviceSize; _p->ns3__TaskExcuteData::ErrorDeviceSize = ErrorDeviceSize; _p->ns3__TaskExcuteData::FinishDeviceSize = FinishDeviceSize; _p->ns3__TaskExcuteData::TaskFinishPercentage = TaskFinishPercentage; } return _p; }

inline ns3__TaskExcuteData * soap_new_set_ns3__TaskExcuteData(struct soap *soap, std::string& RobotIp, std::string& TaskType, std::string& TaskId, std::string& TaskName, std::string& PatrolDeviceName, std::string& PatrolDeviceId, int TotalDeviceSize, int ErrorDeviceSize, int FinishDeviceSize, int TaskFinishPercentage) { ns3__TaskExcuteData *_p = soap_instantiate_ns3__TaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskExcuteData::RobotIp = RobotIp; _p->ns3__TaskExcuteData::TaskType = TaskType; _p->ns3__TaskExcuteData::TaskId = TaskId; _p->ns3__TaskExcuteData::TaskName = TaskName; _p->ns3__TaskExcuteData::PatrolDeviceName = PatrolDeviceName; _p->ns3__TaskExcuteData::PatrolDeviceId = PatrolDeviceId; _p->ns3__TaskExcuteData::TotalDeviceSize = TotalDeviceSize; _p->ns3__TaskExcuteData::ErrorDeviceSize = ErrorDeviceSize; _p->ns3__TaskExcuteData::FinishDeviceSize = FinishDeviceSize; _p->ns3__TaskExcuteData::TaskFinishPercentage = TaskFinishPercentage; } return _p; }

inline void soap_delete_ns3__TaskExcuteData(struct soap *soap, ns3__TaskExcuteData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TaskExcuteData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__TaskPathInfos
#define SOAP_TYPE_RobotData_ns3__TaskPathInfos (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TaskPathInfos(struct soap*, const char*, int, const ns3__TaskPathInfos *, const char*);
SOAP_FMAC3 ns3__TaskPathInfos * SOAP_FMAC4 soap_in_ns3__TaskPathInfos(struct soap*, const char*, ns3__TaskPathInfos *, const char*);

#ifndef soap_write_ns3__TaskPathInfos
#define soap_write_ns3__TaskPathInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:TaskPathInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskPathInfos * SOAP_FMAC4 soap_get_ns3__TaskPathInfos(struct soap*, ns3__TaskPathInfos *, const char*, const char*);

#ifndef soap_read_ns3__TaskPathInfos
#define soap_read_ns3__TaskPathInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__TaskPathInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TaskPathInfos * SOAP_FMAC2 soap_instantiate_ns3__TaskPathInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TaskPathInfos * soap_new_ns3__TaskPathInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TaskPathInfos(soap, n, NULL, NULL, NULL); }

inline ns3__TaskPathInfos * soap_new_req_ns3__TaskPathInfos(struct soap *soap) { ns3__TaskPathInfos *_p = soap_instantiate_ns3__TaskPathInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__TaskPathInfos * soap_new_set_ns3__TaskPathInfos(struct soap *soap, std::vector<ns3__TaskPathInfo * >& Infos) { ns3__TaskPathInfos *_p = soap_instantiate_ns3__TaskPathInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskPathInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__TaskPathInfos(struct soap *soap, ns3__TaskPathInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TaskPathInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__TaskPathInfo
#define SOAP_TYPE_RobotData_ns3__TaskPathInfo (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TaskPathInfo(struct soap*, const char*, int, const ns3__TaskPathInfo *, const char*);
SOAP_FMAC3 ns3__TaskPathInfo * SOAP_FMAC4 soap_in_ns3__TaskPathInfo(struct soap*, const char*, ns3__TaskPathInfo *, const char*);

#ifndef soap_write_ns3__TaskPathInfo
#define soap_write_ns3__TaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:TaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskPathInfo * SOAP_FMAC4 soap_get_ns3__TaskPathInfo(struct soap*, ns3__TaskPathInfo *, const char*, const char*);

#ifndef soap_read_ns3__TaskPathInfo
#define soap_read_ns3__TaskPathInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__TaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__TaskPathInfo * SOAP_FMAC2 soap_instantiate_ns3__TaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TaskPathInfo * soap_new_ns3__TaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__TaskPathInfo(soap, n, NULL, NULL, NULL); }

inline ns3__TaskPathInfo * soap_new_req_ns3__TaskPathInfo(struct soap *soap, std::string& TaskPathId, std::string& TaskPathName, std::string& TaskPathType, std::string& CreateTime, int FinishAction) { ns3__TaskPathInfo *_p = soap_instantiate_ns3__TaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskPathInfo::TaskPathId = TaskPathId; _p->ns3__TaskPathInfo::TaskPathName = TaskPathName; _p->ns3__TaskPathInfo::TaskPathType = TaskPathType; _p->ns3__TaskPathInfo::CreateTime = CreateTime; _p->ns3__TaskPathInfo::FinishAction = FinishAction; } return _p; }

inline ns3__TaskPathInfo * soap_new_set_ns3__TaskPathInfo(struct soap *soap, std::string& TaskPathId, std::string& TaskPathName, std::vector<std::string >& PointList, std::string& TaskPathType, std::string& CreateTime, int FinishAction) { ns3__TaskPathInfo *_p = soap_instantiate_ns3__TaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__TaskPathInfo::TaskPathId = TaskPathId; _p->ns3__TaskPathInfo::TaskPathName = TaskPathName; _p->ns3__TaskPathInfo::PointList = PointList; _p->ns3__TaskPathInfo::TaskPathType = TaskPathType; _p->ns3__TaskPathInfo::CreateTime = CreateTime; _p->ns3__TaskPathInfo::FinishAction = FinishAction; } return _p; }

inline void soap_delete_ns3__TaskPathInfo(struct soap *soap, ns3__TaskPathInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__TaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__PatrolPointInfos
#define SOAP_TYPE_RobotData_ns3__PatrolPointInfos (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PatrolPointInfos(struct soap*, const char*, int, const ns3__PatrolPointInfos *, const char*);
SOAP_FMAC3 ns3__PatrolPointInfos * SOAP_FMAC4 soap_in_ns3__PatrolPointInfos(struct soap*, const char*, ns3__PatrolPointInfos *, const char*);

#ifndef soap_write_ns3__PatrolPointInfos
#define soap_write_ns3__PatrolPointInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:PatrolPointInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__PatrolPointInfos * SOAP_FMAC4 soap_get_ns3__PatrolPointInfos(struct soap*, ns3__PatrolPointInfos *, const char*, const char*);

#ifndef soap_read_ns3__PatrolPointInfos
#define soap_read_ns3__PatrolPointInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__PatrolPointInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__PatrolPointInfos * SOAP_FMAC2 soap_instantiate_ns3__PatrolPointInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PatrolPointInfos * soap_new_ns3__PatrolPointInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__PatrolPointInfos(soap, n, NULL, NULL, NULL); }

inline ns3__PatrolPointInfos * soap_new_req_ns3__PatrolPointInfos(struct soap *soap) { ns3__PatrolPointInfos *_p = soap_instantiate_ns3__PatrolPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__PatrolPointInfos * soap_new_set_ns3__PatrolPointInfos(struct soap *soap, std::vector<ns3__PatrolPointInfo * >& Infos) { ns3__PatrolPointInfos *_p = soap_instantiate_ns3__PatrolPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__PatrolPointInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__PatrolPointInfos(struct soap *soap, ns3__PatrolPointInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__PatrolPointInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__PatrolPointInfo
#define SOAP_TYPE_RobotData_ns3__PatrolPointInfo (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PatrolPointInfo(struct soap*, const char*, int, const ns3__PatrolPointInfo *, const char*);
SOAP_FMAC3 ns3__PatrolPointInfo * SOAP_FMAC4 soap_in_ns3__PatrolPointInfo(struct soap*, const char*, ns3__PatrolPointInfo *, const char*);

#ifndef soap_write_ns3__PatrolPointInfo
#define soap_write_ns3__PatrolPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:PatrolPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__PatrolPointInfo * SOAP_FMAC4 soap_get_ns3__PatrolPointInfo(struct soap*, ns3__PatrolPointInfo *, const char*, const char*);

#ifndef soap_read_ns3__PatrolPointInfo
#define soap_read_ns3__PatrolPointInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__PatrolPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__PatrolPointInfo * SOAP_FMAC2 soap_instantiate_ns3__PatrolPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PatrolPointInfo * soap_new_ns3__PatrolPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__PatrolPointInfo(soap, n, NULL, NULL, NULL); }

inline ns3__PatrolPointInfo * soap_new_req_ns3__PatrolPointInfo(struct soap *soap, std::string& PointId, std::string& PointName, std::string& PointType, std::string& DeviceType, std::string& AreaId, std::string& DockId, std::string& RobotIp) { ns3__PatrolPointInfo *_p = soap_instantiate_ns3__PatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__PatrolPointInfo::PointId = PointId; _p->ns3__PatrolPointInfo::PointName = PointName; _p->ns3__PatrolPointInfo::PointType = PointType; _p->ns3__PatrolPointInfo::DeviceType = DeviceType; _p->ns3__PatrolPointInfo::AreaId = AreaId; _p->ns3__PatrolPointInfo::DockId = DockId; _p->ns3__PatrolPointInfo::RobotIp = RobotIp; } return _p; }

inline ns3__PatrolPointInfo * soap_new_set_ns3__PatrolPointInfo(struct soap *soap, std::string& PointId, std::string& PointName, std::string& PointType, std::string& DeviceType, std::string& AreaId, std::string& DockId, std::string& RobotIp) { ns3__PatrolPointInfo *_p = soap_instantiate_ns3__PatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__PatrolPointInfo::PointId = PointId; _p->ns3__PatrolPointInfo::PointName = PointName; _p->ns3__PatrolPointInfo::PointType = PointType; _p->ns3__PatrolPointInfo::DeviceType = DeviceType; _p->ns3__PatrolPointInfo::AreaId = AreaId; _p->ns3__PatrolPointInfo::DockId = DockId; _p->ns3__PatrolPointInfo::RobotIp = RobotIp; } return _p; }

inline void soap_delete_ns3__PatrolPointInfo(struct soap *soap, ns3__PatrolPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__PatrolPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__DockPointInfos
#define SOAP_TYPE_RobotData_ns3__DockPointInfos (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DockPointInfos(struct soap*, const char*, int, const ns3__DockPointInfos *, const char*);
SOAP_FMAC3 ns3__DockPointInfos * SOAP_FMAC4 soap_in_ns3__DockPointInfos(struct soap*, const char*, ns3__DockPointInfos *, const char*);

#ifndef soap_write_ns3__DockPointInfos
#define soap_write_ns3__DockPointInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:DockPointInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__DockPointInfos * SOAP_FMAC4 soap_get_ns3__DockPointInfos(struct soap*, ns3__DockPointInfos *, const char*, const char*);

#ifndef soap_read_ns3__DockPointInfos
#define soap_read_ns3__DockPointInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__DockPointInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__DockPointInfos * SOAP_FMAC2 soap_instantiate_ns3__DockPointInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DockPointInfos * soap_new_ns3__DockPointInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__DockPointInfos(soap, n, NULL, NULL, NULL); }

inline ns3__DockPointInfos * soap_new_req_ns3__DockPointInfos(struct soap *soap) { ns3__DockPointInfos *_p = soap_instantiate_ns3__DockPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__DockPointInfos * soap_new_set_ns3__DockPointInfos(struct soap *soap, std::vector<ns3__DockPointInfo * >& Infos) { ns3__DockPointInfos *_p = soap_instantiate_ns3__DockPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__DockPointInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__DockPointInfos(struct soap *soap, ns3__DockPointInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__DockPointInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__DockPointInfo
#define SOAP_TYPE_RobotData_ns3__DockPointInfo (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DockPointInfo(struct soap*, const char*, int, const ns3__DockPointInfo *, const char*);
SOAP_FMAC3 ns3__DockPointInfo * SOAP_FMAC4 soap_in_ns3__DockPointInfo(struct soap*, const char*, ns3__DockPointInfo *, const char*);

#ifndef soap_write_ns3__DockPointInfo
#define soap_write_ns3__DockPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:DockPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__DockPointInfo * SOAP_FMAC4 soap_get_ns3__DockPointInfo(struct soap*, ns3__DockPointInfo *, const char*, const char*);

#ifndef soap_read_ns3__DockPointInfo
#define soap_read_ns3__DockPointInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__DockPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__DockPointInfo * SOAP_FMAC2 soap_instantiate_ns3__DockPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DockPointInfo * soap_new_ns3__DockPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__DockPointInfo(soap, n, NULL, NULL, NULL); }

inline ns3__DockPointInfo * soap_new_req_ns3__DockPointInfo(struct soap *soap, std::string& DockId, std::string& DockX, std::string& DockY) { ns3__DockPointInfo *_p = soap_instantiate_ns3__DockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__DockPointInfo::DockId = DockId; _p->ns3__DockPointInfo::DockX = DockX; _p->ns3__DockPointInfo::DockY = DockY; } return _p; }

inline ns3__DockPointInfo * soap_new_set_ns3__DockPointInfo(struct soap *soap, std::string& DockId, std::string& DockX, std::string& DockY, std::vector<std::string >& PointList) { ns3__DockPointInfo *_p = soap_instantiate_ns3__DockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__DockPointInfo::DockId = DockId; _p->ns3__DockPointInfo::DockX = DockX; _p->ns3__DockPointInfo::DockY = DockY; _p->ns3__DockPointInfo::PointList = PointList; } return _p; }

inline void soap_delete_ns3__DockPointInfo(struct soap *soap, ns3__DockPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__DockPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__MapEdgeInfos
#define SOAP_TYPE_RobotData_ns3__MapEdgeInfos (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MapEdgeInfos(struct soap*, const char*, int, const ns3__MapEdgeInfos *, const char*);
SOAP_FMAC3 ns3__MapEdgeInfos * SOAP_FMAC4 soap_in_ns3__MapEdgeInfos(struct soap*, const char*, ns3__MapEdgeInfos *, const char*);

#ifndef soap_write_ns3__MapEdgeInfos
#define soap_write_ns3__MapEdgeInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:MapEdgeInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__MapEdgeInfos * SOAP_FMAC4 soap_get_ns3__MapEdgeInfos(struct soap*, ns3__MapEdgeInfos *, const char*, const char*);

#ifndef soap_read_ns3__MapEdgeInfos
#define soap_read_ns3__MapEdgeInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__MapEdgeInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__MapEdgeInfos * SOAP_FMAC2 soap_instantiate_ns3__MapEdgeInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MapEdgeInfos * soap_new_ns3__MapEdgeInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__MapEdgeInfos(soap, n, NULL, NULL, NULL); }

inline ns3__MapEdgeInfos * soap_new_req_ns3__MapEdgeInfos(struct soap *soap) { ns3__MapEdgeInfos *_p = soap_instantiate_ns3__MapEdgeInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__MapEdgeInfos * soap_new_set_ns3__MapEdgeInfos(struct soap *soap, std::vector<ns3__MapEdgeInfo * >& Infos) { ns3__MapEdgeInfos *_p = soap_instantiate_ns3__MapEdgeInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__MapEdgeInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__MapEdgeInfos(struct soap *soap, ns3__MapEdgeInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__MapEdgeInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__MapEdgeInfo
#define SOAP_TYPE_RobotData_ns3__MapEdgeInfo (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MapEdgeInfo(struct soap*, const char*, int, const ns3__MapEdgeInfo *, const char*);
SOAP_FMAC3 ns3__MapEdgeInfo * SOAP_FMAC4 soap_in_ns3__MapEdgeInfo(struct soap*, const char*, ns3__MapEdgeInfo *, const char*);

#ifndef soap_write_ns3__MapEdgeInfo
#define soap_write_ns3__MapEdgeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:MapEdgeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__MapEdgeInfo * SOAP_FMAC4 soap_get_ns3__MapEdgeInfo(struct soap*, ns3__MapEdgeInfo *, const char*, const char*);

#ifndef soap_read_ns3__MapEdgeInfo
#define soap_read_ns3__MapEdgeInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__MapEdgeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__MapEdgeInfo * SOAP_FMAC2 soap_instantiate_ns3__MapEdgeInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MapEdgeInfo * soap_new_ns3__MapEdgeInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__MapEdgeInfo(soap, n, NULL, NULL, NULL); }

inline ns3__MapEdgeInfo * soap_new_req_ns3__MapEdgeInfo(struct soap *soap, std::string& EdgeId, std::string& StartNodeId, std::string& EndNodeId, std::string& StartNodeX, std::string& StartNodeY, std::string& EndNodeX, std::string& EndNodeY, std::string& FirstControlX, std::string& FirstControlY, std::string& SecondControlX, std::string& SecondControlY) { ns3__MapEdgeInfo *_p = soap_instantiate_ns3__MapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__MapEdgeInfo::EdgeId = EdgeId; _p->ns3__MapEdgeInfo::StartNodeId = StartNodeId; _p->ns3__MapEdgeInfo::EndNodeId = EndNodeId; _p->ns3__MapEdgeInfo::StartNodeX = StartNodeX; _p->ns3__MapEdgeInfo::StartNodeY = StartNodeY; _p->ns3__MapEdgeInfo::EndNodeX = EndNodeX; _p->ns3__MapEdgeInfo::EndNodeY = EndNodeY; _p->ns3__MapEdgeInfo::FirstControlX = FirstControlX; _p->ns3__MapEdgeInfo::FirstControlY = FirstControlY; _p->ns3__MapEdgeInfo::SecondControlX = SecondControlX; _p->ns3__MapEdgeInfo::SecondControlY = SecondControlY; } return _p; }

inline ns3__MapEdgeInfo * soap_new_set_ns3__MapEdgeInfo(struct soap *soap, std::string& EdgeId, std::string& StartNodeId, std::string& EndNodeId, std::string& StartNodeX, std::string& StartNodeY, std::string& EndNodeX, std::string& EndNodeY, std::string& FirstControlX, std::string& FirstControlY, std::string& SecondControlX, std::string& SecondControlY) { ns3__MapEdgeInfo *_p = soap_instantiate_ns3__MapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__MapEdgeInfo::EdgeId = EdgeId; _p->ns3__MapEdgeInfo::StartNodeId = StartNodeId; _p->ns3__MapEdgeInfo::EndNodeId = EndNodeId; _p->ns3__MapEdgeInfo::StartNodeX = StartNodeX; _p->ns3__MapEdgeInfo::StartNodeY = StartNodeY; _p->ns3__MapEdgeInfo::EndNodeX = EndNodeX; _p->ns3__MapEdgeInfo::EndNodeY = EndNodeY; _p->ns3__MapEdgeInfo::FirstControlX = FirstControlX; _p->ns3__MapEdgeInfo::FirstControlY = FirstControlY; _p->ns3__MapEdgeInfo::SecondControlX = SecondControlX; _p->ns3__MapEdgeInfo::SecondControlY = SecondControlY; } return _p; }

inline void soap_delete_ns3__MapEdgeInfo(struct soap *soap, ns3__MapEdgeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__MapEdgeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__PatrolAreaInfos
#define SOAP_TYPE_RobotData_ns3__PatrolAreaInfos (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PatrolAreaInfos(struct soap*, const char*, int, const ns3__PatrolAreaInfos *, const char*);
SOAP_FMAC3 ns3__PatrolAreaInfos * SOAP_FMAC4 soap_in_ns3__PatrolAreaInfos(struct soap*, const char*, ns3__PatrolAreaInfos *, const char*);

#ifndef soap_write_ns3__PatrolAreaInfos
#define soap_write_ns3__PatrolAreaInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:PatrolAreaInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__PatrolAreaInfos * SOAP_FMAC4 soap_get_ns3__PatrolAreaInfos(struct soap*, ns3__PatrolAreaInfos *, const char*, const char*);

#ifndef soap_read_ns3__PatrolAreaInfos
#define soap_read_ns3__PatrolAreaInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__PatrolAreaInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__PatrolAreaInfos * SOAP_FMAC2 soap_instantiate_ns3__PatrolAreaInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PatrolAreaInfos * soap_new_ns3__PatrolAreaInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__PatrolAreaInfos(soap, n, NULL, NULL, NULL); }

inline ns3__PatrolAreaInfos * soap_new_req_ns3__PatrolAreaInfos(struct soap *soap) { ns3__PatrolAreaInfos *_p = soap_instantiate_ns3__PatrolAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__PatrolAreaInfos * soap_new_set_ns3__PatrolAreaInfos(struct soap *soap, std::vector<ns3__PatrolAreaInfo * >& Infos) { ns3__PatrolAreaInfos *_p = soap_instantiate_ns3__PatrolAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__PatrolAreaInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__PatrolAreaInfos(struct soap *soap, ns3__PatrolAreaInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__PatrolAreaInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__PatrolAreaInfo
#define SOAP_TYPE_RobotData_ns3__PatrolAreaInfo (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PatrolAreaInfo(struct soap*, const char*, int, const ns3__PatrolAreaInfo *, const char*);
SOAP_FMAC3 ns3__PatrolAreaInfo * SOAP_FMAC4 soap_in_ns3__PatrolAreaInfo(struct soap*, const char*, ns3__PatrolAreaInfo *, const char*);

#ifndef soap_write_ns3__PatrolAreaInfo
#define soap_write_ns3__PatrolAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:PatrolAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__PatrolAreaInfo * SOAP_FMAC4 soap_get_ns3__PatrolAreaInfo(struct soap*, ns3__PatrolAreaInfo *, const char*, const char*);

#ifndef soap_read_ns3__PatrolAreaInfo
#define soap_read_ns3__PatrolAreaInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__PatrolAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__PatrolAreaInfo * SOAP_FMAC2 soap_instantiate_ns3__PatrolAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PatrolAreaInfo * soap_new_ns3__PatrolAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__PatrolAreaInfo(soap, n, NULL, NULL, NULL); }

inline ns3__PatrolAreaInfo * soap_new_req_ns3__PatrolAreaInfo(struct soap *soap, std::string& AreaId, std::string& AreaName, std::string& ParentId, std::string& RobotIp) { ns3__PatrolAreaInfo *_p = soap_instantiate_ns3__PatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__PatrolAreaInfo::AreaId = AreaId; _p->ns3__PatrolAreaInfo::AreaName = AreaName; _p->ns3__PatrolAreaInfo::ParentId = ParentId; _p->ns3__PatrolAreaInfo::RobotIp = RobotIp; } return _p; }

inline ns3__PatrolAreaInfo * soap_new_set_ns3__PatrolAreaInfo(struct soap *soap, std::string& AreaId, std::string& AreaName, std::string& ParentId, std::string& RobotIp) { ns3__PatrolAreaInfo *_p = soap_instantiate_ns3__PatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__PatrolAreaInfo::AreaId = AreaId; _p->ns3__PatrolAreaInfo::AreaName = AreaName; _p->ns3__PatrolAreaInfo::ParentId = ParentId; _p->ns3__PatrolAreaInfo::RobotIp = RobotIp; } return _p; }

inline void soap_delete_ns3__PatrolAreaInfo(struct soap *soap, ns3__PatrolAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__PatrolAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__MapAreaInfos
#define SOAP_TYPE_RobotData_ns3__MapAreaInfos (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MapAreaInfos(struct soap*, const char*, int, const ns3__MapAreaInfos *, const char*);
SOAP_FMAC3 ns3__MapAreaInfos * SOAP_FMAC4 soap_in_ns3__MapAreaInfos(struct soap*, const char*, ns3__MapAreaInfos *, const char*);

#ifndef soap_write_ns3__MapAreaInfos
#define soap_write_ns3__MapAreaInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:MapAreaInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__MapAreaInfos * SOAP_FMAC4 soap_get_ns3__MapAreaInfos(struct soap*, ns3__MapAreaInfos *, const char*, const char*);

#ifndef soap_read_ns3__MapAreaInfos
#define soap_read_ns3__MapAreaInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__MapAreaInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__MapAreaInfos * SOAP_FMAC2 soap_instantiate_ns3__MapAreaInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MapAreaInfos * soap_new_ns3__MapAreaInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__MapAreaInfos(soap, n, NULL, NULL, NULL); }

inline ns3__MapAreaInfos * soap_new_req_ns3__MapAreaInfos(struct soap *soap) { ns3__MapAreaInfos *_p = soap_instantiate_ns3__MapAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__MapAreaInfos * soap_new_set_ns3__MapAreaInfos(struct soap *soap, std::vector<ns3__MapAreaInfo * >& Infos) { ns3__MapAreaInfos *_p = soap_instantiate_ns3__MapAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__MapAreaInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__MapAreaInfos(struct soap *soap, ns3__MapAreaInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__MapAreaInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__MapAreaInfo
#define SOAP_TYPE_RobotData_ns3__MapAreaInfo (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MapAreaInfo(struct soap*, const char*, int, const ns3__MapAreaInfo *, const char*);
SOAP_FMAC3 ns3__MapAreaInfo * SOAP_FMAC4 soap_in_ns3__MapAreaInfo(struct soap*, const char*, ns3__MapAreaInfo *, const char*);

#ifndef soap_write_ns3__MapAreaInfo
#define soap_write_ns3__MapAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:MapAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__MapAreaInfo * SOAP_FMAC4 soap_get_ns3__MapAreaInfo(struct soap*, ns3__MapAreaInfo *, const char*, const char*);

#ifndef soap_read_ns3__MapAreaInfo
#define soap_read_ns3__MapAreaInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__MapAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__MapAreaInfo * SOAP_FMAC2 soap_instantiate_ns3__MapAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MapAreaInfo * soap_new_ns3__MapAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__MapAreaInfo(soap, n, NULL, NULL, NULL); }

inline ns3__MapAreaInfo * soap_new_req_ns3__MapAreaInfo(struct soap *soap, std::string& RobotIp, std::string& AreaId, std::string& AreaName, std::string& AreaMap, std::string& MaxX, std::string& MaxY, std::string& MinX, std::string& MinY, std::string& ParentId) { ns3__MapAreaInfo *_p = soap_instantiate_ns3__MapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__MapAreaInfo::RobotIp = RobotIp; _p->ns3__MapAreaInfo::AreaId = AreaId; _p->ns3__MapAreaInfo::AreaName = AreaName; _p->ns3__MapAreaInfo::AreaMap = AreaMap; _p->ns3__MapAreaInfo::MaxX = MaxX; _p->ns3__MapAreaInfo::MaxY = MaxY; _p->ns3__MapAreaInfo::MinX = MinX; _p->ns3__MapAreaInfo::MinY = MinY; _p->ns3__MapAreaInfo::ParentId = ParentId; } return _p; }

inline ns3__MapAreaInfo * soap_new_set_ns3__MapAreaInfo(struct soap *soap, std::string& RobotIp, std::string& AreaId, std::string& AreaName, std::string& AreaMap, std::string& MaxX, std::string& MaxY, std::string& MinX, std::string& MinY, std::string& ParentId) { ns3__MapAreaInfo *_p = soap_instantiate_ns3__MapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__MapAreaInfo::RobotIp = RobotIp; _p->ns3__MapAreaInfo::AreaId = AreaId; _p->ns3__MapAreaInfo::AreaName = AreaName; _p->ns3__MapAreaInfo::AreaMap = AreaMap; _p->ns3__MapAreaInfo::MaxX = MaxX; _p->ns3__MapAreaInfo::MaxY = MaxY; _p->ns3__MapAreaInfo::MinX = MinX; _p->ns3__MapAreaInfo::MinY = MinY; _p->ns3__MapAreaInfo::ParentId = ParentId; } return _p; }

inline void soap_delete_ns3__MapAreaInfo(struct soap *soap, ns3__MapAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__MapAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotAlarmInfos
#define SOAP_TYPE_RobotData_ns3__RobotAlarmInfos (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotAlarmInfos(struct soap*, const char*, int, const ns3__RobotAlarmInfos *, const char*);
SOAP_FMAC3 ns3__RobotAlarmInfos * SOAP_FMAC4 soap_in_ns3__RobotAlarmInfos(struct soap*, const char*, ns3__RobotAlarmInfos *, const char*);

#ifndef soap_write_ns3__RobotAlarmInfos
#define soap_write_ns3__RobotAlarmInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotAlarmInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotAlarmInfos * SOAP_FMAC4 soap_get_ns3__RobotAlarmInfos(struct soap*, ns3__RobotAlarmInfos *, const char*, const char*);

#ifndef soap_read_ns3__RobotAlarmInfos
#define soap_read_ns3__RobotAlarmInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotAlarmInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotAlarmInfos * SOAP_FMAC2 soap_instantiate_ns3__RobotAlarmInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotAlarmInfos * soap_new_ns3__RobotAlarmInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotAlarmInfos(soap, n, NULL, NULL, NULL); }

inline ns3__RobotAlarmInfos * soap_new_req_ns3__RobotAlarmInfos(struct soap *soap) { ns3__RobotAlarmInfos *_p = soap_instantiate_ns3__RobotAlarmInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__RobotAlarmInfos * soap_new_set_ns3__RobotAlarmInfos(struct soap *soap, std::vector<ns3__RobotAlarmInfo * >& Infos) { ns3__RobotAlarmInfos *_p = soap_instantiate_ns3__RobotAlarmInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotAlarmInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__RobotAlarmInfos(struct soap *soap, ns3__RobotAlarmInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotAlarmInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotAlarmInfo
#define SOAP_TYPE_RobotData_ns3__RobotAlarmInfo (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotAlarmInfo(struct soap*, const char*, int, const ns3__RobotAlarmInfo *, const char*);
SOAP_FMAC3 ns3__RobotAlarmInfo * SOAP_FMAC4 soap_in_ns3__RobotAlarmInfo(struct soap*, const char*, ns3__RobotAlarmInfo *, const char*);

#ifndef soap_write_ns3__RobotAlarmInfo
#define soap_write_ns3__RobotAlarmInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotAlarmInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotAlarmInfo * SOAP_FMAC4 soap_get_ns3__RobotAlarmInfo(struct soap*, ns3__RobotAlarmInfo *, const char*, const char*);

#ifndef soap_read_ns3__RobotAlarmInfo
#define soap_read_ns3__RobotAlarmInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotAlarmInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotAlarmInfo * SOAP_FMAC2 soap_instantiate_ns3__RobotAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotAlarmInfo * soap_new_ns3__RobotAlarmInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotAlarmInfo(soap, n, NULL, NULL, NULL); }

inline ns3__RobotAlarmInfo * soap_new_req_ns3__RobotAlarmInfo(struct soap *soap, std::string& AlarmId, std::string& RobotIp, std::string& AlarmType, std::string& AlarmDesc, std::string& AlarmTime) { ns3__RobotAlarmInfo *_p = soap_instantiate_ns3__RobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotAlarmInfo::AlarmId = AlarmId; _p->ns3__RobotAlarmInfo::RobotIp = RobotIp; _p->ns3__RobotAlarmInfo::AlarmType = AlarmType; _p->ns3__RobotAlarmInfo::AlarmDesc = AlarmDesc; _p->ns3__RobotAlarmInfo::AlarmTime = AlarmTime; } return _p; }

inline ns3__RobotAlarmInfo * soap_new_set_ns3__RobotAlarmInfo(struct soap *soap, std::string& AlarmId, std::string& RobotIp, std::string& AlarmType, std::string& AlarmDesc, std::string& AlarmTime) { ns3__RobotAlarmInfo *_p = soap_instantiate_ns3__RobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotAlarmInfo::AlarmId = AlarmId; _p->ns3__RobotAlarmInfo::RobotIp = RobotIp; _p->ns3__RobotAlarmInfo::AlarmType = AlarmType; _p->ns3__RobotAlarmInfo::AlarmDesc = AlarmDesc; _p->ns3__RobotAlarmInfo::AlarmTime = AlarmTime; } return _p; }

inline void soap_delete_ns3__RobotAlarmInfo(struct soap *soap, ns3__RobotAlarmInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotAlarmInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotGasInfos
#define SOAP_TYPE_RobotData_ns3__RobotGasInfos (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotGasInfos(struct soap*, const char*, int, const ns3__RobotGasInfos *, const char*);
SOAP_FMAC3 ns3__RobotGasInfos * SOAP_FMAC4 soap_in_ns3__RobotGasInfos(struct soap*, const char*, ns3__RobotGasInfos *, const char*);

#ifndef soap_write_ns3__RobotGasInfos
#define soap_write_ns3__RobotGasInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotGasInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotGasInfos * SOAP_FMAC4 soap_get_ns3__RobotGasInfos(struct soap*, ns3__RobotGasInfos *, const char*, const char*);

#ifndef soap_read_ns3__RobotGasInfos
#define soap_read_ns3__RobotGasInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotGasInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotGasInfos * SOAP_FMAC2 soap_instantiate_ns3__RobotGasInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotGasInfos * soap_new_ns3__RobotGasInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotGasInfos(soap, n, NULL, NULL, NULL); }

inline ns3__RobotGasInfos * soap_new_req_ns3__RobotGasInfos(struct soap *soap) { ns3__RobotGasInfos *_p = soap_instantiate_ns3__RobotGasInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__RobotGasInfos * soap_new_set_ns3__RobotGasInfos(struct soap *soap, std::vector<ns3__RobotGasInfo * >& GasContents) { ns3__RobotGasInfos *_p = soap_instantiate_ns3__RobotGasInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotGasInfos::GasContents = GasContents; } return _p; }

inline void soap_delete_ns3__RobotGasInfos(struct soap *soap, ns3__RobotGasInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotGasInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotGasInfo
#define SOAP_TYPE_RobotData_ns3__RobotGasInfo (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotGasInfo(struct soap*, const char*, int, const ns3__RobotGasInfo *, const char*);
SOAP_FMAC3 ns3__RobotGasInfo * SOAP_FMAC4 soap_in_ns3__RobotGasInfo(struct soap*, const char*, ns3__RobotGasInfo *, const char*);

#ifndef soap_write_ns3__RobotGasInfo
#define soap_write_ns3__RobotGasInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotGasInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotGasInfo * SOAP_FMAC4 soap_get_ns3__RobotGasInfo(struct soap*, ns3__RobotGasInfo *, const char*, const char*);

#ifndef soap_read_ns3__RobotGasInfo
#define soap_read_ns3__RobotGasInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotGasInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotGasInfo * SOAP_FMAC2 soap_instantiate_ns3__RobotGasInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotGasInfo * soap_new_ns3__RobotGasInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotGasInfo(soap, n, NULL, NULL, NULL); }

inline ns3__RobotGasInfo * soap_new_req_ns3__RobotGasInfo(struct soap *soap, std::string& robot_ip, std::string& H2S, std::string& CO, std::string& O2, std::string& CH4, std::string& TEMP, std::string& HUM, std::string& PM25, std::string& PM10, std::string& O3, std::string& SF6, std::string& Desc) { ns3__RobotGasInfo *_p = soap_instantiate_ns3__RobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotGasInfo::robot_ip = robot_ip; _p->ns3__RobotGasInfo::H2S = H2S; _p->ns3__RobotGasInfo::CO = CO; _p->ns3__RobotGasInfo::O2 = O2; _p->ns3__RobotGasInfo::CH4 = CH4; _p->ns3__RobotGasInfo::TEMP = TEMP; _p->ns3__RobotGasInfo::HUM = HUM; _p->ns3__RobotGasInfo::PM25 = PM25; _p->ns3__RobotGasInfo::PM10 = PM10; _p->ns3__RobotGasInfo::O3 = O3; _p->ns3__RobotGasInfo::SF6 = SF6; _p->ns3__RobotGasInfo::Desc = Desc; } return _p; }

inline ns3__RobotGasInfo * soap_new_set_ns3__RobotGasInfo(struct soap *soap, std::string& robot_ip, std::string& H2S, std::string& CO, std::string& O2, std::string& CH4, std::string& TEMP, std::string& HUM, std::string& PM25, std::string& PM10, std::string& O3, std::string& SF6, std::string& Desc) { ns3__RobotGasInfo *_p = soap_instantiate_ns3__RobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotGasInfo::robot_ip = robot_ip; _p->ns3__RobotGasInfo::H2S = H2S; _p->ns3__RobotGasInfo::CO = CO; _p->ns3__RobotGasInfo::O2 = O2; _p->ns3__RobotGasInfo::CH4 = CH4; _p->ns3__RobotGasInfo::TEMP = TEMP; _p->ns3__RobotGasInfo::HUM = HUM; _p->ns3__RobotGasInfo::PM25 = PM25; _p->ns3__RobotGasInfo::PM10 = PM10; _p->ns3__RobotGasInfo::O3 = O3; _p->ns3__RobotGasInfo::SF6 = SF6; _p->ns3__RobotGasInfo::Desc = Desc; } return _p; }

inline void soap_delete_ns3__RobotGasInfo(struct soap *soap, ns3__RobotGasInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotGasInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotMileageInfos
#define SOAP_TYPE_RobotData_ns3__RobotMileageInfos (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotMileageInfos(struct soap*, const char*, int, const ns3__RobotMileageInfos *, const char*);
SOAP_FMAC3 ns3__RobotMileageInfos * SOAP_FMAC4 soap_in_ns3__RobotMileageInfos(struct soap*, const char*, ns3__RobotMileageInfos *, const char*);

#ifndef soap_write_ns3__RobotMileageInfos
#define soap_write_ns3__RobotMileageInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotMileageInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotMileageInfos * SOAP_FMAC4 soap_get_ns3__RobotMileageInfos(struct soap*, ns3__RobotMileageInfos *, const char*, const char*);

#ifndef soap_read_ns3__RobotMileageInfos
#define soap_read_ns3__RobotMileageInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotMileageInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotMileageInfos * SOAP_FMAC2 soap_instantiate_ns3__RobotMileageInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotMileageInfos * soap_new_ns3__RobotMileageInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotMileageInfos(soap, n, NULL, NULL, NULL); }

inline ns3__RobotMileageInfos * soap_new_req_ns3__RobotMileageInfos(struct soap *soap) { ns3__RobotMileageInfos *_p = soap_instantiate_ns3__RobotMileageInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__RobotMileageInfos * soap_new_set_ns3__RobotMileageInfos(struct soap *soap, std::vector<ns3__RobotMileageInfo * >& Infos) { ns3__RobotMileageInfos *_p = soap_instantiate_ns3__RobotMileageInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotMileageInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__RobotMileageInfos(struct soap *soap, ns3__RobotMileageInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotMileageInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotMileageInfo
#define SOAP_TYPE_RobotData_ns3__RobotMileageInfo (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotMileageInfo(struct soap*, const char*, int, const ns3__RobotMileageInfo *, const char*);
SOAP_FMAC3 ns3__RobotMileageInfo * SOAP_FMAC4 soap_in_ns3__RobotMileageInfo(struct soap*, const char*, ns3__RobotMileageInfo *, const char*);

#ifndef soap_write_ns3__RobotMileageInfo
#define soap_write_ns3__RobotMileageInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotMileageInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotMileageInfo * SOAP_FMAC4 soap_get_ns3__RobotMileageInfo(struct soap*, ns3__RobotMileageInfo *, const char*, const char*);

#ifndef soap_read_ns3__RobotMileageInfo
#define soap_read_ns3__RobotMileageInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotMileageInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotMileageInfo * SOAP_FMAC2 soap_instantiate_ns3__RobotMileageInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotMileageInfo * soap_new_ns3__RobotMileageInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotMileageInfo(soap, n, NULL, NULL, NULL); }

inline ns3__RobotMileageInfo * soap_new_req_ns3__RobotMileageInfo(struct soap *soap, std::string& RobotIp, double Mileage) { ns3__RobotMileageInfo *_p = soap_instantiate_ns3__RobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotMileageInfo::RobotIp = RobotIp; _p->ns3__RobotMileageInfo::Mileage = Mileage; } return _p; }

inline ns3__RobotMileageInfo * soap_new_set_ns3__RobotMileageInfo(struct soap *soap, std::string& RobotIp, double Mileage) { ns3__RobotMileageInfo *_p = soap_instantiate_ns3__RobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotMileageInfo::RobotIp = RobotIp; _p->ns3__RobotMileageInfo::Mileage = Mileage; } return _p; }

inline void soap_delete_ns3__RobotMileageInfo(struct soap *soap, ns3__RobotMileageInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotMileageInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotYunTaiInfos
#define SOAP_TYPE_RobotData_ns3__RobotYunTaiInfos (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotYunTaiInfos(struct soap*, const char*, int, const ns3__RobotYunTaiInfos *, const char*);
SOAP_FMAC3 ns3__RobotYunTaiInfos * SOAP_FMAC4 soap_in_ns3__RobotYunTaiInfos(struct soap*, const char*, ns3__RobotYunTaiInfos *, const char*);

#ifndef soap_write_ns3__RobotYunTaiInfos
#define soap_write_ns3__RobotYunTaiInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotYunTaiInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotYunTaiInfos * SOAP_FMAC4 soap_get_ns3__RobotYunTaiInfos(struct soap*, ns3__RobotYunTaiInfos *, const char*, const char*);

#ifndef soap_read_ns3__RobotYunTaiInfos
#define soap_read_ns3__RobotYunTaiInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotYunTaiInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotYunTaiInfos * SOAP_FMAC2 soap_instantiate_ns3__RobotYunTaiInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotYunTaiInfos * soap_new_ns3__RobotYunTaiInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotYunTaiInfos(soap, n, NULL, NULL, NULL); }

inline ns3__RobotYunTaiInfos * soap_new_req_ns3__RobotYunTaiInfos(struct soap *soap) { ns3__RobotYunTaiInfos *_p = soap_instantiate_ns3__RobotYunTaiInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__RobotYunTaiInfos * soap_new_set_ns3__RobotYunTaiInfos(struct soap *soap, std::vector<ns3__RobotYunTaiInfo * >& Infos) { ns3__RobotYunTaiInfos *_p = soap_instantiate_ns3__RobotYunTaiInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotYunTaiInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__RobotYunTaiInfos(struct soap *soap, ns3__RobotYunTaiInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotYunTaiInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotYunTaiInfo
#define SOAP_TYPE_RobotData_ns3__RobotYunTaiInfo (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotYunTaiInfo(struct soap*, const char*, int, const ns3__RobotYunTaiInfo *, const char*);
SOAP_FMAC3 ns3__RobotYunTaiInfo * SOAP_FMAC4 soap_in_ns3__RobotYunTaiInfo(struct soap*, const char*, ns3__RobotYunTaiInfo *, const char*);

#ifndef soap_write_ns3__RobotYunTaiInfo
#define soap_write_ns3__RobotYunTaiInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotYunTaiInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotYunTaiInfo * SOAP_FMAC4 soap_get_ns3__RobotYunTaiInfo(struct soap*, ns3__RobotYunTaiInfo *, const char*, const char*);

#ifndef soap_read_ns3__RobotYunTaiInfo
#define soap_read_ns3__RobotYunTaiInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotYunTaiInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotYunTaiInfo * SOAP_FMAC2 soap_instantiate_ns3__RobotYunTaiInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotYunTaiInfo * soap_new_ns3__RobotYunTaiInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotYunTaiInfo(soap, n, NULL, NULL, NULL); }

inline ns3__RobotYunTaiInfo * soap_new_req_ns3__RobotYunTaiInfo(struct soap *soap, std::string& RobotIp, std::string& PosPan, std::string& PosTile) { ns3__RobotYunTaiInfo *_p = soap_instantiate_ns3__RobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotYunTaiInfo::RobotIp = RobotIp; _p->ns3__RobotYunTaiInfo::PosPan = PosPan; _p->ns3__RobotYunTaiInfo::PosTile = PosTile; } return _p; }

inline ns3__RobotYunTaiInfo * soap_new_set_ns3__RobotYunTaiInfo(struct soap *soap, std::string& RobotIp, std::string& PosPan, std::string& PosTile) { ns3__RobotYunTaiInfo *_p = soap_instantiate_ns3__RobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotYunTaiInfo::RobotIp = RobotIp; _p->ns3__RobotYunTaiInfo::PosPan = PosPan; _p->ns3__RobotYunTaiInfo::PosTile = PosTile; } return _p; }

inline void soap_delete_ns3__RobotYunTaiInfo(struct soap *soap, ns3__RobotYunTaiInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotYunTaiInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotPosInfos
#define SOAP_TYPE_RobotData_ns3__RobotPosInfos (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotPosInfos(struct soap*, const char*, int, const ns3__RobotPosInfos *, const char*);
SOAP_FMAC3 ns3__RobotPosInfos * SOAP_FMAC4 soap_in_ns3__RobotPosInfos(struct soap*, const char*, ns3__RobotPosInfos *, const char*);

#ifndef soap_write_ns3__RobotPosInfos
#define soap_write_ns3__RobotPosInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotPosInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotPosInfos * SOAP_FMAC4 soap_get_ns3__RobotPosInfos(struct soap*, ns3__RobotPosInfos *, const char*, const char*);

#ifndef soap_read_ns3__RobotPosInfos
#define soap_read_ns3__RobotPosInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotPosInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotPosInfos * SOAP_FMAC2 soap_instantiate_ns3__RobotPosInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotPosInfos * soap_new_ns3__RobotPosInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotPosInfos(soap, n, NULL, NULL, NULL); }

inline ns3__RobotPosInfos * soap_new_req_ns3__RobotPosInfos(struct soap *soap) { ns3__RobotPosInfos *_p = soap_instantiate_ns3__RobotPosInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__RobotPosInfos * soap_new_set_ns3__RobotPosInfos(struct soap *soap, std::vector<ns3__RobotPosInfo * >& Infos) { ns3__RobotPosInfos *_p = soap_instantiate_ns3__RobotPosInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotPosInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__RobotPosInfos(struct soap *soap, ns3__RobotPosInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotPosInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotPosInfo
#define SOAP_TYPE_RobotData_ns3__RobotPosInfo (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotPosInfo(struct soap*, const char*, int, const ns3__RobotPosInfo *, const char*);
SOAP_FMAC3 ns3__RobotPosInfo * SOAP_FMAC4 soap_in_ns3__RobotPosInfo(struct soap*, const char*, ns3__RobotPosInfo *, const char*);

#ifndef soap_write_ns3__RobotPosInfo
#define soap_write_ns3__RobotPosInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotPosInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotPosInfo * SOAP_FMAC4 soap_get_ns3__RobotPosInfo(struct soap*, ns3__RobotPosInfo *, const char*, const char*);

#ifndef soap_read_ns3__RobotPosInfo
#define soap_read_ns3__RobotPosInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotPosInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotPosInfo * SOAP_FMAC2 soap_instantiate_ns3__RobotPosInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotPosInfo * soap_new_ns3__RobotPosInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotPosInfo(soap, n, NULL, NULL, NULL); }

inline ns3__RobotPosInfo * soap_new_req_ns3__RobotPosInfo(struct soap *soap, std::string& RobotIp, std::string& PosX, std::string& PosY, std::string& Angle, std::string& EdgeID, std::string& Precent) { ns3__RobotPosInfo *_p = soap_instantiate_ns3__RobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotPosInfo::RobotIp = RobotIp; _p->ns3__RobotPosInfo::PosX = PosX; _p->ns3__RobotPosInfo::PosY = PosY; _p->ns3__RobotPosInfo::Angle = Angle; _p->ns3__RobotPosInfo::EdgeID = EdgeID; _p->ns3__RobotPosInfo::Precent = Precent; } return _p; }

inline ns3__RobotPosInfo * soap_new_set_ns3__RobotPosInfo(struct soap *soap, std::string& RobotIp, std::string& PosX, std::string& PosY, std::string& Angle, std::string& EdgeID, std::string& Precent) { ns3__RobotPosInfo *_p = soap_instantiate_ns3__RobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotPosInfo::RobotIp = RobotIp; _p->ns3__RobotPosInfo::PosX = PosX; _p->ns3__RobotPosInfo::PosY = PosY; _p->ns3__RobotPosInfo::Angle = Angle; _p->ns3__RobotPosInfo::EdgeID = EdgeID; _p->ns3__RobotPosInfo::Precent = Precent; } return _p; }

inline void soap_delete_ns3__RobotPosInfo(struct soap *soap, ns3__RobotPosInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotPosInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotTaskStates
#define SOAP_TYPE_RobotData_ns3__RobotTaskStates (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotTaskStates(struct soap*, const char*, int, const ns3__RobotTaskStates *, const char*);
SOAP_FMAC3 ns3__RobotTaskStates * SOAP_FMAC4 soap_in_ns3__RobotTaskStates(struct soap*, const char*, ns3__RobotTaskStates *, const char*);

#ifndef soap_write_ns3__RobotTaskStates
#define soap_write_ns3__RobotTaskStates(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotTaskStates", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotTaskStates * SOAP_FMAC4 soap_get_ns3__RobotTaskStates(struct soap*, ns3__RobotTaskStates *, const char*, const char*);

#ifndef soap_read_ns3__RobotTaskStates
#define soap_read_ns3__RobotTaskStates(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotTaskStates(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotTaskStates * SOAP_FMAC2 soap_instantiate_ns3__RobotTaskStates(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotTaskStates * soap_new_ns3__RobotTaskStates(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotTaskStates(soap, n, NULL, NULL, NULL); }

inline ns3__RobotTaskStates * soap_new_req_ns3__RobotTaskStates(struct soap *soap) { ns3__RobotTaskStates *_p = soap_instantiate_ns3__RobotTaskStates(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__RobotTaskStates * soap_new_set_ns3__RobotTaskStates(struct soap *soap, std::vector<ns3__RobotTaskState * >& States) { ns3__RobotTaskStates *_p = soap_instantiate_ns3__RobotTaskStates(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotTaskStates::States = States; } return _p; }

inline void soap_delete_ns3__RobotTaskStates(struct soap *soap, ns3__RobotTaskStates *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotTaskStates(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotTaskState
#define SOAP_TYPE_RobotData_ns3__RobotTaskState (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotTaskState(struct soap*, const char*, int, const ns3__RobotTaskState *, const char*);
SOAP_FMAC3 ns3__RobotTaskState * SOAP_FMAC4 soap_in_ns3__RobotTaskState(struct soap*, const char*, ns3__RobotTaskState *, const char*);

#ifndef soap_write_ns3__RobotTaskState
#define soap_write_ns3__RobotTaskState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotTaskState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotTaskState * SOAP_FMAC4 soap_get_ns3__RobotTaskState(struct soap*, ns3__RobotTaskState *, const char*, const char*);

#ifndef soap_read_ns3__RobotTaskState
#define soap_read_ns3__RobotTaskState(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotTaskState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotTaskState * SOAP_FMAC2 soap_instantiate_ns3__RobotTaskState(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotTaskState * soap_new_ns3__RobotTaskState(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotTaskState(soap, n, NULL, NULL, NULL); }

inline ns3__RobotTaskState * soap_new_req_ns3__RobotTaskState(struct soap *soap, std::string& RobotIp, std::string& TaskId, std::string& TaskType, std::string& TaskDesc) { ns3__RobotTaskState *_p = soap_instantiate_ns3__RobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotTaskState::RobotIp = RobotIp; _p->ns3__RobotTaskState::TaskId = TaskId; _p->ns3__RobotTaskState::TaskType = TaskType; _p->ns3__RobotTaskState::TaskDesc = TaskDesc; } return _p; }

inline ns3__RobotTaskState * soap_new_set_ns3__RobotTaskState(struct soap *soap, std::string& RobotIp, std::string& TaskId, std::string& TaskType, std::string& TaskDesc) { ns3__RobotTaskState *_p = soap_instantiate_ns3__RobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotTaskState::RobotIp = RobotIp; _p->ns3__RobotTaskState::TaskId = TaskId; _p->ns3__RobotTaskState::TaskType = TaskType; _p->ns3__RobotTaskState::TaskDesc = TaskDesc; } return _p; }

inline void soap_delete_ns3__RobotTaskState(struct soap *soap, ns3__RobotTaskState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotTaskState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__SpeedInfos
#define SOAP_TYPE_RobotData_ns3__SpeedInfos (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SpeedInfos(struct soap*, const char*, int, const ns3__SpeedInfos *, const char*);
SOAP_FMAC3 ns3__SpeedInfos * SOAP_FMAC4 soap_in_ns3__SpeedInfos(struct soap*, const char*, ns3__SpeedInfos *, const char*);

#ifndef soap_write_ns3__SpeedInfos
#define soap_write_ns3__SpeedInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:SpeedInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SpeedInfos * SOAP_FMAC4 soap_get_ns3__SpeedInfos(struct soap*, ns3__SpeedInfos *, const char*, const char*);

#ifndef soap_read_ns3__SpeedInfos
#define soap_read_ns3__SpeedInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__SpeedInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__SpeedInfos * SOAP_FMAC2 soap_instantiate_ns3__SpeedInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SpeedInfos * soap_new_ns3__SpeedInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__SpeedInfos(soap, n, NULL, NULL, NULL); }

inline ns3__SpeedInfos * soap_new_req_ns3__SpeedInfos(struct soap *soap) { ns3__SpeedInfos *_p = soap_instantiate_ns3__SpeedInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__SpeedInfos * soap_new_set_ns3__SpeedInfos(struct soap *soap, std::vector<ns3__SpeedInfo * >& Infos) { ns3__SpeedInfos *_p = soap_instantiate_ns3__SpeedInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__SpeedInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__SpeedInfos(struct soap *soap, ns3__SpeedInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SpeedInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__SpeedInfo
#define SOAP_TYPE_RobotData_ns3__SpeedInfo (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__SpeedInfo(struct soap*, const char*, int, const ns3__SpeedInfo *, const char*);
SOAP_FMAC3 ns3__SpeedInfo * SOAP_FMAC4 soap_in_ns3__SpeedInfo(struct soap*, const char*, ns3__SpeedInfo *, const char*);

#ifndef soap_write_ns3__SpeedInfo
#define soap_write_ns3__SpeedInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:SpeedInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SpeedInfo * SOAP_FMAC4 soap_get_ns3__SpeedInfo(struct soap*, ns3__SpeedInfo *, const char*, const char*);

#ifndef soap_read_ns3__SpeedInfo
#define soap_read_ns3__SpeedInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__SpeedInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__SpeedInfo * SOAP_FMAC2 soap_instantiate_ns3__SpeedInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__SpeedInfo * soap_new_ns3__SpeedInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__SpeedInfo(soap, n, NULL, NULL, NULL); }

inline ns3__SpeedInfo * soap_new_req_ns3__SpeedInfo(struct soap *soap, std::string& RobotIp, double Speed) { ns3__SpeedInfo *_p = soap_instantiate_ns3__SpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__SpeedInfo::RobotIp = RobotIp; _p->ns3__SpeedInfo::Speed = Speed; } return _p; }

inline ns3__SpeedInfo * soap_new_set_ns3__SpeedInfo(struct soap *soap, std::string& RobotIp, double Speed) { ns3__SpeedInfo *_p = soap_instantiate_ns3__SpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__SpeedInfo::RobotIp = RobotIp; _p->ns3__SpeedInfo::Speed = Speed; } return _p; }

inline void soap_delete_ns3__SpeedInfo(struct soap *soap, ns3__SpeedInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__SpeedInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__BatteryInfos
#define SOAP_TYPE_RobotData_ns3__BatteryInfos (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BatteryInfos(struct soap*, const char*, int, const ns3__BatteryInfos *, const char*);
SOAP_FMAC3 ns3__BatteryInfos * SOAP_FMAC4 soap_in_ns3__BatteryInfos(struct soap*, const char*, ns3__BatteryInfos *, const char*);

#ifndef soap_write_ns3__BatteryInfos
#define soap_write_ns3__BatteryInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:BatteryInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__BatteryInfos * SOAP_FMAC4 soap_get_ns3__BatteryInfos(struct soap*, ns3__BatteryInfos *, const char*, const char*);

#ifndef soap_read_ns3__BatteryInfos
#define soap_read_ns3__BatteryInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__BatteryInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__BatteryInfos * SOAP_FMAC2 soap_instantiate_ns3__BatteryInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BatteryInfos * soap_new_ns3__BatteryInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__BatteryInfos(soap, n, NULL, NULL, NULL); }

inline ns3__BatteryInfos * soap_new_req_ns3__BatteryInfos(struct soap *soap) { ns3__BatteryInfos *_p = soap_instantiate_ns3__BatteryInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__BatteryInfos * soap_new_set_ns3__BatteryInfos(struct soap *soap, std::vector<ns3__BatteryInfo * >& Infos) { ns3__BatteryInfos *_p = soap_instantiate_ns3__BatteryInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__BatteryInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__BatteryInfos(struct soap *soap, ns3__BatteryInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__BatteryInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__BatteryInfo
#define SOAP_TYPE_RobotData_ns3__BatteryInfo (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__BatteryInfo(struct soap*, const char*, int, const ns3__BatteryInfo *, const char*);
SOAP_FMAC3 ns3__BatteryInfo * SOAP_FMAC4 soap_in_ns3__BatteryInfo(struct soap*, const char*, ns3__BatteryInfo *, const char*);

#ifndef soap_write_ns3__BatteryInfo
#define soap_write_ns3__BatteryInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:BatteryInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__BatteryInfo * SOAP_FMAC4 soap_get_ns3__BatteryInfo(struct soap*, ns3__BatteryInfo *, const char*, const char*);

#ifndef soap_read_ns3__BatteryInfo
#define soap_read_ns3__BatteryInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__BatteryInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__BatteryInfo * SOAP_FMAC2 soap_instantiate_ns3__BatteryInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__BatteryInfo * soap_new_ns3__BatteryInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__BatteryInfo(soap, n, NULL, NULL, NULL); }

inline ns3__BatteryInfo * soap_new_req_ns3__BatteryInfo(struct soap *soap, std::string& RobotIp, double BatteryValue, double BatteryPercent) { ns3__BatteryInfo *_p = soap_instantiate_ns3__BatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__BatteryInfo::RobotIp = RobotIp; _p->ns3__BatteryInfo::BatteryValue = BatteryValue; _p->ns3__BatteryInfo::BatteryPercent = BatteryPercent; } return _p; }

inline ns3__BatteryInfo * soap_new_set_ns3__BatteryInfo(struct soap *soap, std::string& RobotIp, double BatteryValue, double BatteryPercent) { ns3__BatteryInfo *_p = soap_instantiate_ns3__BatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__BatteryInfo::RobotIp = RobotIp; _p->ns3__BatteryInfo::BatteryValue = BatteryValue; _p->ns3__BatteryInfo::BatteryPercent = BatteryPercent; } return _p; }

inline void soap_delete_ns3__BatteryInfo(struct soap *soap, ns3__BatteryInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__BatteryInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotInfos
#define SOAP_TYPE_RobotData_ns3__RobotInfos (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotInfos(struct soap*, const char*, int, const ns3__RobotInfos *, const char*);
SOAP_FMAC3 ns3__RobotInfos * SOAP_FMAC4 soap_in_ns3__RobotInfos(struct soap*, const char*, ns3__RobotInfos *, const char*);

#ifndef soap_write_ns3__RobotInfos
#define soap_write_ns3__RobotInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotInfos * SOAP_FMAC4 soap_get_ns3__RobotInfos(struct soap*, ns3__RobotInfos *, const char*, const char*);

#ifndef soap_read_ns3__RobotInfos
#define soap_read_ns3__RobotInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotInfos * SOAP_FMAC2 soap_instantiate_ns3__RobotInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotInfos * soap_new_ns3__RobotInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotInfos(soap, n, NULL, NULL, NULL); }

inline ns3__RobotInfos * soap_new_req_ns3__RobotInfos(struct soap *soap) { ns3__RobotInfos *_p = soap_instantiate_ns3__RobotInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__RobotInfos * soap_new_set_ns3__RobotInfos(struct soap *soap, std::vector<ns3__RobotInfo * >& Infos) { ns3__RobotInfos *_p = soap_instantiate_ns3__RobotInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__RobotInfos(struct soap *soap, ns3__RobotInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__RobotInfo
#define SOAP_TYPE_RobotData_ns3__RobotInfo (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__RobotInfo(struct soap*, const char*, int, const ns3__RobotInfo *, const char*);
SOAP_FMAC3 ns3__RobotInfo * SOAP_FMAC4 soap_in_ns3__RobotInfo(struct soap*, const char*, ns3__RobotInfo *, const char*);

#ifndef soap_write_ns3__RobotInfo
#define soap_write_ns3__RobotInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:RobotInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotInfo * SOAP_FMAC4 soap_get_ns3__RobotInfo(struct soap*, ns3__RobotInfo *, const char*, const char*);

#ifndef soap_read_ns3__RobotInfo
#define soap_read_ns3__RobotInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__RobotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__RobotInfo * SOAP_FMAC2 soap_instantiate_ns3__RobotInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__RobotInfo * soap_new_ns3__RobotInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__RobotInfo(soap, n, NULL, NULL, NULL); }

inline ns3__RobotInfo * soap_new_req_ns3__RobotInfo(struct soap *soap, std::string& RobotName, std::string& RobotIp, std::string& CameraIp, int CameraPort, std::string& FlirIp, int FlirPort, std::string& CameraUser, std::string& CameraPassword, std::string& FlirUser, std::string& FlirPassword) { ns3__RobotInfo *_p = soap_instantiate_ns3__RobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotInfo::RobotName = RobotName; _p->ns3__RobotInfo::RobotIp = RobotIp; _p->ns3__RobotInfo::CameraIp = CameraIp; _p->ns3__RobotInfo::CameraPort = CameraPort; _p->ns3__RobotInfo::FlirIp = FlirIp; _p->ns3__RobotInfo::FlirPort = FlirPort; _p->ns3__RobotInfo::CameraUser = CameraUser; _p->ns3__RobotInfo::CameraPassword = CameraPassword; _p->ns3__RobotInfo::FlirUser = FlirUser; _p->ns3__RobotInfo::FlirPassword = FlirPassword; } return _p; }

inline ns3__RobotInfo * soap_new_set_ns3__RobotInfo(struct soap *soap, std::string& RobotName, std::string& RobotIp, std::string& CameraIp, int CameraPort, std::string& FlirIp, int FlirPort, std::string& CameraUser, std::string& CameraPassword, std::string& FlirUser, std::string& FlirPassword) { ns3__RobotInfo *_p = soap_instantiate_ns3__RobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__RobotInfo::RobotName = RobotName; _p->ns3__RobotInfo::RobotIp = RobotIp; _p->ns3__RobotInfo::CameraIp = CameraIp; _p->ns3__RobotInfo::CameraPort = CameraPort; _p->ns3__RobotInfo::FlirIp = FlirIp; _p->ns3__RobotInfo::FlirPort = FlirPort; _p->ns3__RobotInfo::CameraUser = CameraUser; _p->ns3__RobotInfo::CameraPassword = CameraPassword; _p->ns3__RobotInfo::FlirUser = FlirUser; _p->ns3__RobotInfo::FlirPassword = FlirPassword; } return _p; }

inline void soap_delete_ns3__RobotInfo(struct soap *soap, ns3__RobotInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__RobotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__ConnectInfos
#define SOAP_TYPE_RobotData_ns3__ConnectInfos (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ConnectInfos(struct soap*, const char*, int, const ns3__ConnectInfos *, const char*);
SOAP_FMAC3 ns3__ConnectInfos * SOAP_FMAC4 soap_in_ns3__ConnectInfos(struct soap*, const char*, ns3__ConnectInfos *, const char*);

#ifndef soap_write_ns3__ConnectInfos
#define soap_write_ns3__ConnectInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:ConnectInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ConnectInfos * SOAP_FMAC4 soap_get_ns3__ConnectInfos(struct soap*, ns3__ConnectInfos *, const char*, const char*);

#ifndef soap_read_ns3__ConnectInfos
#define soap_read_ns3__ConnectInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__ConnectInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__ConnectInfos * SOAP_FMAC2 soap_instantiate_ns3__ConnectInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ConnectInfos * soap_new_ns3__ConnectInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns3__ConnectInfos(soap, n, NULL, NULL, NULL); }

inline ns3__ConnectInfos * soap_new_req_ns3__ConnectInfos(struct soap *soap) { ns3__ConnectInfos *_p = soap_instantiate_ns3__ConnectInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__ConnectInfos * soap_new_set_ns3__ConnectInfos(struct soap *soap, std::vector<ns3__ConnectInfo * >& Infos) { ns3__ConnectInfos *_p = soap_instantiate_ns3__ConnectInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__ConnectInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns3__ConnectInfos(struct soap *soap, ns3__ConnectInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ConnectInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_ns3__ConnectInfo
#define SOAP_TYPE_RobotData_ns3__ConnectInfo (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ConnectInfo(struct soap*, const char*, int, const ns3__ConnectInfo *, const char*);
SOAP_FMAC3 ns3__ConnectInfo * SOAP_FMAC4 soap_in_ns3__ConnectInfo(struct soap*, const char*, ns3__ConnectInfo *, const char*);

#ifndef soap_write_ns3__ConnectInfo
#define soap_write_ns3__ConnectInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:ConnectInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ConnectInfo * SOAP_FMAC4 soap_get_ns3__ConnectInfo(struct soap*, ns3__ConnectInfo *, const char*, const char*);

#ifndef soap_read_ns3__ConnectInfo
#define soap_read_ns3__ConnectInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_ns3__ConnectInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__ConnectInfo * SOAP_FMAC2 soap_instantiate_ns3__ConnectInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ConnectInfo * soap_new_ns3__ConnectInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__ConnectInfo(soap, n, NULL, NULL, NULL); }

inline ns3__ConnectInfo * soap_new_req_ns3__ConnectInfo(struct soap *soap, std::string& RobotIp, bool State, std::string& ConnectDesc) { ns3__ConnectInfo *_p = soap_instantiate_ns3__ConnectInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__ConnectInfo::RobotIp = RobotIp; _p->ns3__ConnectInfo::State = State; _p->ns3__ConnectInfo::ConnectDesc = ConnectDesc; } return _p; }

inline ns3__ConnectInfo * soap_new_set_ns3__ConnectInfo(struct soap *soap, std::string& RobotIp, bool State, std::string& ConnectDesc) { ns3__ConnectInfo *_p = soap_instantiate_ns3__ConnectInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__ConnectInfo::RobotIp = RobotIp; _p->ns3__ConnectInfo::State = State; _p->ns3__ConnectInfo::ConnectDesc = ConnectDesc; } return _p; }

inline void soap_delete_ns3__ConnectInfo(struct soap *soap, ns3__ConnectInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__ConnectInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Fault
#define SOAP_TYPE_RobotData_SOAP_ENV__Fault (255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_SOAP_ENV__Fault(soap, data),0) || RobotData::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Reason
#define SOAP_TYPE_RobotData_SOAP_ENV__Reason (254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_SOAP_ENV__Reason(soap, data),0) || RobotData::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Detail
#define SOAP_TYPE_RobotData_SOAP_ENV__Detail (251)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_SOAP_ENV__Detail(soap, data),0) || RobotData::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Code
#define SOAP_TYPE_RobotData_SOAP_ENV__Code (249)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_SOAP_ENV__Code(soap, data),0) || RobotData::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_SOAP_ENV__Header
#define SOAP_TYPE_RobotData_SOAP_ENV__Header (248)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_SOAP_ENV__Header(soap, data),0) || RobotData::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotAlarmInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotAlarmInfo (247)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotAlarmInfo(struct soap*, struct __ns1__GetRobotAlarmInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotAlarmInfo(struct soap*, const struct __ns1__GetRobotAlarmInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotAlarmInfo(struct soap*, const char*, int, const struct __ns1__GetRobotAlarmInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotAlarmInfo * SOAP_FMAC4 soap_in___ns1__GetRobotAlarmInfo(struct soap*, const char*, struct __ns1__GetRobotAlarmInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotAlarmInfo(struct soap*, const struct __ns1__GetRobotAlarmInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotAlarmInfo
#define soap_write___ns1__GetRobotAlarmInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotAlarmInfo(soap, data),0) || RobotData::soap_put___ns1__GetRobotAlarmInfo(soap, data, "-ns1:GetRobotAlarmInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotAlarmInfo * SOAP_FMAC4 soap_get___ns1__GetRobotAlarmInfo(struct soap*, struct __ns1__GetRobotAlarmInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotAlarmInfo
#define soap_read___ns1__GetRobotAlarmInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotAlarmInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotAlarmInfo * SOAP_FMAC2 soap_instantiate___ns1__GetRobotAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotAlarmInfo * soap_new___ns1__GetRobotAlarmInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotAlarmInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotAlarmInfo * soap_new_req___ns1__GetRobotAlarmInfo(struct soap *soap) { struct __ns1__GetRobotAlarmInfo *_p = soap_instantiate___ns1__GetRobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotAlarmInfo(soap, _p); } return _p; }

inline struct __ns1__GetRobotAlarmInfo * soap_new_set___ns1__GetRobotAlarmInfo(struct soap *soap, _ns3__GetRobotAlarmInfo *ns3__GetRobotAlarmInfo) { struct __ns1__GetRobotAlarmInfo *_p = soap_instantiate___ns1__GetRobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotAlarmInfo(soap, _p); _p->ns3__GetRobotAlarmInfo = ns3__GetRobotAlarmInfo; } return _p; }

inline void soap_delete___ns1__GetRobotAlarmInfo(struct soap *soap, struct __ns1__GetRobotAlarmInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotAlarmInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotGasInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotGasInfo (243)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotGasInfo(struct soap*, struct __ns1__GetRobotGasInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotGasInfo(struct soap*, const struct __ns1__GetRobotGasInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotGasInfo(struct soap*, const char*, int, const struct __ns1__GetRobotGasInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotGasInfo * SOAP_FMAC4 soap_in___ns1__GetRobotGasInfo(struct soap*, const char*, struct __ns1__GetRobotGasInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotGasInfo(struct soap*, const struct __ns1__GetRobotGasInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotGasInfo
#define soap_write___ns1__GetRobotGasInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotGasInfo(soap, data),0) || RobotData::soap_put___ns1__GetRobotGasInfo(soap, data, "-ns1:GetRobotGasInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotGasInfo * SOAP_FMAC4 soap_get___ns1__GetRobotGasInfo(struct soap*, struct __ns1__GetRobotGasInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotGasInfo
#define soap_read___ns1__GetRobotGasInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotGasInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotGasInfo * SOAP_FMAC2 soap_instantiate___ns1__GetRobotGasInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotGasInfo * soap_new___ns1__GetRobotGasInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotGasInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotGasInfo * soap_new_req___ns1__GetRobotGasInfo(struct soap *soap) { struct __ns1__GetRobotGasInfo *_p = soap_instantiate___ns1__GetRobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotGasInfo(soap, _p); } return _p; }

inline struct __ns1__GetRobotGasInfo * soap_new_set___ns1__GetRobotGasInfo(struct soap *soap, _ns3__GetRobotGasInfo *ns3__GetRobotGasInfo) { struct __ns1__GetRobotGasInfo *_p = soap_instantiate___ns1__GetRobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotGasInfo(soap, _p); _p->ns3__GetRobotGasInfo = ns3__GetRobotGasInfo; } return _p; }

inline void soap_delete___ns1__GetRobotGasInfo(struct soap *soap, struct __ns1__GetRobotGasInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotGasInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotMileageInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotMileageInfo (239)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotMileageInfo(struct soap*, struct __ns1__GetRobotMileageInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotMileageInfo(struct soap*, const struct __ns1__GetRobotMileageInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotMileageInfo(struct soap*, const char*, int, const struct __ns1__GetRobotMileageInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotMileageInfo * SOAP_FMAC4 soap_in___ns1__GetRobotMileageInfo(struct soap*, const char*, struct __ns1__GetRobotMileageInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotMileageInfo(struct soap*, const struct __ns1__GetRobotMileageInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotMileageInfo
#define soap_write___ns1__GetRobotMileageInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotMileageInfo(soap, data),0) || RobotData::soap_put___ns1__GetRobotMileageInfo(soap, data, "-ns1:GetRobotMileageInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotMileageInfo * SOAP_FMAC4 soap_get___ns1__GetRobotMileageInfo(struct soap*, struct __ns1__GetRobotMileageInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotMileageInfo
#define soap_read___ns1__GetRobotMileageInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotMileageInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotMileageInfo * SOAP_FMAC2 soap_instantiate___ns1__GetRobotMileageInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotMileageInfo * soap_new___ns1__GetRobotMileageInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotMileageInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotMileageInfo * soap_new_req___ns1__GetRobotMileageInfo(struct soap *soap) { struct __ns1__GetRobotMileageInfo *_p = soap_instantiate___ns1__GetRobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotMileageInfo(soap, _p); } return _p; }

inline struct __ns1__GetRobotMileageInfo * soap_new_set___ns1__GetRobotMileageInfo(struct soap *soap, _ns3__GetRobotMileageInfo *ns3__GetRobotMileageInfo) { struct __ns1__GetRobotMileageInfo *_p = soap_instantiate___ns1__GetRobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotMileageInfo(soap, _p); _p->ns3__GetRobotMileageInfo = ns3__GetRobotMileageInfo; } return _p; }

inline void soap_delete___ns1__GetRobotMileageInfo(struct soap *soap, struct __ns1__GetRobotMileageInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotMileageInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotYunTaiInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotYunTaiInfo (235)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotYunTaiInfo(struct soap*, struct __ns1__GetRobotYunTaiInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotYunTaiInfo(struct soap*, const struct __ns1__GetRobotYunTaiInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotYunTaiInfo(struct soap*, const char*, int, const struct __ns1__GetRobotYunTaiInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotYunTaiInfo * SOAP_FMAC4 soap_in___ns1__GetRobotYunTaiInfo(struct soap*, const char*, struct __ns1__GetRobotYunTaiInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotYunTaiInfo(struct soap*, const struct __ns1__GetRobotYunTaiInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotYunTaiInfo
#define soap_write___ns1__GetRobotYunTaiInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotYunTaiInfo(soap, data),0) || RobotData::soap_put___ns1__GetRobotYunTaiInfo(soap, data, "-ns1:GetRobotYunTaiInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotYunTaiInfo * SOAP_FMAC4 soap_get___ns1__GetRobotYunTaiInfo(struct soap*, struct __ns1__GetRobotYunTaiInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotYunTaiInfo
#define soap_read___ns1__GetRobotYunTaiInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotYunTaiInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotYunTaiInfo * SOAP_FMAC2 soap_instantiate___ns1__GetRobotYunTaiInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotYunTaiInfo * soap_new___ns1__GetRobotYunTaiInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotYunTaiInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotYunTaiInfo * soap_new_req___ns1__GetRobotYunTaiInfo(struct soap *soap) { struct __ns1__GetRobotYunTaiInfo *_p = soap_instantiate___ns1__GetRobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotYunTaiInfo(soap, _p); } return _p; }

inline struct __ns1__GetRobotYunTaiInfo * soap_new_set___ns1__GetRobotYunTaiInfo(struct soap *soap, _ns3__GetRobotYunTaiInfo *ns3__GetRobotYunTaiInfo) { struct __ns1__GetRobotYunTaiInfo *_p = soap_instantiate___ns1__GetRobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotYunTaiInfo(soap, _p); _p->ns3__GetRobotYunTaiInfo = ns3__GetRobotYunTaiInfo; } return _p; }

inline void soap_delete___ns1__GetRobotYunTaiInfo(struct soap *soap, struct __ns1__GetRobotYunTaiInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotYunTaiInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotPosInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotPosInfo (231)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotPosInfo(struct soap*, struct __ns1__GetRobotPosInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotPosInfo(struct soap*, const struct __ns1__GetRobotPosInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotPosInfo(struct soap*, const char*, int, const struct __ns1__GetRobotPosInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotPosInfo * SOAP_FMAC4 soap_in___ns1__GetRobotPosInfo(struct soap*, const char*, struct __ns1__GetRobotPosInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotPosInfo(struct soap*, const struct __ns1__GetRobotPosInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotPosInfo
#define soap_write___ns1__GetRobotPosInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotPosInfo(soap, data),0) || RobotData::soap_put___ns1__GetRobotPosInfo(soap, data, "-ns1:GetRobotPosInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotPosInfo * SOAP_FMAC4 soap_get___ns1__GetRobotPosInfo(struct soap*, struct __ns1__GetRobotPosInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotPosInfo
#define soap_read___ns1__GetRobotPosInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotPosInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotPosInfo * SOAP_FMAC2 soap_instantiate___ns1__GetRobotPosInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotPosInfo * soap_new___ns1__GetRobotPosInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotPosInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotPosInfo * soap_new_req___ns1__GetRobotPosInfo(struct soap *soap) { struct __ns1__GetRobotPosInfo *_p = soap_instantiate___ns1__GetRobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotPosInfo(soap, _p); } return _p; }

inline struct __ns1__GetRobotPosInfo * soap_new_set___ns1__GetRobotPosInfo(struct soap *soap, _ns3__GetRobotPosInfo *ns3__GetRobotPosInfo) { struct __ns1__GetRobotPosInfo *_p = soap_instantiate___ns1__GetRobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotPosInfo(soap, _p); _p->ns3__GetRobotPosInfo = ns3__GetRobotPosInfo; } return _p; }

inline void soap_delete___ns1__GetRobotPosInfo(struct soap *soap, struct __ns1__GetRobotPosInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotPosInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotTaskState
#define SOAP_TYPE_RobotData___ns1__GetRobotTaskState (227)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotTaskState(struct soap*, struct __ns1__GetRobotTaskState *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotTaskState(struct soap*, const struct __ns1__GetRobotTaskState *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotTaskState(struct soap*, const char*, int, const struct __ns1__GetRobotTaskState *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotTaskState * SOAP_FMAC4 soap_in___ns1__GetRobotTaskState(struct soap*, const char*, struct __ns1__GetRobotTaskState *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotTaskState(struct soap*, const struct __ns1__GetRobotTaskState *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotTaskState
#define soap_write___ns1__GetRobotTaskState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotTaskState(soap, data),0) || RobotData::soap_put___ns1__GetRobotTaskState(soap, data, "-ns1:GetRobotTaskState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotTaskState * SOAP_FMAC4 soap_get___ns1__GetRobotTaskState(struct soap*, struct __ns1__GetRobotTaskState *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotTaskState
#define soap_read___ns1__GetRobotTaskState(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotTaskState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotTaskState * SOAP_FMAC2 soap_instantiate___ns1__GetRobotTaskState(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotTaskState * soap_new___ns1__GetRobotTaskState(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotTaskState(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotTaskState * soap_new_req___ns1__GetRobotTaskState(struct soap *soap) { struct __ns1__GetRobotTaskState *_p = soap_instantiate___ns1__GetRobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotTaskState(soap, _p); } return _p; }

inline struct __ns1__GetRobotTaskState * soap_new_set___ns1__GetRobotTaskState(struct soap *soap, _ns3__GetRobotTaskState *ns3__GetRobotTaskState) { struct __ns1__GetRobotTaskState *_p = soap_instantiate___ns1__GetRobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotTaskState(soap, _p); _p->ns3__GetRobotTaskState = ns3__GetRobotTaskState; } return _p; }

inline void soap_delete___ns1__GetRobotTaskState(struct soap *soap, struct __ns1__GetRobotTaskState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotTaskState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotSpeedInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotSpeedInfo (223)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotSpeedInfo(struct soap*, struct __ns1__GetRobotSpeedInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotSpeedInfo(struct soap*, const struct __ns1__GetRobotSpeedInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotSpeedInfo(struct soap*, const char*, int, const struct __ns1__GetRobotSpeedInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotSpeedInfo * SOAP_FMAC4 soap_in___ns1__GetRobotSpeedInfo(struct soap*, const char*, struct __ns1__GetRobotSpeedInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotSpeedInfo(struct soap*, const struct __ns1__GetRobotSpeedInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotSpeedInfo
#define soap_write___ns1__GetRobotSpeedInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotSpeedInfo(soap, data),0) || RobotData::soap_put___ns1__GetRobotSpeedInfo(soap, data, "-ns1:GetRobotSpeedInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotSpeedInfo * SOAP_FMAC4 soap_get___ns1__GetRobotSpeedInfo(struct soap*, struct __ns1__GetRobotSpeedInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotSpeedInfo
#define soap_read___ns1__GetRobotSpeedInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotSpeedInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotSpeedInfo * SOAP_FMAC2 soap_instantiate___ns1__GetRobotSpeedInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotSpeedInfo * soap_new___ns1__GetRobotSpeedInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotSpeedInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotSpeedInfo * soap_new_req___ns1__GetRobotSpeedInfo(struct soap *soap) { struct __ns1__GetRobotSpeedInfo *_p = soap_instantiate___ns1__GetRobotSpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotSpeedInfo(soap, _p); } return _p; }

inline struct __ns1__GetRobotSpeedInfo * soap_new_set___ns1__GetRobotSpeedInfo(struct soap *soap, _ns3__GetRobotSpeedInfo *ns3__GetRobotSpeedInfo) { struct __ns1__GetRobotSpeedInfo *_p = soap_instantiate___ns1__GetRobotSpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotSpeedInfo(soap, _p); _p->ns3__GetRobotSpeedInfo = ns3__GetRobotSpeedInfo; } return _p; }

inline void soap_delete___ns1__GetRobotSpeedInfo(struct soap *soap, struct __ns1__GetRobotSpeedInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotSpeedInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotBatteryInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotBatteryInfo (219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotBatteryInfo(struct soap*, struct __ns1__GetRobotBatteryInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotBatteryInfo(struct soap*, const struct __ns1__GetRobotBatteryInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotBatteryInfo(struct soap*, const char*, int, const struct __ns1__GetRobotBatteryInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotBatteryInfo * SOAP_FMAC4 soap_in___ns1__GetRobotBatteryInfo(struct soap*, const char*, struct __ns1__GetRobotBatteryInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotBatteryInfo(struct soap*, const struct __ns1__GetRobotBatteryInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotBatteryInfo
#define soap_write___ns1__GetRobotBatteryInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotBatteryInfo(soap, data),0) || RobotData::soap_put___ns1__GetRobotBatteryInfo(soap, data, "-ns1:GetRobotBatteryInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotBatteryInfo * SOAP_FMAC4 soap_get___ns1__GetRobotBatteryInfo(struct soap*, struct __ns1__GetRobotBatteryInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotBatteryInfo
#define soap_read___ns1__GetRobotBatteryInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotBatteryInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotBatteryInfo * SOAP_FMAC2 soap_instantiate___ns1__GetRobotBatteryInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotBatteryInfo * soap_new___ns1__GetRobotBatteryInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotBatteryInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotBatteryInfo * soap_new_req___ns1__GetRobotBatteryInfo(struct soap *soap) { struct __ns1__GetRobotBatteryInfo *_p = soap_instantiate___ns1__GetRobotBatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotBatteryInfo(soap, _p); } return _p; }

inline struct __ns1__GetRobotBatteryInfo * soap_new_set___ns1__GetRobotBatteryInfo(struct soap *soap, _ns3__GetRobotBatteryInfo *ns3__GetRobotBatteryInfo) { struct __ns1__GetRobotBatteryInfo *_p = soap_instantiate___ns1__GetRobotBatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotBatteryInfo(soap, _p); _p->ns3__GetRobotBatteryInfo = ns3__GetRobotBatteryInfo; } return _p; }

inline void soap_delete___ns1__GetRobotBatteryInfo(struct soap *soap, struct __ns1__GetRobotBatteryInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotBatteryInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__RobotPdControl
#define SOAP_TYPE_RobotData___ns1__RobotPdControl (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RobotPdControl(struct soap*, struct __ns1__RobotPdControl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RobotPdControl(struct soap*, const struct __ns1__RobotPdControl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RobotPdControl(struct soap*, const char*, int, const struct __ns1__RobotPdControl *, const char*);
SOAP_FMAC3 struct __ns1__RobotPdControl * SOAP_FMAC4 soap_in___ns1__RobotPdControl(struct soap*, const char*, struct __ns1__RobotPdControl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RobotPdControl(struct soap*, const struct __ns1__RobotPdControl *, const char*, const char*);

#ifndef soap_write___ns1__RobotPdControl
#define soap_write___ns1__RobotPdControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__RobotPdControl(soap, data),0) || RobotData::soap_put___ns1__RobotPdControl(soap, data, "-ns1:RobotPdControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RobotPdControl * SOAP_FMAC4 soap_get___ns1__RobotPdControl(struct soap*, struct __ns1__RobotPdControl *, const char*, const char*);

#ifndef soap_read___ns1__RobotPdControl
#define soap_read___ns1__RobotPdControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__RobotPdControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RobotPdControl * SOAP_FMAC2 soap_instantiate___ns1__RobotPdControl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RobotPdControl * soap_new___ns1__RobotPdControl(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RobotPdControl(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RobotPdControl * soap_new_req___ns1__RobotPdControl(struct soap *soap) { struct __ns1__RobotPdControl *_p = soap_instantiate___ns1__RobotPdControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotPdControl(soap, _p); } return _p; }

inline struct __ns1__RobotPdControl * soap_new_set___ns1__RobotPdControl(struct soap *soap, _ns3__RobotPdControl *ns3__RobotPdControl) { struct __ns1__RobotPdControl *_p = soap_instantiate___ns1__RobotPdControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotPdControl(soap, _p); _p->ns3__RobotPdControl = ns3__RobotPdControl; } return _p; }

inline void soap_delete___ns1__RobotPdControl(struct soap *soap, struct __ns1__RobotPdControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RobotPdControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__RobotLifterControl
#define SOAP_TYPE_RobotData___ns1__RobotLifterControl (211)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RobotLifterControl(struct soap*, struct __ns1__RobotLifterControl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RobotLifterControl(struct soap*, const struct __ns1__RobotLifterControl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RobotLifterControl(struct soap*, const char*, int, const struct __ns1__RobotLifterControl *, const char*);
SOAP_FMAC3 struct __ns1__RobotLifterControl * SOAP_FMAC4 soap_in___ns1__RobotLifterControl(struct soap*, const char*, struct __ns1__RobotLifterControl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RobotLifterControl(struct soap*, const struct __ns1__RobotLifterControl *, const char*, const char*);

#ifndef soap_write___ns1__RobotLifterControl
#define soap_write___ns1__RobotLifterControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__RobotLifterControl(soap, data),0) || RobotData::soap_put___ns1__RobotLifterControl(soap, data, "-ns1:RobotLifterControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RobotLifterControl * SOAP_FMAC4 soap_get___ns1__RobotLifterControl(struct soap*, struct __ns1__RobotLifterControl *, const char*, const char*);

#ifndef soap_read___ns1__RobotLifterControl
#define soap_read___ns1__RobotLifterControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__RobotLifterControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RobotLifterControl * SOAP_FMAC2 soap_instantiate___ns1__RobotLifterControl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RobotLifterControl * soap_new___ns1__RobotLifterControl(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RobotLifterControl(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RobotLifterControl * soap_new_req___ns1__RobotLifterControl(struct soap *soap) { struct __ns1__RobotLifterControl *_p = soap_instantiate___ns1__RobotLifterControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotLifterControl(soap, _p); } return _p; }

inline struct __ns1__RobotLifterControl * soap_new_set___ns1__RobotLifterControl(struct soap *soap, _ns3__RobotLifterControl *ns3__RobotLifterControl) { struct __ns1__RobotLifterControl *_p = soap_instantiate___ns1__RobotLifterControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotLifterControl(soap, _p); _p->ns3__RobotLifterControl = ns3__RobotLifterControl; } return _p; }

inline void soap_delete___ns1__RobotLifterControl(struct soap *soap, struct __ns1__RobotLifterControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RobotLifterControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__RobotFlirControl
#define SOAP_TYPE_RobotData___ns1__RobotFlirControl (207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RobotFlirControl(struct soap*, struct __ns1__RobotFlirControl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RobotFlirControl(struct soap*, const struct __ns1__RobotFlirControl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RobotFlirControl(struct soap*, const char*, int, const struct __ns1__RobotFlirControl *, const char*);
SOAP_FMAC3 struct __ns1__RobotFlirControl * SOAP_FMAC4 soap_in___ns1__RobotFlirControl(struct soap*, const char*, struct __ns1__RobotFlirControl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RobotFlirControl(struct soap*, const struct __ns1__RobotFlirControl *, const char*, const char*);

#ifndef soap_write___ns1__RobotFlirControl
#define soap_write___ns1__RobotFlirControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__RobotFlirControl(soap, data),0) || RobotData::soap_put___ns1__RobotFlirControl(soap, data, "-ns1:RobotFlirControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RobotFlirControl * SOAP_FMAC4 soap_get___ns1__RobotFlirControl(struct soap*, struct __ns1__RobotFlirControl *, const char*, const char*);

#ifndef soap_read___ns1__RobotFlirControl
#define soap_read___ns1__RobotFlirControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__RobotFlirControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RobotFlirControl * SOAP_FMAC2 soap_instantiate___ns1__RobotFlirControl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RobotFlirControl * soap_new___ns1__RobotFlirControl(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RobotFlirControl(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RobotFlirControl * soap_new_req___ns1__RobotFlirControl(struct soap *soap) { struct __ns1__RobotFlirControl *_p = soap_instantiate___ns1__RobotFlirControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotFlirControl(soap, _p); } return _p; }

inline struct __ns1__RobotFlirControl * soap_new_set___ns1__RobotFlirControl(struct soap *soap, _ns3__RobotFlirControl *ns3__RobotFlirControl) { struct __ns1__RobotFlirControl *_p = soap_instantiate___ns1__RobotFlirControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotFlirControl(soap, _p); _p->ns3__RobotFlirControl = ns3__RobotFlirControl; } return _p; }

inline void soap_delete___ns1__RobotFlirControl(struct soap *soap, struct __ns1__RobotFlirControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RobotFlirControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__RobotWiperControl
#define SOAP_TYPE_RobotData___ns1__RobotWiperControl (203)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RobotWiperControl(struct soap*, struct __ns1__RobotWiperControl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RobotWiperControl(struct soap*, const struct __ns1__RobotWiperControl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RobotWiperControl(struct soap*, const char*, int, const struct __ns1__RobotWiperControl *, const char*);
SOAP_FMAC3 struct __ns1__RobotWiperControl * SOAP_FMAC4 soap_in___ns1__RobotWiperControl(struct soap*, const char*, struct __ns1__RobotWiperControl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RobotWiperControl(struct soap*, const struct __ns1__RobotWiperControl *, const char*, const char*);

#ifndef soap_write___ns1__RobotWiperControl
#define soap_write___ns1__RobotWiperControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__RobotWiperControl(soap, data),0) || RobotData::soap_put___ns1__RobotWiperControl(soap, data, "-ns1:RobotWiperControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RobotWiperControl * SOAP_FMAC4 soap_get___ns1__RobotWiperControl(struct soap*, struct __ns1__RobotWiperControl *, const char*, const char*);

#ifndef soap_read___ns1__RobotWiperControl
#define soap_read___ns1__RobotWiperControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__RobotWiperControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RobotWiperControl * SOAP_FMAC2 soap_instantiate___ns1__RobotWiperControl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RobotWiperControl * soap_new___ns1__RobotWiperControl(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RobotWiperControl(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RobotWiperControl * soap_new_req___ns1__RobotWiperControl(struct soap *soap) { struct __ns1__RobotWiperControl *_p = soap_instantiate___ns1__RobotWiperControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotWiperControl(soap, _p); } return _p; }

inline struct __ns1__RobotWiperControl * soap_new_set___ns1__RobotWiperControl(struct soap *soap, _ns3__RobotWiperControl *ns3__RobotWiperControl) { struct __ns1__RobotWiperControl *_p = soap_instantiate___ns1__RobotWiperControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotWiperControl(soap, _p); _p->ns3__RobotWiperControl = ns3__RobotWiperControl; } return _p; }

inline void soap_delete___ns1__RobotWiperControl(struct soap *soap, struct __ns1__RobotWiperControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RobotWiperControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__RobotLightControl
#define SOAP_TYPE_RobotData___ns1__RobotLightControl (199)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RobotLightControl(struct soap*, struct __ns1__RobotLightControl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RobotLightControl(struct soap*, const struct __ns1__RobotLightControl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RobotLightControl(struct soap*, const char*, int, const struct __ns1__RobotLightControl *, const char*);
SOAP_FMAC3 struct __ns1__RobotLightControl * SOAP_FMAC4 soap_in___ns1__RobotLightControl(struct soap*, const char*, struct __ns1__RobotLightControl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RobotLightControl(struct soap*, const struct __ns1__RobotLightControl *, const char*, const char*);

#ifndef soap_write___ns1__RobotLightControl
#define soap_write___ns1__RobotLightControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__RobotLightControl(soap, data),0) || RobotData::soap_put___ns1__RobotLightControl(soap, data, "-ns1:RobotLightControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RobotLightControl * SOAP_FMAC4 soap_get___ns1__RobotLightControl(struct soap*, struct __ns1__RobotLightControl *, const char*, const char*);

#ifndef soap_read___ns1__RobotLightControl
#define soap_read___ns1__RobotLightControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__RobotLightControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RobotLightControl * SOAP_FMAC2 soap_instantiate___ns1__RobotLightControl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RobotLightControl * soap_new___ns1__RobotLightControl(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RobotLightControl(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RobotLightControl * soap_new_req___ns1__RobotLightControl(struct soap *soap) { struct __ns1__RobotLightControl *_p = soap_instantiate___ns1__RobotLightControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotLightControl(soap, _p); } return _p; }

inline struct __ns1__RobotLightControl * soap_new_set___ns1__RobotLightControl(struct soap *soap, _ns3__RobotLightControl *ns3__RobotLightControl) { struct __ns1__RobotLightControl *_p = soap_instantiate___ns1__RobotLightControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotLightControl(soap, _p); _p->ns3__RobotLightControl = ns3__RobotLightControl; } return _p; }

inline void soap_delete___ns1__RobotLightControl(struct soap *soap, struct __ns1__RobotLightControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RobotLightControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__RobotCameraControl
#define SOAP_TYPE_RobotData___ns1__RobotCameraControl (195)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RobotCameraControl(struct soap*, struct __ns1__RobotCameraControl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RobotCameraControl(struct soap*, const struct __ns1__RobotCameraControl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RobotCameraControl(struct soap*, const char*, int, const struct __ns1__RobotCameraControl *, const char*);
SOAP_FMAC3 struct __ns1__RobotCameraControl * SOAP_FMAC4 soap_in___ns1__RobotCameraControl(struct soap*, const char*, struct __ns1__RobotCameraControl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RobotCameraControl(struct soap*, const struct __ns1__RobotCameraControl *, const char*, const char*);

#ifndef soap_write___ns1__RobotCameraControl
#define soap_write___ns1__RobotCameraControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__RobotCameraControl(soap, data),0) || RobotData::soap_put___ns1__RobotCameraControl(soap, data, "-ns1:RobotCameraControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RobotCameraControl * SOAP_FMAC4 soap_get___ns1__RobotCameraControl(struct soap*, struct __ns1__RobotCameraControl *, const char*, const char*);

#ifndef soap_read___ns1__RobotCameraControl
#define soap_read___ns1__RobotCameraControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__RobotCameraControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RobotCameraControl * SOAP_FMAC2 soap_instantiate___ns1__RobotCameraControl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RobotCameraControl * soap_new___ns1__RobotCameraControl(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RobotCameraControl(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RobotCameraControl * soap_new_req___ns1__RobotCameraControl(struct soap *soap) { struct __ns1__RobotCameraControl *_p = soap_instantiate___ns1__RobotCameraControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotCameraControl(soap, _p); } return _p; }

inline struct __ns1__RobotCameraControl * soap_new_set___ns1__RobotCameraControl(struct soap *soap, _ns3__RobotCameraControl *ns3__RobotCameraControl) { struct __ns1__RobotCameraControl *_p = soap_instantiate___ns1__RobotCameraControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotCameraControl(soap, _p); _p->ns3__RobotCameraControl = ns3__RobotCameraControl; } return _p; }

inline void soap_delete___ns1__RobotCameraControl(struct soap *soap, struct __ns1__RobotCameraControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RobotCameraControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__RobotYuntaiControl
#define SOAP_TYPE_RobotData___ns1__RobotYuntaiControl (191)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RobotYuntaiControl(struct soap*, struct __ns1__RobotYuntaiControl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RobotYuntaiControl(struct soap*, const struct __ns1__RobotYuntaiControl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RobotYuntaiControl(struct soap*, const char*, int, const struct __ns1__RobotYuntaiControl *, const char*);
SOAP_FMAC3 struct __ns1__RobotYuntaiControl * SOAP_FMAC4 soap_in___ns1__RobotYuntaiControl(struct soap*, const char*, struct __ns1__RobotYuntaiControl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RobotYuntaiControl(struct soap*, const struct __ns1__RobotYuntaiControl *, const char*, const char*);

#ifndef soap_write___ns1__RobotYuntaiControl
#define soap_write___ns1__RobotYuntaiControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__RobotYuntaiControl(soap, data),0) || RobotData::soap_put___ns1__RobotYuntaiControl(soap, data, "-ns1:RobotYuntaiControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RobotYuntaiControl * SOAP_FMAC4 soap_get___ns1__RobotYuntaiControl(struct soap*, struct __ns1__RobotYuntaiControl *, const char*, const char*);

#ifndef soap_read___ns1__RobotYuntaiControl
#define soap_read___ns1__RobotYuntaiControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__RobotYuntaiControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RobotYuntaiControl * SOAP_FMAC2 soap_instantiate___ns1__RobotYuntaiControl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RobotYuntaiControl * soap_new___ns1__RobotYuntaiControl(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RobotYuntaiControl(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RobotYuntaiControl * soap_new_req___ns1__RobotYuntaiControl(struct soap *soap) { struct __ns1__RobotYuntaiControl *_p = soap_instantiate___ns1__RobotYuntaiControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotYuntaiControl(soap, _p); } return _p; }

inline struct __ns1__RobotYuntaiControl * soap_new_set___ns1__RobotYuntaiControl(struct soap *soap, _ns3__RobotYuntaiControl *ns3__RobotYuntaiControl) { struct __ns1__RobotYuntaiControl *_p = soap_instantiate___ns1__RobotYuntaiControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotYuntaiControl(soap, _p); _p->ns3__RobotYuntaiControl = ns3__RobotYuntaiControl; } return _p; }

inline void soap_delete___ns1__RobotYuntaiControl(struct soap *soap, struct __ns1__RobotYuntaiControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RobotYuntaiControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__RobotSpeedControl
#define SOAP_TYPE_RobotData___ns1__RobotSpeedControl (187)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__RobotSpeedControl(struct soap*, struct __ns1__RobotSpeedControl *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__RobotSpeedControl(struct soap*, const struct __ns1__RobotSpeedControl *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__RobotSpeedControl(struct soap*, const char*, int, const struct __ns1__RobotSpeedControl *, const char*);
SOAP_FMAC3 struct __ns1__RobotSpeedControl * SOAP_FMAC4 soap_in___ns1__RobotSpeedControl(struct soap*, const char*, struct __ns1__RobotSpeedControl *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__RobotSpeedControl(struct soap*, const struct __ns1__RobotSpeedControl *, const char*, const char*);

#ifndef soap_write___ns1__RobotSpeedControl
#define soap_write___ns1__RobotSpeedControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__RobotSpeedControl(soap, data),0) || RobotData::soap_put___ns1__RobotSpeedControl(soap, data, "-ns1:RobotSpeedControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__RobotSpeedControl * SOAP_FMAC4 soap_get___ns1__RobotSpeedControl(struct soap*, struct __ns1__RobotSpeedControl *, const char*, const char*);

#ifndef soap_read___ns1__RobotSpeedControl
#define soap_read___ns1__RobotSpeedControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__RobotSpeedControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__RobotSpeedControl * SOAP_FMAC2 soap_instantiate___ns1__RobotSpeedControl(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__RobotSpeedControl * soap_new___ns1__RobotSpeedControl(struct soap *soap, int n = -1) { return soap_instantiate___ns1__RobotSpeedControl(soap, n, NULL, NULL, NULL); }

inline struct __ns1__RobotSpeedControl * soap_new_req___ns1__RobotSpeedControl(struct soap *soap) { struct __ns1__RobotSpeedControl *_p = soap_instantiate___ns1__RobotSpeedControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotSpeedControl(soap, _p); } return _p; }

inline struct __ns1__RobotSpeedControl * soap_new_set___ns1__RobotSpeedControl(struct soap *soap, _ns3__RobotSpeedControl *ns3__RobotSpeedControl) { struct __ns1__RobotSpeedControl *_p = soap_instantiate___ns1__RobotSpeedControl(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__RobotSpeedControl(soap, _p); _p->ns3__RobotSpeedControl = ns3__RobotSpeedControl; } return _p; }

inline void soap_delete___ns1__RobotSpeedControl(struct soap *soap, struct __ns1__RobotSpeedControl *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__RobotSpeedControl(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetControlMode
#define SOAP_TYPE_RobotData___ns1__GetControlMode (183)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetControlMode(struct soap*, struct __ns1__GetControlMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetControlMode(struct soap*, const struct __ns1__GetControlMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetControlMode(struct soap*, const char*, int, const struct __ns1__GetControlMode *, const char*);
SOAP_FMAC3 struct __ns1__GetControlMode * SOAP_FMAC4 soap_in___ns1__GetControlMode(struct soap*, const char*, struct __ns1__GetControlMode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetControlMode(struct soap*, const struct __ns1__GetControlMode *, const char*, const char*);

#ifndef soap_write___ns1__GetControlMode
#define soap_write___ns1__GetControlMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetControlMode(soap, data),0) || RobotData::soap_put___ns1__GetControlMode(soap, data, "-ns1:GetControlMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetControlMode * SOAP_FMAC4 soap_get___ns1__GetControlMode(struct soap*, struct __ns1__GetControlMode *, const char*, const char*);

#ifndef soap_read___ns1__GetControlMode
#define soap_read___ns1__GetControlMode(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetControlMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetControlMode * SOAP_FMAC2 soap_instantiate___ns1__GetControlMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetControlMode * soap_new___ns1__GetControlMode(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetControlMode(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetControlMode * soap_new_req___ns1__GetControlMode(struct soap *soap) { struct __ns1__GetControlMode *_p = soap_instantiate___ns1__GetControlMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetControlMode(soap, _p); } return _p; }

inline struct __ns1__GetControlMode * soap_new_set___ns1__GetControlMode(struct soap *soap, _ns3__GetControlMode *ns3__GetControlMode) { struct __ns1__GetControlMode *_p = soap_instantiate___ns1__GetControlMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetControlMode(soap, _p); _p->ns3__GetControlMode = ns3__GetControlMode; } return _p; }

inline void soap_delete___ns1__GetControlMode(struct soap *soap, struct __ns1__GetControlMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetControlMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__SetControlMode
#define SOAP_TYPE_RobotData___ns1__SetControlMode (179)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetControlMode(struct soap*, struct __ns1__SetControlMode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetControlMode(struct soap*, const struct __ns1__SetControlMode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetControlMode(struct soap*, const char*, int, const struct __ns1__SetControlMode *, const char*);
SOAP_FMAC3 struct __ns1__SetControlMode * SOAP_FMAC4 soap_in___ns1__SetControlMode(struct soap*, const char*, struct __ns1__SetControlMode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetControlMode(struct soap*, const struct __ns1__SetControlMode *, const char*, const char*);

#ifndef soap_write___ns1__SetControlMode
#define soap_write___ns1__SetControlMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__SetControlMode(soap, data),0) || RobotData::soap_put___ns1__SetControlMode(soap, data, "-ns1:SetControlMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetControlMode * SOAP_FMAC4 soap_get___ns1__SetControlMode(struct soap*, struct __ns1__SetControlMode *, const char*, const char*);

#ifndef soap_read___ns1__SetControlMode
#define soap_read___ns1__SetControlMode(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__SetControlMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetControlMode * SOAP_FMAC2 soap_instantiate___ns1__SetControlMode(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetControlMode * soap_new___ns1__SetControlMode(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetControlMode(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetControlMode * soap_new_req___ns1__SetControlMode(struct soap *soap) { struct __ns1__SetControlMode *_p = soap_instantiate___ns1__SetControlMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetControlMode(soap, _p); } return _p; }

inline struct __ns1__SetControlMode * soap_new_set___ns1__SetControlMode(struct soap *soap, _ns3__SetControlMode *ns3__SetControlMode) { struct __ns1__SetControlMode *_p = soap_instantiate___ns1__SetControlMode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetControlMode(soap, _p); _p->ns3__SetControlMode = ns3__SetControlMode; } return _p; }

inline void soap_delete___ns1__SetControlMode(struct soap *soap, struct __ns1__SetControlMode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetControlMode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__ReleaseCurrentRobot
#define SOAP_TYPE_RobotData___ns1__ReleaseCurrentRobot (175)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ReleaseCurrentRobot(struct soap*, struct __ns1__ReleaseCurrentRobot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ReleaseCurrentRobot(struct soap*, const struct __ns1__ReleaseCurrentRobot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ReleaseCurrentRobot(struct soap*, const char*, int, const struct __ns1__ReleaseCurrentRobot *, const char*);
SOAP_FMAC3 struct __ns1__ReleaseCurrentRobot * SOAP_FMAC4 soap_in___ns1__ReleaseCurrentRobot(struct soap*, const char*, struct __ns1__ReleaseCurrentRobot *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ReleaseCurrentRobot(struct soap*, const struct __ns1__ReleaseCurrentRobot *, const char*, const char*);

#ifndef soap_write___ns1__ReleaseCurrentRobot
#define soap_write___ns1__ReleaseCurrentRobot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__ReleaseCurrentRobot(soap, data),0) || RobotData::soap_put___ns1__ReleaseCurrentRobot(soap, data, "-ns1:ReleaseCurrentRobot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ReleaseCurrentRobot * SOAP_FMAC4 soap_get___ns1__ReleaseCurrentRobot(struct soap*, struct __ns1__ReleaseCurrentRobot *, const char*, const char*);

#ifndef soap_read___ns1__ReleaseCurrentRobot
#define soap_read___ns1__ReleaseCurrentRobot(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__ReleaseCurrentRobot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__ReleaseCurrentRobot * SOAP_FMAC2 soap_instantiate___ns1__ReleaseCurrentRobot(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ReleaseCurrentRobot * soap_new___ns1__ReleaseCurrentRobot(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ReleaseCurrentRobot(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ReleaseCurrentRobot * soap_new_req___ns1__ReleaseCurrentRobot(struct soap *soap) { struct __ns1__ReleaseCurrentRobot *_p = soap_instantiate___ns1__ReleaseCurrentRobot(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__ReleaseCurrentRobot(soap, _p); } return _p; }

inline struct __ns1__ReleaseCurrentRobot * soap_new_set___ns1__ReleaseCurrentRobot(struct soap *soap, _ns3__ReleaseCurrentRobot *ns3__ReleaseCurrentRobot) { struct __ns1__ReleaseCurrentRobot *_p = soap_instantiate___ns1__ReleaseCurrentRobot(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__ReleaseCurrentRobot(soap, _p); _p->ns3__ReleaseCurrentRobot = ns3__ReleaseCurrentRobot; } return _p; }

inline void soap_delete___ns1__ReleaseCurrentRobot(struct soap *soap, struct __ns1__ReleaseCurrentRobot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ReleaseCurrentRobot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__SetCurrentRobot
#define SOAP_TYPE_RobotData___ns1__SetCurrentRobot (171)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetCurrentRobot(struct soap*, struct __ns1__SetCurrentRobot *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetCurrentRobot(struct soap*, const struct __ns1__SetCurrentRobot *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetCurrentRobot(struct soap*, const char*, int, const struct __ns1__SetCurrentRobot *, const char*);
SOAP_FMAC3 struct __ns1__SetCurrentRobot * SOAP_FMAC4 soap_in___ns1__SetCurrentRobot(struct soap*, const char*, struct __ns1__SetCurrentRobot *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetCurrentRobot(struct soap*, const struct __ns1__SetCurrentRobot *, const char*, const char*);

#ifndef soap_write___ns1__SetCurrentRobot
#define soap_write___ns1__SetCurrentRobot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__SetCurrentRobot(soap, data),0) || RobotData::soap_put___ns1__SetCurrentRobot(soap, data, "-ns1:SetCurrentRobot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetCurrentRobot * SOAP_FMAC4 soap_get___ns1__SetCurrentRobot(struct soap*, struct __ns1__SetCurrentRobot *, const char*, const char*);

#ifndef soap_read___ns1__SetCurrentRobot
#define soap_read___ns1__SetCurrentRobot(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__SetCurrentRobot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetCurrentRobot * SOAP_FMAC2 soap_instantiate___ns1__SetCurrentRobot(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetCurrentRobot * soap_new___ns1__SetCurrentRobot(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetCurrentRobot(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetCurrentRobot * soap_new_req___ns1__SetCurrentRobot(struct soap *soap) { struct __ns1__SetCurrentRobot *_p = soap_instantiate___ns1__SetCurrentRobot(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetCurrentRobot(soap, _p); } return _p; }

inline struct __ns1__SetCurrentRobot * soap_new_set___ns1__SetCurrentRobot(struct soap *soap, _ns3__SetCurrentRobot *ns3__SetCurrentRobot) { struct __ns1__SetCurrentRobot *_p = soap_instantiate___ns1__SetCurrentRobot(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetCurrentRobot(soap, _p); _p->ns3__SetCurrentRobot = ns3__SetCurrentRobot; } return _p; }

inline void soap_delete___ns1__SetCurrentRobot(struct soap *soap, struct __ns1__SetCurrentRobot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetCurrentRobot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__SetRobotTime
#define SOAP_TYPE_RobotData___ns1__SetRobotTime (167)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetRobotTime(struct soap*, struct __ns1__SetRobotTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetRobotTime(struct soap*, const struct __ns1__SetRobotTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetRobotTime(struct soap*, const char*, int, const struct __ns1__SetRobotTime *, const char*);
SOAP_FMAC3 struct __ns1__SetRobotTime * SOAP_FMAC4 soap_in___ns1__SetRobotTime(struct soap*, const char*, struct __ns1__SetRobotTime *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetRobotTime(struct soap*, const struct __ns1__SetRobotTime *, const char*, const char*);

#ifndef soap_write___ns1__SetRobotTime
#define soap_write___ns1__SetRobotTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__SetRobotTime(soap, data),0) || RobotData::soap_put___ns1__SetRobotTime(soap, data, "-ns1:SetRobotTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetRobotTime * SOAP_FMAC4 soap_get___ns1__SetRobotTime(struct soap*, struct __ns1__SetRobotTime *, const char*, const char*);

#ifndef soap_read___ns1__SetRobotTime
#define soap_read___ns1__SetRobotTime(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__SetRobotTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetRobotTime * SOAP_FMAC2 soap_instantiate___ns1__SetRobotTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetRobotTime * soap_new___ns1__SetRobotTime(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetRobotTime(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetRobotTime * soap_new_req___ns1__SetRobotTime(struct soap *soap) { struct __ns1__SetRobotTime *_p = soap_instantiate___ns1__SetRobotTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetRobotTime(soap, _p); } return _p; }

inline struct __ns1__SetRobotTime * soap_new_set___ns1__SetRobotTime(struct soap *soap, _ns3__SetRobotTime *ns3__SetRobotTime) { struct __ns1__SetRobotTime *_p = soap_instantiate___ns1__SetRobotTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetRobotTime(soap, _p); _p->ns3__SetRobotTime = ns3__SetRobotTime; } return _p; }

inline void soap_delete___ns1__SetRobotTime(struct soap *soap, struct __ns1__SetRobotTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetRobotTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotTime
#define SOAP_TYPE_RobotData___ns1__GetRobotTime (163)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotTime(struct soap*, struct __ns1__GetRobotTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotTime(struct soap*, const struct __ns1__GetRobotTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotTime(struct soap*, const char*, int, const struct __ns1__GetRobotTime *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotTime * SOAP_FMAC4 soap_in___ns1__GetRobotTime(struct soap*, const char*, struct __ns1__GetRobotTime *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotTime(struct soap*, const struct __ns1__GetRobotTime *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotTime
#define soap_write___ns1__GetRobotTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotTime(soap, data),0) || RobotData::soap_put___ns1__GetRobotTime(soap, data, "-ns1:GetRobotTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotTime * SOAP_FMAC4 soap_get___ns1__GetRobotTime(struct soap*, struct __ns1__GetRobotTime *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotTime
#define soap_read___ns1__GetRobotTime(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotTime * SOAP_FMAC2 soap_instantiate___ns1__GetRobotTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotTime * soap_new___ns1__GetRobotTime(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotTime(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotTime * soap_new_req___ns1__GetRobotTime(struct soap *soap) { struct __ns1__GetRobotTime *_p = soap_instantiate___ns1__GetRobotTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotTime(soap, _p); } return _p; }

inline struct __ns1__GetRobotTime * soap_new_set___ns1__GetRobotTime(struct soap *soap, _ns3__GetRobotTime *ns3__GetRobotTime) { struct __ns1__GetRobotTime *_p = soap_instantiate___ns1__GetRobotTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotTime(soap, _p); _p->ns3__GetRobotTime = ns3__GetRobotTime; } return _p; }

inline void soap_delete___ns1__GetRobotTime(struct soap *soap, struct __ns1__GetRobotTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotInfo
#define SOAP_TYPE_RobotData___ns1__GetRobotInfo (159)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotInfo(struct soap*, struct __ns1__GetRobotInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotInfo(struct soap*, const struct __ns1__GetRobotInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotInfo(struct soap*, const char*, int, const struct __ns1__GetRobotInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotInfo * SOAP_FMAC4 soap_in___ns1__GetRobotInfo(struct soap*, const char*, struct __ns1__GetRobotInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotInfo(struct soap*, const struct __ns1__GetRobotInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotInfo
#define soap_write___ns1__GetRobotInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotInfo(soap, data),0) || RobotData::soap_put___ns1__GetRobotInfo(soap, data, "-ns1:GetRobotInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotInfo * SOAP_FMAC4 soap_get___ns1__GetRobotInfo(struct soap*, struct __ns1__GetRobotInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotInfo
#define soap_read___ns1__GetRobotInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotInfo * SOAP_FMAC2 soap_instantiate___ns1__GetRobotInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotInfo * soap_new___ns1__GetRobotInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotInfo * soap_new_req___ns1__GetRobotInfo(struct soap *soap) { struct __ns1__GetRobotInfo *_p = soap_instantiate___ns1__GetRobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotInfo(soap, _p); } return _p; }

inline struct __ns1__GetRobotInfo * soap_new_set___ns1__GetRobotInfo(struct soap *soap, _ns3__GetRobotInfo *ns3__GetRobotInfo) { struct __ns1__GetRobotInfo *_p = soap_instantiate___ns1__GetRobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotInfo(soap, _p); _p->ns3__GetRobotInfo = ns3__GetRobotInfo; } return _p; }

inline void soap_delete___ns1__GetRobotInfo(struct soap *soap, struct __ns1__GetRobotInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData___ns1__GetRobotConnect
#define SOAP_TYPE_RobotData___ns1__GetRobotConnect (155)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetRobotConnect(struct soap*, struct __ns1__GetRobotConnect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetRobotConnect(struct soap*, const struct __ns1__GetRobotConnect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetRobotConnect(struct soap*, const char*, int, const struct __ns1__GetRobotConnect *, const char*);
SOAP_FMAC3 struct __ns1__GetRobotConnect * SOAP_FMAC4 soap_in___ns1__GetRobotConnect(struct soap*, const char*, struct __ns1__GetRobotConnect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetRobotConnect(struct soap*, const struct __ns1__GetRobotConnect *, const char*, const char*);

#ifndef soap_write___ns1__GetRobotConnect
#define soap_write___ns1__GetRobotConnect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize___ns1__GetRobotConnect(soap, data),0) || RobotData::soap_put___ns1__GetRobotConnect(soap, data, "-ns1:GetRobotConnect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetRobotConnect * SOAP_FMAC4 soap_get___ns1__GetRobotConnect(struct soap*, struct __ns1__GetRobotConnect *, const char*, const char*);

#ifndef soap_read___ns1__GetRobotConnect
#define soap_read___ns1__GetRobotConnect(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get___ns1__GetRobotConnect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetRobotConnect * SOAP_FMAC2 soap_instantiate___ns1__GetRobotConnect(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetRobotConnect * soap_new___ns1__GetRobotConnect(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetRobotConnect(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetRobotConnect * soap_new_req___ns1__GetRobotConnect(struct soap *soap) { struct __ns1__GetRobotConnect *_p = soap_instantiate___ns1__GetRobotConnect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotConnect(soap, _p); } return _p; }

inline struct __ns1__GetRobotConnect * soap_new_set___ns1__GetRobotConnect(struct soap *soap, _ns3__GetRobotConnect *ns3__GetRobotConnect) { struct __ns1__GetRobotConnect *_p = soap_instantiate___ns1__GetRobotConnect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetRobotConnect(soap, _p); _p->ns3__GetRobotConnect = ns3__GetRobotConnect; } return _p; }

inline void soap_delete___ns1__GetRobotConnect(struct soap *soap, struct __ns1__GetRobotConnect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetRobotConnect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_RobotData_PointerToSOAP_ENV__Reason (257)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || RobotData::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_RobotData_PointerToSOAP_ENV__Detail (256)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || RobotData::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_RobotData_PointerToSOAP_ENV__Code
#define SOAP_TYPE_RobotData_PointerToSOAP_ENV__Code (250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || RobotData::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotAlarmInfoResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotAlarmInfoResponse (245)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotAlarmInfoResponse(struct soap*, _ns3__GetRobotAlarmInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotAlarmInfoResponse(struct soap*, const char *, int, _ns3__GetRobotAlarmInfoResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotAlarmInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotAlarmInfoResponse(struct soap*, const char*, _ns3__GetRobotAlarmInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotAlarmInfoResponse(struct soap*, _ns3__GetRobotAlarmInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotAlarmInfoResponse
#define soap_write_PointerTo_ns3__GetRobotAlarmInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotAlarmInfoResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotAlarmInfoResponse(soap, data, "ns3:GetRobotAlarmInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotAlarmInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotAlarmInfoResponse(struct soap*, _ns3__GetRobotAlarmInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotAlarmInfoResponse
#define soap_read_PointerTo_ns3__GetRobotAlarmInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotAlarmInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotAlarmInfo
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotAlarmInfo (244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotAlarmInfo(struct soap*, _ns3__GetRobotAlarmInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotAlarmInfo(struct soap*, const char *, int, _ns3__GetRobotAlarmInfo *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotAlarmInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotAlarmInfo(struct soap*, const char*, _ns3__GetRobotAlarmInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotAlarmInfo(struct soap*, _ns3__GetRobotAlarmInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotAlarmInfo
#define soap_write_PointerTo_ns3__GetRobotAlarmInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotAlarmInfo(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotAlarmInfo(soap, data, "ns3:GetRobotAlarmInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotAlarmInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotAlarmInfo(struct soap*, _ns3__GetRobotAlarmInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotAlarmInfo
#define soap_read_PointerTo_ns3__GetRobotAlarmInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotAlarmInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotGasInfoResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotGasInfoResponse (241)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotGasInfoResponse(struct soap*, _ns3__GetRobotGasInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotGasInfoResponse(struct soap*, const char *, int, _ns3__GetRobotGasInfoResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotGasInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotGasInfoResponse(struct soap*, const char*, _ns3__GetRobotGasInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotGasInfoResponse(struct soap*, _ns3__GetRobotGasInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotGasInfoResponse
#define soap_write_PointerTo_ns3__GetRobotGasInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotGasInfoResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotGasInfoResponse(soap, data, "ns3:GetRobotGasInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotGasInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotGasInfoResponse(struct soap*, _ns3__GetRobotGasInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotGasInfoResponse
#define soap_read_PointerTo_ns3__GetRobotGasInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotGasInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotGasInfo
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotGasInfo (240)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotGasInfo(struct soap*, _ns3__GetRobotGasInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotGasInfo(struct soap*, const char *, int, _ns3__GetRobotGasInfo *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotGasInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotGasInfo(struct soap*, const char*, _ns3__GetRobotGasInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotGasInfo(struct soap*, _ns3__GetRobotGasInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotGasInfo
#define soap_write_PointerTo_ns3__GetRobotGasInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotGasInfo(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotGasInfo(soap, data, "ns3:GetRobotGasInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotGasInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotGasInfo(struct soap*, _ns3__GetRobotGasInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotGasInfo
#define soap_read_PointerTo_ns3__GetRobotGasInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotGasInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotMileageInfoResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotMileageInfoResponse (237)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotMileageInfoResponse(struct soap*, _ns3__GetRobotMileageInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotMileageInfoResponse(struct soap*, const char *, int, _ns3__GetRobotMileageInfoResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotMileageInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotMileageInfoResponse(struct soap*, const char*, _ns3__GetRobotMileageInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotMileageInfoResponse(struct soap*, _ns3__GetRobotMileageInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotMileageInfoResponse
#define soap_write_PointerTo_ns3__GetRobotMileageInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotMileageInfoResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotMileageInfoResponse(soap, data, "ns3:GetRobotMileageInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotMileageInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotMileageInfoResponse(struct soap*, _ns3__GetRobotMileageInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotMileageInfoResponse
#define soap_read_PointerTo_ns3__GetRobotMileageInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotMileageInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotMileageInfo
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotMileageInfo (236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotMileageInfo(struct soap*, _ns3__GetRobotMileageInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotMileageInfo(struct soap*, const char *, int, _ns3__GetRobotMileageInfo *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotMileageInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotMileageInfo(struct soap*, const char*, _ns3__GetRobotMileageInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotMileageInfo(struct soap*, _ns3__GetRobotMileageInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotMileageInfo
#define soap_write_PointerTo_ns3__GetRobotMileageInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotMileageInfo(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotMileageInfo(soap, data, "ns3:GetRobotMileageInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotMileageInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotMileageInfo(struct soap*, _ns3__GetRobotMileageInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotMileageInfo
#define soap_read_PointerTo_ns3__GetRobotMileageInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotMileageInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotYunTaiInfoResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotYunTaiInfoResponse (233)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotYunTaiInfoResponse(struct soap*, _ns3__GetRobotYunTaiInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotYunTaiInfoResponse(struct soap*, const char *, int, _ns3__GetRobotYunTaiInfoResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotYunTaiInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotYunTaiInfoResponse(struct soap*, const char*, _ns3__GetRobotYunTaiInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotYunTaiInfoResponse(struct soap*, _ns3__GetRobotYunTaiInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotYunTaiInfoResponse
#define soap_write_PointerTo_ns3__GetRobotYunTaiInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotYunTaiInfoResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotYunTaiInfoResponse(soap, data, "ns3:GetRobotYunTaiInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotYunTaiInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotYunTaiInfoResponse(struct soap*, _ns3__GetRobotYunTaiInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotYunTaiInfoResponse
#define soap_read_PointerTo_ns3__GetRobotYunTaiInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotYunTaiInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotYunTaiInfo
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotYunTaiInfo (232)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotYunTaiInfo(struct soap*, _ns3__GetRobotYunTaiInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotYunTaiInfo(struct soap*, const char *, int, _ns3__GetRobotYunTaiInfo *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotYunTaiInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotYunTaiInfo(struct soap*, const char*, _ns3__GetRobotYunTaiInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotYunTaiInfo(struct soap*, _ns3__GetRobotYunTaiInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotYunTaiInfo
#define soap_write_PointerTo_ns3__GetRobotYunTaiInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotYunTaiInfo(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotYunTaiInfo(soap, data, "ns3:GetRobotYunTaiInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotYunTaiInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotYunTaiInfo(struct soap*, _ns3__GetRobotYunTaiInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotYunTaiInfo
#define soap_read_PointerTo_ns3__GetRobotYunTaiInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotYunTaiInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotPosInfoResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotPosInfoResponse (229)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotPosInfoResponse(struct soap*, _ns3__GetRobotPosInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotPosInfoResponse(struct soap*, const char *, int, _ns3__GetRobotPosInfoResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotPosInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotPosInfoResponse(struct soap*, const char*, _ns3__GetRobotPosInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotPosInfoResponse(struct soap*, _ns3__GetRobotPosInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotPosInfoResponse
#define soap_write_PointerTo_ns3__GetRobotPosInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotPosInfoResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotPosInfoResponse(soap, data, "ns3:GetRobotPosInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotPosInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotPosInfoResponse(struct soap*, _ns3__GetRobotPosInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotPosInfoResponse
#define soap_read_PointerTo_ns3__GetRobotPosInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotPosInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotPosInfo
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotPosInfo (228)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotPosInfo(struct soap*, _ns3__GetRobotPosInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotPosInfo(struct soap*, const char *, int, _ns3__GetRobotPosInfo *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotPosInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotPosInfo(struct soap*, const char*, _ns3__GetRobotPosInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotPosInfo(struct soap*, _ns3__GetRobotPosInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotPosInfo
#define soap_write_PointerTo_ns3__GetRobotPosInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotPosInfo(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotPosInfo(soap, data, "ns3:GetRobotPosInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotPosInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotPosInfo(struct soap*, _ns3__GetRobotPosInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotPosInfo
#define soap_read_PointerTo_ns3__GetRobotPosInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotPosInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotTaskStateResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotTaskStateResponse (225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotTaskStateResponse(struct soap*, _ns3__GetRobotTaskStateResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotTaskStateResponse(struct soap*, const char *, int, _ns3__GetRobotTaskStateResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotTaskStateResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotTaskStateResponse(struct soap*, const char*, _ns3__GetRobotTaskStateResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotTaskStateResponse(struct soap*, _ns3__GetRobotTaskStateResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotTaskStateResponse
#define soap_write_PointerTo_ns3__GetRobotTaskStateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotTaskStateResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotTaskStateResponse(soap, data, "ns3:GetRobotTaskStateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotTaskStateResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotTaskStateResponse(struct soap*, _ns3__GetRobotTaskStateResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotTaskStateResponse
#define soap_read_PointerTo_ns3__GetRobotTaskStateResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotTaskStateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotTaskState
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotTaskState (224)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotTaskState(struct soap*, _ns3__GetRobotTaskState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotTaskState(struct soap*, const char *, int, _ns3__GetRobotTaskState *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotTaskState ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotTaskState(struct soap*, const char*, _ns3__GetRobotTaskState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotTaskState(struct soap*, _ns3__GetRobotTaskState *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotTaskState
#define soap_write_PointerTo_ns3__GetRobotTaskState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotTaskState(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotTaskState(soap, data, "ns3:GetRobotTaskState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotTaskState ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotTaskState(struct soap*, _ns3__GetRobotTaskState **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotTaskState
#define soap_read_PointerTo_ns3__GetRobotTaskState(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotTaskState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotSpeedInfoResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotSpeedInfoResponse (221)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotSpeedInfoResponse(struct soap*, _ns3__GetRobotSpeedInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotSpeedInfoResponse(struct soap*, const char *, int, _ns3__GetRobotSpeedInfoResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotSpeedInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotSpeedInfoResponse(struct soap*, const char*, _ns3__GetRobotSpeedInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotSpeedInfoResponse(struct soap*, _ns3__GetRobotSpeedInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotSpeedInfoResponse
#define soap_write_PointerTo_ns3__GetRobotSpeedInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotSpeedInfoResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotSpeedInfoResponse(soap, data, "ns3:GetRobotSpeedInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotSpeedInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotSpeedInfoResponse(struct soap*, _ns3__GetRobotSpeedInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotSpeedInfoResponse
#define soap_read_PointerTo_ns3__GetRobotSpeedInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotSpeedInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotSpeedInfo
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotSpeedInfo (220)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotSpeedInfo(struct soap*, _ns3__GetRobotSpeedInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotSpeedInfo(struct soap*, const char *, int, _ns3__GetRobotSpeedInfo *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotSpeedInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotSpeedInfo(struct soap*, const char*, _ns3__GetRobotSpeedInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotSpeedInfo(struct soap*, _ns3__GetRobotSpeedInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotSpeedInfo
#define soap_write_PointerTo_ns3__GetRobotSpeedInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotSpeedInfo(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotSpeedInfo(soap, data, "ns3:GetRobotSpeedInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotSpeedInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotSpeedInfo(struct soap*, _ns3__GetRobotSpeedInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotSpeedInfo
#define soap_read_PointerTo_ns3__GetRobotSpeedInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotSpeedInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotBatteryInfoResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotBatteryInfoResponse (217)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotBatteryInfoResponse(struct soap*, _ns3__GetRobotBatteryInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotBatteryInfoResponse(struct soap*, const char *, int, _ns3__GetRobotBatteryInfoResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotBatteryInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotBatteryInfoResponse(struct soap*, const char*, _ns3__GetRobotBatteryInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotBatteryInfoResponse(struct soap*, _ns3__GetRobotBatteryInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotBatteryInfoResponse
#define soap_write_PointerTo_ns3__GetRobotBatteryInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotBatteryInfoResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotBatteryInfoResponse(soap, data, "ns3:GetRobotBatteryInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotBatteryInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotBatteryInfoResponse(struct soap*, _ns3__GetRobotBatteryInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotBatteryInfoResponse
#define soap_read_PointerTo_ns3__GetRobotBatteryInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotBatteryInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotBatteryInfo
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotBatteryInfo (216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotBatteryInfo(struct soap*, _ns3__GetRobotBatteryInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotBatteryInfo(struct soap*, const char *, int, _ns3__GetRobotBatteryInfo *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotBatteryInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotBatteryInfo(struct soap*, const char*, _ns3__GetRobotBatteryInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotBatteryInfo(struct soap*, _ns3__GetRobotBatteryInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotBatteryInfo
#define soap_write_PointerTo_ns3__GetRobotBatteryInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotBatteryInfo(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotBatteryInfo(soap, data, "ns3:GetRobotBatteryInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotBatteryInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotBatteryInfo(struct soap*, _ns3__GetRobotBatteryInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotBatteryInfo
#define soap_read_PointerTo_ns3__GetRobotBatteryInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotBatteryInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotPdControlResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotPdControlResponse (213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotPdControlResponse(struct soap*, _ns3__RobotPdControlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotPdControlResponse(struct soap*, const char *, int, _ns3__RobotPdControlResponse *const*, const char *);
SOAP_FMAC3 _ns3__RobotPdControlResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotPdControlResponse(struct soap*, const char*, _ns3__RobotPdControlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotPdControlResponse(struct soap*, _ns3__RobotPdControlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotPdControlResponse
#define soap_write_PointerTo_ns3__RobotPdControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotPdControlResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotPdControlResponse(soap, data, "ns3:RobotPdControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotPdControlResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotPdControlResponse(struct soap*, _ns3__RobotPdControlResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotPdControlResponse
#define soap_read_PointerTo_ns3__RobotPdControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotPdControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotPdControl
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotPdControl (212)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotPdControl(struct soap*, _ns3__RobotPdControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotPdControl(struct soap*, const char *, int, _ns3__RobotPdControl *const*, const char *);
SOAP_FMAC3 _ns3__RobotPdControl ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotPdControl(struct soap*, const char*, _ns3__RobotPdControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotPdControl(struct soap*, _ns3__RobotPdControl *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotPdControl
#define soap_write_PointerTo_ns3__RobotPdControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotPdControl(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotPdControl(soap, data, "ns3:RobotPdControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotPdControl ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotPdControl(struct soap*, _ns3__RobotPdControl **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotPdControl
#define soap_read_PointerTo_ns3__RobotPdControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotPdControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotLifterControlResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotLifterControlResponse (209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotLifterControlResponse(struct soap*, _ns3__RobotLifterControlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotLifterControlResponse(struct soap*, const char *, int, _ns3__RobotLifterControlResponse *const*, const char *);
SOAP_FMAC3 _ns3__RobotLifterControlResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotLifterControlResponse(struct soap*, const char*, _ns3__RobotLifterControlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotLifterControlResponse(struct soap*, _ns3__RobotLifterControlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotLifterControlResponse
#define soap_write_PointerTo_ns3__RobotLifterControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotLifterControlResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotLifterControlResponse(soap, data, "ns3:RobotLifterControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotLifterControlResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotLifterControlResponse(struct soap*, _ns3__RobotLifterControlResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotLifterControlResponse
#define soap_read_PointerTo_ns3__RobotLifterControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotLifterControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotLifterControl
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotLifterControl (208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotLifterControl(struct soap*, _ns3__RobotLifterControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotLifterControl(struct soap*, const char *, int, _ns3__RobotLifterControl *const*, const char *);
SOAP_FMAC3 _ns3__RobotLifterControl ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotLifterControl(struct soap*, const char*, _ns3__RobotLifterControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotLifterControl(struct soap*, _ns3__RobotLifterControl *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotLifterControl
#define soap_write_PointerTo_ns3__RobotLifterControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotLifterControl(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotLifterControl(soap, data, "ns3:RobotLifterControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotLifterControl ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotLifterControl(struct soap*, _ns3__RobotLifterControl **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotLifterControl
#define soap_read_PointerTo_ns3__RobotLifterControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotLifterControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotFlirControlResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotFlirControlResponse (205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotFlirControlResponse(struct soap*, _ns3__RobotFlirControlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotFlirControlResponse(struct soap*, const char *, int, _ns3__RobotFlirControlResponse *const*, const char *);
SOAP_FMAC3 _ns3__RobotFlirControlResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotFlirControlResponse(struct soap*, const char*, _ns3__RobotFlirControlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotFlirControlResponse(struct soap*, _ns3__RobotFlirControlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotFlirControlResponse
#define soap_write_PointerTo_ns3__RobotFlirControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotFlirControlResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotFlirControlResponse(soap, data, "ns3:RobotFlirControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotFlirControlResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotFlirControlResponse(struct soap*, _ns3__RobotFlirControlResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotFlirControlResponse
#define soap_read_PointerTo_ns3__RobotFlirControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotFlirControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotFlirControl
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotFlirControl (204)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotFlirControl(struct soap*, _ns3__RobotFlirControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotFlirControl(struct soap*, const char *, int, _ns3__RobotFlirControl *const*, const char *);
SOAP_FMAC3 _ns3__RobotFlirControl ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotFlirControl(struct soap*, const char*, _ns3__RobotFlirControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotFlirControl(struct soap*, _ns3__RobotFlirControl *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotFlirControl
#define soap_write_PointerTo_ns3__RobotFlirControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotFlirControl(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotFlirControl(soap, data, "ns3:RobotFlirControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotFlirControl ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotFlirControl(struct soap*, _ns3__RobotFlirControl **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotFlirControl
#define soap_read_PointerTo_ns3__RobotFlirControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotFlirControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotWiperControlResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotWiperControlResponse (201)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotWiperControlResponse(struct soap*, _ns3__RobotWiperControlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotWiperControlResponse(struct soap*, const char *, int, _ns3__RobotWiperControlResponse *const*, const char *);
SOAP_FMAC3 _ns3__RobotWiperControlResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotWiperControlResponse(struct soap*, const char*, _ns3__RobotWiperControlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotWiperControlResponse(struct soap*, _ns3__RobotWiperControlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotWiperControlResponse
#define soap_write_PointerTo_ns3__RobotWiperControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotWiperControlResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotWiperControlResponse(soap, data, "ns3:RobotWiperControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotWiperControlResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotWiperControlResponse(struct soap*, _ns3__RobotWiperControlResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotWiperControlResponse
#define soap_read_PointerTo_ns3__RobotWiperControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotWiperControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotWiperControl
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotWiperControl (200)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotWiperControl(struct soap*, _ns3__RobotWiperControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotWiperControl(struct soap*, const char *, int, _ns3__RobotWiperControl *const*, const char *);
SOAP_FMAC3 _ns3__RobotWiperControl ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotWiperControl(struct soap*, const char*, _ns3__RobotWiperControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotWiperControl(struct soap*, _ns3__RobotWiperControl *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotWiperControl
#define soap_write_PointerTo_ns3__RobotWiperControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotWiperControl(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotWiperControl(soap, data, "ns3:RobotWiperControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotWiperControl ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotWiperControl(struct soap*, _ns3__RobotWiperControl **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotWiperControl
#define soap_read_PointerTo_ns3__RobotWiperControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotWiperControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotLightControlResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotLightControlResponse (197)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotLightControlResponse(struct soap*, _ns3__RobotLightControlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotLightControlResponse(struct soap*, const char *, int, _ns3__RobotLightControlResponse *const*, const char *);
SOAP_FMAC3 _ns3__RobotLightControlResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotLightControlResponse(struct soap*, const char*, _ns3__RobotLightControlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotLightControlResponse(struct soap*, _ns3__RobotLightControlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotLightControlResponse
#define soap_write_PointerTo_ns3__RobotLightControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotLightControlResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotLightControlResponse(soap, data, "ns3:RobotLightControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotLightControlResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotLightControlResponse(struct soap*, _ns3__RobotLightControlResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotLightControlResponse
#define soap_read_PointerTo_ns3__RobotLightControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotLightControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotLightControl
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotLightControl (196)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotLightControl(struct soap*, _ns3__RobotLightControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotLightControl(struct soap*, const char *, int, _ns3__RobotLightControl *const*, const char *);
SOAP_FMAC3 _ns3__RobotLightControl ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotLightControl(struct soap*, const char*, _ns3__RobotLightControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotLightControl(struct soap*, _ns3__RobotLightControl *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotLightControl
#define soap_write_PointerTo_ns3__RobotLightControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotLightControl(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotLightControl(soap, data, "ns3:RobotLightControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotLightControl ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotLightControl(struct soap*, _ns3__RobotLightControl **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotLightControl
#define soap_read_PointerTo_ns3__RobotLightControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotLightControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotCameraControlResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotCameraControlResponse (193)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotCameraControlResponse(struct soap*, _ns3__RobotCameraControlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotCameraControlResponse(struct soap*, const char *, int, _ns3__RobotCameraControlResponse *const*, const char *);
SOAP_FMAC3 _ns3__RobotCameraControlResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotCameraControlResponse(struct soap*, const char*, _ns3__RobotCameraControlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotCameraControlResponse(struct soap*, _ns3__RobotCameraControlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotCameraControlResponse
#define soap_write_PointerTo_ns3__RobotCameraControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotCameraControlResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotCameraControlResponse(soap, data, "ns3:RobotCameraControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotCameraControlResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotCameraControlResponse(struct soap*, _ns3__RobotCameraControlResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotCameraControlResponse
#define soap_read_PointerTo_ns3__RobotCameraControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotCameraControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotCameraControl
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotCameraControl (192)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotCameraControl(struct soap*, _ns3__RobotCameraControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotCameraControl(struct soap*, const char *, int, _ns3__RobotCameraControl *const*, const char *);
SOAP_FMAC3 _ns3__RobotCameraControl ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotCameraControl(struct soap*, const char*, _ns3__RobotCameraControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotCameraControl(struct soap*, _ns3__RobotCameraControl *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotCameraControl
#define soap_write_PointerTo_ns3__RobotCameraControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotCameraControl(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotCameraControl(soap, data, "ns3:RobotCameraControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotCameraControl ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotCameraControl(struct soap*, _ns3__RobotCameraControl **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotCameraControl
#define soap_read_PointerTo_ns3__RobotCameraControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotCameraControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotYuntaiControlResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotYuntaiControlResponse (189)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotYuntaiControlResponse(struct soap*, _ns3__RobotYuntaiControlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotYuntaiControlResponse(struct soap*, const char *, int, _ns3__RobotYuntaiControlResponse *const*, const char *);
SOAP_FMAC3 _ns3__RobotYuntaiControlResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotYuntaiControlResponse(struct soap*, const char*, _ns3__RobotYuntaiControlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotYuntaiControlResponse(struct soap*, _ns3__RobotYuntaiControlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotYuntaiControlResponse
#define soap_write_PointerTo_ns3__RobotYuntaiControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotYuntaiControlResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotYuntaiControlResponse(soap, data, "ns3:RobotYuntaiControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotYuntaiControlResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotYuntaiControlResponse(struct soap*, _ns3__RobotYuntaiControlResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotYuntaiControlResponse
#define soap_read_PointerTo_ns3__RobotYuntaiControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotYuntaiControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotYuntaiControl
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotYuntaiControl (188)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotYuntaiControl(struct soap*, _ns3__RobotYuntaiControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotYuntaiControl(struct soap*, const char *, int, _ns3__RobotYuntaiControl *const*, const char *);
SOAP_FMAC3 _ns3__RobotYuntaiControl ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotYuntaiControl(struct soap*, const char*, _ns3__RobotYuntaiControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotYuntaiControl(struct soap*, _ns3__RobotYuntaiControl *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotYuntaiControl
#define soap_write_PointerTo_ns3__RobotYuntaiControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotYuntaiControl(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotYuntaiControl(soap, data, "ns3:RobotYuntaiControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotYuntaiControl ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotYuntaiControl(struct soap*, _ns3__RobotYuntaiControl **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotYuntaiControl
#define soap_read_PointerTo_ns3__RobotYuntaiControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotYuntaiControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotSpeedControlResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotSpeedControlResponse (185)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotSpeedControlResponse(struct soap*, _ns3__RobotSpeedControlResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotSpeedControlResponse(struct soap*, const char *, int, _ns3__RobotSpeedControlResponse *const*, const char *);
SOAP_FMAC3 _ns3__RobotSpeedControlResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotSpeedControlResponse(struct soap*, const char*, _ns3__RobotSpeedControlResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotSpeedControlResponse(struct soap*, _ns3__RobotSpeedControlResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotSpeedControlResponse
#define soap_write_PointerTo_ns3__RobotSpeedControlResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotSpeedControlResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotSpeedControlResponse(soap, data, "ns3:RobotSpeedControlResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotSpeedControlResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotSpeedControlResponse(struct soap*, _ns3__RobotSpeedControlResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotSpeedControlResponse
#define soap_read_PointerTo_ns3__RobotSpeedControlResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotSpeedControlResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__RobotSpeedControl
#define SOAP_TYPE_RobotData_PointerTo_ns3__RobotSpeedControl (184)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__RobotSpeedControl(struct soap*, _ns3__RobotSpeedControl *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__RobotSpeedControl(struct soap*, const char *, int, _ns3__RobotSpeedControl *const*, const char *);
SOAP_FMAC3 _ns3__RobotSpeedControl ** SOAP_FMAC4 soap_in_PointerTo_ns3__RobotSpeedControl(struct soap*, const char*, _ns3__RobotSpeedControl **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__RobotSpeedControl(struct soap*, _ns3__RobotSpeedControl *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__RobotSpeedControl
#define soap_write_PointerTo_ns3__RobotSpeedControl(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__RobotSpeedControl(soap, data),0) || RobotData::soap_put_PointerTo_ns3__RobotSpeedControl(soap, data, "ns3:RobotSpeedControl", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__RobotSpeedControl ** SOAP_FMAC4 soap_get_PointerTo_ns3__RobotSpeedControl(struct soap*, _ns3__RobotSpeedControl **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__RobotSpeedControl
#define soap_read_PointerTo_ns3__RobotSpeedControl(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__RobotSpeedControl(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetControlModeResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetControlModeResponse (181)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetControlModeResponse(struct soap*, _ns3__GetControlModeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetControlModeResponse(struct soap*, const char *, int, _ns3__GetControlModeResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetControlModeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetControlModeResponse(struct soap*, const char*, _ns3__GetControlModeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetControlModeResponse(struct soap*, _ns3__GetControlModeResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetControlModeResponse
#define soap_write_PointerTo_ns3__GetControlModeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetControlModeResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetControlModeResponse(soap, data, "ns3:GetControlModeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetControlModeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetControlModeResponse(struct soap*, _ns3__GetControlModeResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetControlModeResponse
#define soap_read_PointerTo_ns3__GetControlModeResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetControlModeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetControlMode
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetControlMode (180)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetControlMode(struct soap*, _ns3__GetControlMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetControlMode(struct soap*, const char *, int, _ns3__GetControlMode *const*, const char *);
SOAP_FMAC3 _ns3__GetControlMode ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetControlMode(struct soap*, const char*, _ns3__GetControlMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetControlMode(struct soap*, _ns3__GetControlMode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetControlMode
#define soap_write_PointerTo_ns3__GetControlMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetControlMode(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetControlMode(soap, data, "ns3:GetControlMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetControlMode ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetControlMode(struct soap*, _ns3__GetControlMode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetControlMode
#define soap_read_PointerTo_ns3__GetControlMode(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetControlMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__SetControlModeResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__SetControlModeResponse (177)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__SetControlModeResponse(struct soap*, _ns3__SetControlModeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__SetControlModeResponse(struct soap*, const char *, int, _ns3__SetControlModeResponse *const*, const char *);
SOAP_FMAC3 _ns3__SetControlModeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__SetControlModeResponse(struct soap*, const char*, _ns3__SetControlModeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__SetControlModeResponse(struct soap*, _ns3__SetControlModeResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__SetControlModeResponse
#define soap_write_PointerTo_ns3__SetControlModeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__SetControlModeResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__SetControlModeResponse(soap, data, "ns3:SetControlModeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetControlModeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__SetControlModeResponse(struct soap*, _ns3__SetControlModeResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__SetControlModeResponse
#define soap_read_PointerTo_ns3__SetControlModeResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__SetControlModeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__SetControlMode
#define SOAP_TYPE_RobotData_PointerTo_ns3__SetControlMode (176)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__SetControlMode(struct soap*, _ns3__SetControlMode *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__SetControlMode(struct soap*, const char *, int, _ns3__SetControlMode *const*, const char *);
SOAP_FMAC3 _ns3__SetControlMode ** SOAP_FMAC4 soap_in_PointerTo_ns3__SetControlMode(struct soap*, const char*, _ns3__SetControlMode **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__SetControlMode(struct soap*, _ns3__SetControlMode *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__SetControlMode
#define soap_write_PointerTo_ns3__SetControlMode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__SetControlMode(soap, data),0) || RobotData::soap_put_PointerTo_ns3__SetControlMode(soap, data, "ns3:SetControlMode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetControlMode ** SOAP_FMAC4 soap_get_PointerTo_ns3__SetControlMode(struct soap*, _ns3__SetControlMode **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__SetControlMode
#define soap_read_PointerTo_ns3__SetControlMode(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__SetControlMode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__ReleaseCurrentRobotResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__ReleaseCurrentRobotResponse (173)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__ReleaseCurrentRobotResponse(struct soap*, _ns3__ReleaseCurrentRobotResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__ReleaseCurrentRobotResponse(struct soap*, const char *, int, _ns3__ReleaseCurrentRobotResponse *const*, const char *);
SOAP_FMAC3 _ns3__ReleaseCurrentRobotResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__ReleaseCurrentRobotResponse(struct soap*, const char*, _ns3__ReleaseCurrentRobotResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__ReleaseCurrentRobotResponse(struct soap*, _ns3__ReleaseCurrentRobotResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__ReleaseCurrentRobotResponse
#define soap_write_PointerTo_ns3__ReleaseCurrentRobotResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__ReleaseCurrentRobotResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__ReleaseCurrentRobotResponse(soap, data, "ns3:ReleaseCurrentRobotResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ReleaseCurrentRobotResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__ReleaseCurrentRobotResponse(struct soap*, _ns3__ReleaseCurrentRobotResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__ReleaseCurrentRobotResponse
#define soap_read_PointerTo_ns3__ReleaseCurrentRobotResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__ReleaseCurrentRobotResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__ReleaseCurrentRobot
#define SOAP_TYPE_RobotData_PointerTo_ns3__ReleaseCurrentRobot (172)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__ReleaseCurrentRobot(struct soap*, _ns3__ReleaseCurrentRobot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__ReleaseCurrentRobot(struct soap*, const char *, int, _ns3__ReleaseCurrentRobot *const*, const char *);
SOAP_FMAC3 _ns3__ReleaseCurrentRobot ** SOAP_FMAC4 soap_in_PointerTo_ns3__ReleaseCurrentRobot(struct soap*, const char*, _ns3__ReleaseCurrentRobot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__ReleaseCurrentRobot(struct soap*, _ns3__ReleaseCurrentRobot *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__ReleaseCurrentRobot
#define soap_write_PointerTo_ns3__ReleaseCurrentRobot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__ReleaseCurrentRobot(soap, data),0) || RobotData::soap_put_PointerTo_ns3__ReleaseCurrentRobot(soap, data, "ns3:ReleaseCurrentRobot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__ReleaseCurrentRobot ** SOAP_FMAC4 soap_get_PointerTo_ns3__ReleaseCurrentRobot(struct soap*, _ns3__ReleaseCurrentRobot **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__ReleaseCurrentRobot
#define soap_read_PointerTo_ns3__ReleaseCurrentRobot(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__ReleaseCurrentRobot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__SetCurrentRobotResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__SetCurrentRobotResponse (169)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__SetCurrentRobotResponse(struct soap*, _ns3__SetCurrentRobotResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__SetCurrentRobotResponse(struct soap*, const char *, int, _ns3__SetCurrentRobotResponse *const*, const char *);
SOAP_FMAC3 _ns3__SetCurrentRobotResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__SetCurrentRobotResponse(struct soap*, const char*, _ns3__SetCurrentRobotResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__SetCurrentRobotResponse(struct soap*, _ns3__SetCurrentRobotResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__SetCurrentRobotResponse
#define soap_write_PointerTo_ns3__SetCurrentRobotResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__SetCurrentRobotResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__SetCurrentRobotResponse(soap, data, "ns3:SetCurrentRobotResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetCurrentRobotResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__SetCurrentRobotResponse(struct soap*, _ns3__SetCurrentRobotResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__SetCurrentRobotResponse
#define soap_read_PointerTo_ns3__SetCurrentRobotResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__SetCurrentRobotResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__SetCurrentRobot
#define SOAP_TYPE_RobotData_PointerTo_ns3__SetCurrentRobot (168)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__SetCurrentRobot(struct soap*, _ns3__SetCurrentRobot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__SetCurrentRobot(struct soap*, const char *, int, _ns3__SetCurrentRobot *const*, const char *);
SOAP_FMAC3 _ns3__SetCurrentRobot ** SOAP_FMAC4 soap_in_PointerTo_ns3__SetCurrentRobot(struct soap*, const char*, _ns3__SetCurrentRobot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__SetCurrentRobot(struct soap*, _ns3__SetCurrentRobot *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__SetCurrentRobot
#define soap_write_PointerTo_ns3__SetCurrentRobot(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__SetCurrentRobot(soap, data),0) || RobotData::soap_put_PointerTo_ns3__SetCurrentRobot(soap, data, "ns3:SetCurrentRobot", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetCurrentRobot ** SOAP_FMAC4 soap_get_PointerTo_ns3__SetCurrentRobot(struct soap*, _ns3__SetCurrentRobot **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__SetCurrentRobot
#define soap_read_PointerTo_ns3__SetCurrentRobot(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__SetCurrentRobot(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__SetRobotTimeResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__SetRobotTimeResponse (165)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__SetRobotTimeResponse(struct soap*, _ns3__SetRobotTimeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__SetRobotTimeResponse(struct soap*, const char *, int, _ns3__SetRobotTimeResponse *const*, const char *);
SOAP_FMAC3 _ns3__SetRobotTimeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__SetRobotTimeResponse(struct soap*, const char*, _ns3__SetRobotTimeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__SetRobotTimeResponse(struct soap*, _ns3__SetRobotTimeResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__SetRobotTimeResponse
#define soap_write_PointerTo_ns3__SetRobotTimeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__SetRobotTimeResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__SetRobotTimeResponse(soap, data, "ns3:SetRobotTimeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetRobotTimeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__SetRobotTimeResponse(struct soap*, _ns3__SetRobotTimeResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__SetRobotTimeResponse
#define soap_read_PointerTo_ns3__SetRobotTimeResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__SetRobotTimeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__SetRobotTime
#define SOAP_TYPE_RobotData_PointerTo_ns3__SetRobotTime (164)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__SetRobotTime(struct soap*, _ns3__SetRobotTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__SetRobotTime(struct soap*, const char *, int, _ns3__SetRobotTime *const*, const char *);
SOAP_FMAC3 _ns3__SetRobotTime ** SOAP_FMAC4 soap_in_PointerTo_ns3__SetRobotTime(struct soap*, const char*, _ns3__SetRobotTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__SetRobotTime(struct soap*, _ns3__SetRobotTime *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__SetRobotTime
#define soap_write_PointerTo_ns3__SetRobotTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__SetRobotTime(soap, data),0) || RobotData::soap_put_PointerTo_ns3__SetRobotTime(soap, data, "ns3:SetRobotTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__SetRobotTime ** SOAP_FMAC4 soap_get_PointerTo_ns3__SetRobotTime(struct soap*, _ns3__SetRobotTime **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__SetRobotTime
#define soap_read_PointerTo_ns3__SetRobotTime(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__SetRobotTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotTimeResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotTimeResponse (161)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotTimeResponse(struct soap*, _ns3__GetRobotTimeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotTimeResponse(struct soap*, const char *, int, _ns3__GetRobotTimeResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotTimeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotTimeResponse(struct soap*, const char*, _ns3__GetRobotTimeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotTimeResponse(struct soap*, _ns3__GetRobotTimeResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotTimeResponse
#define soap_write_PointerTo_ns3__GetRobotTimeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotTimeResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotTimeResponse(soap, data, "ns3:GetRobotTimeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotTimeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotTimeResponse(struct soap*, _ns3__GetRobotTimeResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotTimeResponse
#define soap_read_PointerTo_ns3__GetRobotTimeResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotTimeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotTime
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotTime (160)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotTime(struct soap*, _ns3__GetRobotTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotTime(struct soap*, const char *, int, _ns3__GetRobotTime *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotTime ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotTime(struct soap*, const char*, _ns3__GetRobotTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotTime(struct soap*, _ns3__GetRobotTime *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotTime
#define soap_write_PointerTo_ns3__GetRobotTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotTime(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotTime(soap, data, "ns3:GetRobotTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotTime ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotTime(struct soap*, _ns3__GetRobotTime **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotTime
#define soap_read_PointerTo_ns3__GetRobotTime(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotInfoResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotInfoResponse (157)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotInfoResponse(struct soap*, _ns3__GetRobotInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotInfoResponse(struct soap*, const char *, int, _ns3__GetRobotInfoResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotInfoResponse(struct soap*, const char*, _ns3__GetRobotInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotInfoResponse(struct soap*, _ns3__GetRobotInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotInfoResponse
#define soap_write_PointerTo_ns3__GetRobotInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotInfoResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotInfoResponse(soap, data, "ns3:GetRobotInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotInfoResponse(struct soap*, _ns3__GetRobotInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotInfoResponse
#define soap_read_PointerTo_ns3__GetRobotInfoResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotInfo
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotInfo (156)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotInfo(struct soap*, _ns3__GetRobotInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotInfo(struct soap*, const char *, int, _ns3__GetRobotInfo *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotInfo ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotInfo(struct soap*, const char*, _ns3__GetRobotInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotInfo(struct soap*, _ns3__GetRobotInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotInfo
#define soap_write_PointerTo_ns3__GetRobotInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotInfo(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotInfo(soap, data, "ns3:GetRobotInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotInfo ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotInfo(struct soap*, _ns3__GetRobotInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotInfo
#define soap_read_PointerTo_ns3__GetRobotInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotConnectResponse
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotConnectResponse (153)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotConnectResponse(struct soap*, _ns3__GetRobotConnectResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotConnectResponse(struct soap*, const char *, int, _ns3__GetRobotConnectResponse *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotConnectResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotConnectResponse(struct soap*, const char*, _ns3__GetRobotConnectResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotConnectResponse(struct soap*, _ns3__GetRobotConnectResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotConnectResponse
#define soap_write_PointerTo_ns3__GetRobotConnectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotConnectResponse(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotConnectResponse(soap, data, "ns3:GetRobotConnectResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotConnectResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotConnectResponse(struct soap*, _ns3__GetRobotConnectResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotConnectResponse
#define soap_read_PointerTo_ns3__GetRobotConnectResponse(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotConnectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotConnect
#define SOAP_TYPE_RobotData_PointerTo_ns3__GetRobotConnect (152)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetRobotConnect(struct soap*, _ns3__GetRobotConnect *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetRobotConnect(struct soap*, const char *, int, _ns3__GetRobotConnect *const*, const char *);
SOAP_FMAC3 _ns3__GetRobotConnect ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetRobotConnect(struct soap*, const char*, _ns3__GetRobotConnect **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetRobotConnect(struct soap*, _ns3__GetRobotConnect *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns3__GetRobotConnect
#define soap_write_PointerTo_ns3__GetRobotConnect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTo_ns3__GetRobotConnect(soap, data),0) || RobotData::soap_put_PointerTo_ns3__GetRobotConnect(soap, data, "ns3:GetRobotConnect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns3__GetRobotConnect ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetRobotConnect(struct soap*, _ns3__GetRobotConnect **, const char*, const char*);

#ifndef soap_read_PointerTo_ns3__GetRobotConnect
#define soap_read_PointerTo_ns3__GetRobotConnect(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTo_ns3__GetRobotConnect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotAlarmInfos
#define SOAP_TYPE_RobotData_PointerTons3__RobotAlarmInfos (151)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotAlarmInfos(struct soap*, ns3__RobotAlarmInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotAlarmInfos(struct soap*, const char *, int, ns3__RobotAlarmInfos *const*, const char *);
SOAP_FMAC3 ns3__RobotAlarmInfos ** SOAP_FMAC4 soap_in_PointerTons3__RobotAlarmInfos(struct soap*, const char*, ns3__RobotAlarmInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotAlarmInfos(struct soap*, ns3__RobotAlarmInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotAlarmInfos
#define soap_write_PointerTons3__RobotAlarmInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotAlarmInfos(soap, data),0) || RobotData::soap_put_PointerTons3__RobotAlarmInfos(soap, data, "ns3:RobotAlarmInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotAlarmInfos ** SOAP_FMAC4 soap_get_PointerTons3__RobotAlarmInfos(struct soap*, ns3__RobotAlarmInfos **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotAlarmInfos
#define soap_read_PointerTons3__RobotAlarmInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotAlarmInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotGasInfos
#define SOAP_TYPE_RobotData_PointerTons3__RobotGasInfos (150)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotGasInfos(struct soap*, ns3__RobotGasInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotGasInfos(struct soap*, const char *, int, ns3__RobotGasInfos *const*, const char *);
SOAP_FMAC3 ns3__RobotGasInfos ** SOAP_FMAC4 soap_in_PointerTons3__RobotGasInfos(struct soap*, const char*, ns3__RobotGasInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotGasInfos(struct soap*, ns3__RobotGasInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotGasInfos
#define soap_write_PointerTons3__RobotGasInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotGasInfos(soap, data),0) || RobotData::soap_put_PointerTons3__RobotGasInfos(soap, data, "ns3:RobotGasInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotGasInfos ** SOAP_FMAC4 soap_get_PointerTons3__RobotGasInfos(struct soap*, ns3__RobotGasInfos **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotGasInfos
#define soap_read_PointerTons3__RobotGasInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotGasInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotMileageInfos
#define SOAP_TYPE_RobotData_PointerTons3__RobotMileageInfos (149)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotMileageInfos(struct soap*, ns3__RobotMileageInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotMileageInfos(struct soap*, const char *, int, ns3__RobotMileageInfos *const*, const char *);
SOAP_FMAC3 ns3__RobotMileageInfos ** SOAP_FMAC4 soap_in_PointerTons3__RobotMileageInfos(struct soap*, const char*, ns3__RobotMileageInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotMileageInfos(struct soap*, ns3__RobotMileageInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotMileageInfos
#define soap_write_PointerTons3__RobotMileageInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotMileageInfos(soap, data),0) || RobotData::soap_put_PointerTons3__RobotMileageInfos(soap, data, "ns3:RobotMileageInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotMileageInfos ** SOAP_FMAC4 soap_get_PointerTons3__RobotMileageInfos(struct soap*, ns3__RobotMileageInfos **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotMileageInfos
#define soap_read_PointerTons3__RobotMileageInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotMileageInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotYunTaiInfos
#define SOAP_TYPE_RobotData_PointerTons3__RobotYunTaiInfos (148)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotYunTaiInfos(struct soap*, ns3__RobotYunTaiInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotYunTaiInfos(struct soap*, const char *, int, ns3__RobotYunTaiInfos *const*, const char *);
SOAP_FMAC3 ns3__RobotYunTaiInfos ** SOAP_FMAC4 soap_in_PointerTons3__RobotYunTaiInfos(struct soap*, const char*, ns3__RobotYunTaiInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotYunTaiInfos(struct soap*, ns3__RobotYunTaiInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotYunTaiInfos
#define soap_write_PointerTons3__RobotYunTaiInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotYunTaiInfos(soap, data),0) || RobotData::soap_put_PointerTons3__RobotYunTaiInfos(soap, data, "ns3:RobotYunTaiInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotYunTaiInfos ** SOAP_FMAC4 soap_get_PointerTons3__RobotYunTaiInfos(struct soap*, ns3__RobotYunTaiInfos **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotYunTaiInfos
#define soap_read_PointerTons3__RobotYunTaiInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotYunTaiInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotPosInfos
#define SOAP_TYPE_RobotData_PointerTons3__RobotPosInfos (147)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotPosInfos(struct soap*, ns3__RobotPosInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotPosInfos(struct soap*, const char *, int, ns3__RobotPosInfos *const*, const char *);
SOAP_FMAC3 ns3__RobotPosInfos ** SOAP_FMAC4 soap_in_PointerTons3__RobotPosInfos(struct soap*, const char*, ns3__RobotPosInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotPosInfos(struct soap*, ns3__RobotPosInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotPosInfos
#define soap_write_PointerTons3__RobotPosInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotPosInfos(soap, data),0) || RobotData::soap_put_PointerTons3__RobotPosInfos(soap, data, "ns3:RobotPosInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotPosInfos ** SOAP_FMAC4 soap_get_PointerTons3__RobotPosInfos(struct soap*, ns3__RobotPosInfos **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotPosInfos
#define soap_read_PointerTons3__RobotPosInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotPosInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotTaskStates
#define SOAP_TYPE_RobotData_PointerTons3__RobotTaskStates (146)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotTaskStates(struct soap*, ns3__RobotTaskStates *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotTaskStates(struct soap*, const char *, int, ns3__RobotTaskStates *const*, const char *);
SOAP_FMAC3 ns3__RobotTaskStates ** SOAP_FMAC4 soap_in_PointerTons3__RobotTaskStates(struct soap*, const char*, ns3__RobotTaskStates **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotTaskStates(struct soap*, ns3__RobotTaskStates *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotTaskStates
#define soap_write_PointerTons3__RobotTaskStates(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotTaskStates(soap, data),0) || RobotData::soap_put_PointerTons3__RobotTaskStates(soap, data, "ns3:RobotTaskStates", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotTaskStates ** SOAP_FMAC4 soap_get_PointerTons3__RobotTaskStates(struct soap*, ns3__RobotTaskStates **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotTaskStates
#define soap_read_PointerTons3__RobotTaskStates(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotTaskStates(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__SpeedInfos
#define SOAP_TYPE_RobotData_PointerTons3__SpeedInfos (145)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SpeedInfos(struct soap*, ns3__SpeedInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SpeedInfos(struct soap*, const char *, int, ns3__SpeedInfos *const*, const char *);
SOAP_FMAC3 ns3__SpeedInfos ** SOAP_FMAC4 soap_in_PointerTons3__SpeedInfos(struct soap*, const char*, ns3__SpeedInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SpeedInfos(struct soap*, ns3__SpeedInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__SpeedInfos
#define soap_write_PointerTons3__SpeedInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__SpeedInfos(soap, data),0) || RobotData::soap_put_PointerTons3__SpeedInfos(soap, data, "ns3:SpeedInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SpeedInfos ** SOAP_FMAC4 soap_get_PointerTons3__SpeedInfos(struct soap*, ns3__SpeedInfos **, const char*, const char*);

#ifndef soap_read_PointerTons3__SpeedInfos
#define soap_read_PointerTons3__SpeedInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__SpeedInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__BatteryInfos
#define SOAP_TYPE_RobotData_PointerTons3__BatteryInfos (144)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BatteryInfos(struct soap*, ns3__BatteryInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BatteryInfos(struct soap*, const char *, int, ns3__BatteryInfos *const*, const char *);
SOAP_FMAC3 ns3__BatteryInfos ** SOAP_FMAC4 soap_in_PointerTons3__BatteryInfos(struct soap*, const char*, ns3__BatteryInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BatteryInfos(struct soap*, ns3__BatteryInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__BatteryInfos
#define soap_write_PointerTons3__BatteryInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__BatteryInfos(soap, data),0) || RobotData::soap_put_PointerTons3__BatteryInfos(soap, data, "ns3:BatteryInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__BatteryInfos ** SOAP_FMAC4 soap_get_PointerTons3__BatteryInfos(struct soap*, ns3__BatteryInfos **, const char*, const char*);

#ifndef soap_read_PointerTons3__BatteryInfos
#define soap_read_PointerTons3__BatteryInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__BatteryInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotInfos
#define SOAP_TYPE_RobotData_PointerTons3__RobotInfos (143)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotInfos(struct soap*, ns3__RobotInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotInfos(struct soap*, const char *, int, ns3__RobotInfos *const*, const char *);
SOAP_FMAC3 ns3__RobotInfos ** SOAP_FMAC4 soap_in_PointerTons3__RobotInfos(struct soap*, const char*, ns3__RobotInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotInfos(struct soap*, ns3__RobotInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotInfos
#define soap_write_PointerTons3__RobotInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotInfos(soap, data),0) || RobotData::soap_put_PointerTons3__RobotInfos(soap, data, "ns3:RobotInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotInfos ** SOAP_FMAC4 soap_get_PointerTons3__RobotInfos(struct soap*, ns3__RobotInfos **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotInfos
#define soap_read_PointerTons3__RobotInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__ConnectInfos
#define SOAP_TYPE_RobotData_PointerTons3__ConnectInfos (142)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ConnectInfos(struct soap*, ns3__ConnectInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ConnectInfos(struct soap*, const char *, int, ns3__ConnectInfos *const*, const char *);
SOAP_FMAC3 ns3__ConnectInfos ** SOAP_FMAC4 soap_in_PointerTons3__ConnectInfos(struct soap*, const char*, ns3__ConnectInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ConnectInfos(struct soap*, ns3__ConnectInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__ConnectInfos
#define soap_write_PointerTons3__ConnectInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__ConnectInfos(soap, data),0) || RobotData::soap_put_PointerTons3__ConnectInfos(soap, data, "ns3:ConnectInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ConnectInfos ** SOAP_FMAC4 soap_get_PointerTons3__ConnectInfos(struct soap*, ns3__ConnectInfos **, const char*, const char*);

#ifndef soap_read_PointerTons3__ConnectInfos
#define soap_read_PointerTons3__ConnectInfos(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__ConnectInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__TaskExcuteInfo
#define SOAP_TYPE_RobotData_PointerTons3__TaskExcuteInfo (140)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TaskExcuteInfo(struct soap*, ns3__TaskExcuteInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TaskExcuteInfo(struct soap*, const char *, int, ns3__TaskExcuteInfo *const*, const char *);
SOAP_FMAC3 ns3__TaskExcuteInfo ** SOAP_FMAC4 soap_in_PointerTons3__TaskExcuteInfo(struct soap*, const char*, ns3__TaskExcuteInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TaskExcuteInfo(struct soap*, ns3__TaskExcuteInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__TaskExcuteInfo
#define soap_write_PointerTons3__TaskExcuteInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__TaskExcuteInfo(soap, data),0) || RobotData::soap_put_PointerTons3__TaskExcuteInfo(soap, data, "ns3:TaskExcuteInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskExcuteInfo ** SOAP_FMAC4 soap_get_PointerTons3__TaskExcuteInfo(struct soap*, ns3__TaskExcuteInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__TaskExcuteInfo
#define soap_read_PointerTons3__TaskExcuteInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__TaskExcuteInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__TaskFinishInfo
#define SOAP_TYPE_RobotData_PointerTons3__TaskFinishInfo (138)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TaskFinishInfo(struct soap*, ns3__TaskFinishInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TaskFinishInfo(struct soap*, const char *, int, ns3__TaskFinishInfo *const*, const char *);
SOAP_FMAC3 ns3__TaskFinishInfo ** SOAP_FMAC4 soap_in_PointerTons3__TaskFinishInfo(struct soap*, const char*, ns3__TaskFinishInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TaskFinishInfo(struct soap*, ns3__TaskFinishInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__TaskFinishInfo
#define soap_write_PointerTons3__TaskFinishInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__TaskFinishInfo(soap, data),0) || RobotData::soap_put_PointerTons3__TaskFinishInfo(soap, data, "ns3:TaskFinishInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskFinishInfo ** SOAP_FMAC4 soap_get_PointerTons3__TaskFinishInfo(struct soap*, ns3__TaskFinishInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__TaskFinishInfo
#define soap_read_PointerTons3__TaskFinishInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__TaskFinishInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__TaskPathInfo
#define SOAP_TYPE_RobotData_PointerTons3__TaskPathInfo (136)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TaskPathInfo(struct soap*, ns3__TaskPathInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TaskPathInfo(struct soap*, const char *, int, ns3__TaskPathInfo *const*, const char *);
SOAP_FMAC3 ns3__TaskPathInfo ** SOAP_FMAC4 soap_in_PointerTons3__TaskPathInfo(struct soap*, const char*, ns3__TaskPathInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TaskPathInfo(struct soap*, ns3__TaskPathInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__TaskPathInfo
#define soap_write_PointerTons3__TaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__TaskPathInfo(soap, data),0) || RobotData::soap_put_PointerTons3__TaskPathInfo(soap, data, "ns3:TaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__TaskPathInfo ** SOAP_FMAC4 soap_get_PointerTons3__TaskPathInfo(struct soap*, ns3__TaskPathInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__TaskPathInfo
#define soap_read_PointerTons3__TaskPathInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__TaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__PatrolPointInfo
#define SOAP_TYPE_RobotData_PointerTons3__PatrolPointInfo (134)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PatrolPointInfo(struct soap*, ns3__PatrolPointInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PatrolPointInfo(struct soap*, const char *, int, ns3__PatrolPointInfo *const*, const char *);
SOAP_FMAC3 ns3__PatrolPointInfo ** SOAP_FMAC4 soap_in_PointerTons3__PatrolPointInfo(struct soap*, const char*, ns3__PatrolPointInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PatrolPointInfo(struct soap*, ns3__PatrolPointInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__PatrolPointInfo
#define soap_write_PointerTons3__PatrolPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__PatrolPointInfo(soap, data),0) || RobotData::soap_put_PointerTons3__PatrolPointInfo(soap, data, "ns3:PatrolPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__PatrolPointInfo ** SOAP_FMAC4 soap_get_PointerTons3__PatrolPointInfo(struct soap*, ns3__PatrolPointInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__PatrolPointInfo
#define soap_read_PointerTons3__PatrolPointInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__PatrolPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__DockPointInfo
#define SOAP_TYPE_RobotData_PointerTons3__DockPointInfo (132)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DockPointInfo(struct soap*, ns3__DockPointInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DockPointInfo(struct soap*, const char *, int, ns3__DockPointInfo *const*, const char *);
SOAP_FMAC3 ns3__DockPointInfo ** SOAP_FMAC4 soap_in_PointerTons3__DockPointInfo(struct soap*, const char*, ns3__DockPointInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DockPointInfo(struct soap*, ns3__DockPointInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__DockPointInfo
#define soap_write_PointerTons3__DockPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__DockPointInfo(soap, data),0) || RobotData::soap_put_PointerTons3__DockPointInfo(soap, data, "ns3:DockPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__DockPointInfo ** SOAP_FMAC4 soap_get_PointerTons3__DockPointInfo(struct soap*, ns3__DockPointInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__DockPointInfo
#define soap_read_PointerTons3__DockPointInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__DockPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__MapEdgeInfo
#define SOAP_TYPE_RobotData_PointerTons3__MapEdgeInfo (129)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MapEdgeInfo(struct soap*, ns3__MapEdgeInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MapEdgeInfo(struct soap*, const char *, int, ns3__MapEdgeInfo *const*, const char *);
SOAP_FMAC3 ns3__MapEdgeInfo ** SOAP_FMAC4 soap_in_PointerTons3__MapEdgeInfo(struct soap*, const char*, ns3__MapEdgeInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MapEdgeInfo(struct soap*, ns3__MapEdgeInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__MapEdgeInfo
#define soap_write_PointerTons3__MapEdgeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__MapEdgeInfo(soap, data),0) || RobotData::soap_put_PointerTons3__MapEdgeInfo(soap, data, "ns3:MapEdgeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__MapEdgeInfo ** SOAP_FMAC4 soap_get_PointerTons3__MapEdgeInfo(struct soap*, ns3__MapEdgeInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__MapEdgeInfo
#define soap_read_PointerTons3__MapEdgeInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__MapEdgeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__PatrolAreaInfo
#define SOAP_TYPE_RobotData_PointerTons3__PatrolAreaInfo (127)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PatrolAreaInfo(struct soap*, ns3__PatrolAreaInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PatrolAreaInfo(struct soap*, const char *, int, ns3__PatrolAreaInfo *const*, const char *);
SOAP_FMAC3 ns3__PatrolAreaInfo ** SOAP_FMAC4 soap_in_PointerTons3__PatrolAreaInfo(struct soap*, const char*, ns3__PatrolAreaInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PatrolAreaInfo(struct soap*, ns3__PatrolAreaInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__PatrolAreaInfo
#define soap_write_PointerTons3__PatrolAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__PatrolAreaInfo(soap, data),0) || RobotData::soap_put_PointerTons3__PatrolAreaInfo(soap, data, "ns3:PatrolAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__PatrolAreaInfo ** SOAP_FMAC4 soap_get_PointerTons3__PatrolAreaInfo(struct soap*, ns3__PatrolAreaInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__PatrolAreaInfo
#define soap_read_PointerTons3__PatrolAreaInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__PatrolAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__MapAreaInfo
#define SOAP_TYPE_RobotData_PointerTons3__MapAreaInfo (125)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MapAreaInfo(struct soap*, ns3__MapAreaInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MapAreaInfo(struct soap*, const char *, int, ns3__MapAreaInfo *const*, const char *);
SOAP_FMAC3 ns3__MapAreaInfo ** SOAP_FMAC4 soap_in_PointerTons3__MapAreaInfo(struct soap*, const char*, ns3__MapAreaInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MapAreaInfo(struct soap*, ns3__MapAreaInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__MapAreaInfo
#define soap_write_PointerTons3__MapAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__MapAreaInfo(soap, data),0) || RobotData::soap_put_PointerTons3__MapAreaInfo(soap, data, "ns3:MapAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__MapAreaInfo ** SOAP_FMAC4 soap_get_PointerTons3__MapAreaInfo(struct soap*, ns3__MapAreaInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__MapAreaInfo
#define soap_read_PointerTons3__MapAreaInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__MapAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotAlarmInfo
#define SOAP_TYPE_RobotData_PointerTons3__RobotAlarmInfo (123)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotAlarmInfo(struct soap*, ns3__RobotAlarmInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotAlarmInfo(struct soap*, const char *, int, ns3__RobotAlarmInfo *const*, const char *);
SOAP_FMAC3 ns3__RobotAlarmInfo ** SOAP_FMAC4 soap_in_PointerTons3__RobotAlarmInfo(struct soap*, const char*, ns3__RobotAlarmInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotAlarmInfo(struct soap*, ns3__RobotAlarmInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotAlarmInfo
#define soap_write_PointerTons3__RobotAlarmInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotAlarmInfo(soap, data),0) || RobotData::soap_put_PointerTons3__RobotAlarmInfo(soap, data, "ns3:RobotAlarmInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotAlarmInfo ** SOAP_FMAC4 soap_get_PointerTons3__RobotAlarmInfo(struct soap*, ns3__RobotAlarmInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotAlarmInfo
#define soap_read_PointerTons3__RobotAlarmInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotAlarmInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotGasInfo
#define SOAP_TYPE_RobotData_PointerTons3__RobotGasInfo (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotGasInfo(struct soap*, ns3__RobotGasInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotGasInfo(struct soap*, const char *, int, ns3__RobotGasInfo *const*, const char *);
SOAP_FMAC3 ns3__RobotGasInfo ** SOAP_FMAC4 soap_in_PointerTons3__RobotGasInfo(struct soap*, const char*, ns3__RobotGasInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotGasInfo(struct soap*, ns3__RobotGasInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotGasInfo
#define soap_write_PointerTons3__RobotGasInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotGasInfo(soap, data),0) || RobotData::soap_put_PointerTons3__RobotGasInfo(soap, data, "ns3:RobotGasInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotGasInfo ** SOAP_FMAC4 soap_get_PointerTons3__RobotGasInfo(struct soap*, ns3__RobotGasInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotGasInfo
#define soap_read_PointerTons3__RobotGasInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotGasInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotMileageInfo
#define SOAP_TYPE_RobotData_PointerTons3__RobotMileageInfo (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotMileageInfo(struct soap*, ns3__RobotMileageInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotMileageInfo(struct soap*, const char *, int, ns3__RobotMileageInfo *const*, const char *);
SOAP_FMAC3 ns3__RobotMileageInfo ** SOAP_FMAC4 soap_in_PointerTons3__RobotMileageInfo(struct soap*, const char*, ns3__RobotMileageInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotMileageInfo(struct soap*, ns3__RobotMileageInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotMileageInfo
#define soap_write_PointerTons3__RobotMileageInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotMileageInfo(soap, data),0) || RobotData::soap_put_PointerTons3__RobotMileageInfo(soap, data, "ns3:RobotMileageInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotMileageInfo ** SOAP_FMAC4 soap_get_PointerTons3__RobotMileageInfo(struct soap*, ns3__RobotMileageInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotMileageInfo
#define soap_read_PointerTons3__RobotMileageInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotMileageInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotYunTaiInfo
#define SOAP_TYPE_RobotData_PointerTons3__RobotYunTaiInfo (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotYunTaiInfo(struct soap*, ns3__RobotYunTaiInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotYunTaiInfo(struct soap*, const char *, int, ns3__RobotYunTaiInfo *const*, const char *);
SOAP_FMAC3 ns3__RobotYunTaiInfo ** SOAP_FMAC4 soap_in_PointerTons3__RobotYunTaiInfo(struct soap*, const char*, ns3__RobotYunTaiInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotYunTaiInfo(struct soap*, ns3__RobotYunTaiInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotYunTaiInfo
#define soap_write_PointerTons3__RobotYunTaiInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotYunTaiInfo(soap, data),0) || RobotData::soap_put_PointerTons3__RobotYunTaiInfo(soap, data, "ns3:RobotYunTaiInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotYunTaiInfo ** SOAP_FMAC4 soap_get_PointerTons3__RobotYunTaiInfo(struct soap*, ns3__RobotYunTaiInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotYunTaiInfo
#define soap_read_PointerTons3__RobotYunTaiInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotYunTaiInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotPosInfo
#define SOAP_TYPE_RobotData_PointerTons3__RobotPosInfo (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotPosInfo(struct soap*, ns3__RobotPosInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotPosInfo(struct soap*, const char *, int, ns3__RobotPosInfo *const*, const char *);
SOAP_FMAC3 ns3__RobotPosInfo ** SOAP_FMAC4 soap_in_PointerTons3__RobotPosInfo(struct soap*, const char*, ns3__RobotPosInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotPosInfo(struct soap*, ns3__RobotPosInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotPosInfo
#define soap_write_PointerTons3__RobotPosInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotPosInfo(soap, data),0) || RobotData::soap_put_PointerTons3__RobotPosInfo(soap, data, "ns3:RobotPosInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotPosInfo ** SOAP_FMAC4 soap_get_PointerTons3__RobotPosInfo(struct soap*, ns3__RobotPosInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotPosInfo
#define soap_read_PointerTons3__RobotPosInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotPosInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotTaskState
#define SOAP_TYPE_RobotData_PointerTons3__RobotTaskState (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotTaskState(struct soap*, ns3__RobotTaskState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotTaskState(struct soap*, const char *, int, ns3__RobotTaskState *const*, const char *);
SOAP_FMAC3 ns3__RobotTaskState ** SOAP_FMAC4 soap_in_PointerTons3__RobotTaskState(struct soap*, const char*, ns3__RobotTaskState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotTaskState(struct soap*, ns3__RobotTaskState *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotTaskState
#define soap_write_PointerTons3__RobotTaskState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotTaskState(soap, data),0) || RobotData::soap_put_PointerTons3__RobotTaskState(soap, data, "ns3:RobotTaskState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotTaskState ** SOAP_FMAC4 soap_get_PointerTons3__RobotTaskState(struct soap*, ns3__RobotTaskState **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotTaskState
#define soap_read_PointerTons3__RobotTaskState(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotTaskState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__SpeedInfo
#define SOAP_TYPE_RobotData_PointerTons3__SpeedInfo (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__SpeedInfo(struct soap*, ns3__SpeedInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__SpeedInfo(struct soap*, const char *, int, ns3__SpeedInfo *const*, const char *);
SOAP_FMAC3 ns3__SpeedInfo ** SOAP_FMAC4 soap_in_PointerTons3__SpeedInfo(struct soap*, const char*, ns3__SpeedInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__SpeedInfo(struct soap*, ns3__SpeedInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__SpeedInfo
#define soap_write_PointerTons3__SpeedInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__SpeedInfo(soap, data),0) || RobotData::soap_put_PointerTons3__SpeedInfo(soap, data, "ns3:SpeedInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__SpeedInfo ** SOAP_FMAC4 soap_get_PointerTons3__SpeedInfo(struct soap*, ns3__SpeedInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__SpeedInfo
#define soap_read_PointerTons3__SpeedInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__SpeedInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__BatteryInfo
#define SOAP_TYPE_RobotData_PointerTons3__BatteryInfo (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__BatteryInfo(struct soap*, ns3__BatteryInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__BatteryInfo(struct soap*, const char *, int, ns3__BatteryInfo *const*, const char *);
SOAP_FMAC3 ns3__BatteryInfo ** SOAP_FMAC4 soap_in_PointerTons3__BatteryInfo(struct soap*, const char*, ns3__BatteryInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__BatteryInfo(struct soap*, ns3__BatteryInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__BatteryInfo
#define soap_write_PointerTons3__BatteryInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__BatteryInfo(soap, data),0) || RobotData::soap_put_PointerTons3__BatteryInfo(soap, data, "ns3:BatteryInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__BatteryInfo ** SOAP_FMAC4 soap_get_PointerTons3__BatteryInfo(struct soap*, ns3__BatteryInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__BatteryInfo
#define soap_read_PointerTons3__BatteryInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__BatteryInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__RobotInfo
#define SOAP_TYPE_RobotData_PointerTons3__RobotInfo (106)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__RobotInfo(struct soap*, ns3__RobotInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__RobotInfo(struct soap*, const char *, int, ns3__RobotInfo *const*, const char *);
SOAP_FMAC3 ns3__RobotInfo ** SOAP_FMAC4 soap_in_PointerTons3__RobotInfo(struct soap*, const char*, ns3__RobotInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__RobotInfo(struct soap*, ns3__RobotInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__RobotInfo
#define soap_write_PointerTons3__RobotInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__RobotInfo(soap, data),0) || RobotData::soap_put_PointerTons3__RobotInfo(soap, data, "ns3:RobotInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__RobotInfo ** SOAP_FMAC4 soap_get_PointerTons3__RobotInfo(struct soap*, ns3__RobotInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__RobotInfo
#define soap_read_PointerTons3__RobotInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__RobotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_PointerTons3__ConnectInfo
#define SOAP_TYPE_RobotData_PointerTons3__ConnectInfo (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ConnectInfo(struct soap*, ns3__ConnectInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ConnectInfo(struct soap*, const char *, int, ns3__ConnectInfo *const*, const char *);
SOAP_FMAC3 ns3__ConnectInfo ** SOAP_FMAC4 soap_in_PointerTons3__ConnectInfo(struct soap*, const char*, ns3__ConnectInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ConnectInfo(struct soap*, ns3__ConnectInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons3__ConnectInfo
#define soap_write_PointerTons3__ConnectInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_PointerTons3__ConnectInfo(soap, data),0) || RobotData::soap_put_PointerTons3__ConnectInfo(soap, data, "ns3:ConnectInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__ConnectInfo ** SOAP_FMAC4 soap_get_PointerTons3__ConnectInfo(struct soap*, ns3__ConnectInfo **, const char*, const char*);

#ifndef soap_read_PointerTons3__ConnectInfo
#define soap_read_PointerTons3__ConnectInfo(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_PointerTons3__ConnectInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData__QName
#define SOAP_TYPE_RobotData__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize__QName(soap, data),0) || RobotData::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_string
#define SOAP_TYPE_RobotData_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (RobotData::soap_serialize_string(soap, data),0) || RobotData::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !RobotData::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__TaskExcuteInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__TaskExcuteInfo (141)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__TaskExcuteInfo(struct soap*, std::vector<ns3__TaskExcuteInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__TaskExcuteInfo(struct soap*, const std::vector<ns3__TaskExcuteInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__TaskExcuteInfo(struct soap*, const char*, int, const std::vector<ns3__TaskExcuteInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__TaskExcuteInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__TaskExcuteInfo(struct soap*, const char*, std::vector<ns3__TaskExcuteInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__TaskExcuteInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__TaskExcuteInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__TaskExcuteInfo * > * soap_new_std__vectorTemplateOfPointerTons3__TaskExcuteInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__TaskExcuteInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__TaskExcuteInfo(struct soap *soap, std::vector<ns3__TaskExcuteInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__TaskExcuteInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__TaskFinishInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__TaskFinishInfo (139)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__TaskFinishInfo(struct soap*, std::vector<ns3__TaskFinishInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__TaskFinishInfo(struct soap*, const std::vector<ns3__TaskFinishInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__TaskFinishInfo(struct soap*, const char*, int, const std::vector<ns3__TaskFinishInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__TaskFinishInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__TaskFinishInfo(struct soap*, const char*, std::vector<ns3__TaskFinishInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__TaskFinishInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__TaskFinishInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__TaskFinishInfo * > * soap_new_std__vectorTemplateOfPointerTons3__TaskFinishInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__TaskFinishInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__TaskFinishInfo(struct soap *soap, std::vector<ns3__TaskFinishInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__TaskFinishInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__TaskPathInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__TaskPathInfo (137)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__TaskPathInfo(struct soap*, std::vector<ns3__TaskPathInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__TaskPathInfo(struct soap*, const std::vector<ns3__TaskPathInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__TaskPathInfo(struct soap*, const char*, int, const std::vector<ns3__TaskPathInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__TaskPathInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__TaskPathInfo(struct soap*, const char*, std::vector<ns3__TaskPathInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__TaskPathInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__TaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__TaskPathInfo * > * soap_new_std__vectorTemplateOfPointerTons3__TaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__TaskPathInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__TaskPathInfo(struct soap *soap, std::vector<ns3__TaskPathInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__TaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__PatrolPointInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__PatrolPointInfo (135)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PatrolPointInfo(struct soap*, std::vector<ns3__PatrolPointInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PatrolPointInfo(struct soap*, const std::vector<ns3__PatrolPointInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PatrolPointInfo(struct soap*, const char*, int, const std::vector<ns3__PatrolPointInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__PatrolPointInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PatrolPointInfo(struct soap*, const char*, std::vector<ns3__PatrolPointInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__PatrolPointInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PatrolPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PatrolPointInfo * > * soap_new_std__vectorTemplateOfPointerTons3__PatrolPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__PatrolPointInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__PatrolPointInfo(struct soap *soap, std::vector<ns3__PatrolPointInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__PatrolPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__DockPointInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__DockPointInfo (133)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__DockPointInfo(struct soap*, std::vector<ns3__DockPointInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__DockPointInfo(struct soap*, const std::vector<ns3__DockPointInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__DockPointInfo(struct soap*, const char*, int, const std::vector<ns3__DockPointInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__DockPointInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__DockPointInfo(struct soap*, const char*, std::vector<ns3__DockPointInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__DockPointInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__DockPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__DockPointInfo * > * soap_new_std__vectorTemplateOfPointerTons3__DockPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__DockPointInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__DockPointInfo(struct soap *soap, std::vector<ns3__DockPointInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__DockPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfstd__string
#define SOAP_TYPE_RobotData_std__vectorTemplateOfstd__string (131)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__MapEdgeInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__MapEdgeInfo (130)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__MapEdgeInfo(struct soap*, std::vector<ns3__MapEdgeInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__MapEdgeInfo(struct soap*, const std::vector<ns3__MapEdgeInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__MapEdgeInfo(struct soap*, const char*, int, const std::vector<ns3__MapEdgeInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__MapEdgeInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__MapEdgeInfo(struct soap*, const char*, std::vector<ns3__MapEdgeInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__MapEdgeInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__MapEdgeInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__MapEdgeInfo * > * soap_new_std__vectorTemplateOfPointerTons3__MapEdgeInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__MapEdgeInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__MapEdgeInfo(struct soap *soap, std::vector<ns3__MapEdgeInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__MapEdgeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__PatrolAreaInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__PatrolAreaInfo (128)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PatrolAreaInfo(struct soap*, std::vector<ns3__PatrolAreaInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PatrolAreaInfo(struct soap*, const std::vector<ns3__PatrolAreaInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PatrolAreaInfo(struct soap*, const char*, int, const std::vector<ns3__PatrolAreaInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__PatrolAreaInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PatrolAreaInfo(struct soap*, const char*, std::vector<ns3__PatrolAreaInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__PatrolAreaInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PatrolAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PatrolAreaInfo * > * soap_new_std__vectorTemplateOfPointerTons3__PatrolAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__PatrolAreaInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__PatrolAreaInfo(struct soap *soap, std::vector<ns3__PatrolAreaInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__PatrolAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__MapAreaInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__MapAreaInfo (126)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__MapAreaInfo(struct soap*, std::vector<ns3__MapAreaInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__MapAreaInfo(struct soap*, const std::vector<ns3__MapAreaInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__MapAreaInfo(struct soap*, const char*, int, const std::vector<ns3__MapAreaInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__MapAreaInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__MapAreaInfo(struct soap*, const char*, std::vector<ns3__MapAreaInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__MapAreaInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__MapAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__MapAreaInfo * > * soap_new_std__vectorTemplateOfPointerTons3__MapAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__MapAreaInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__MapAreaInfo(struct soap *soap, std::vector<ns3__MapAreaInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__MapAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotAlarmInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotAlarmInfo (124)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__RobotAlarmInfo(struct soap*, std::vector<ns3__RobotAlarmInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__RobotAlarmInfo(struct soap*, const std::vector<ns3__RobotAlarmInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__RobotAlarmInfo(struct soap*, const char*, int, const std::vector<ns3__RobotAlarmInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__RobotAlarmInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__RobotAlarmInfo(struct soap*, const char*, std::vector<ns3__RobotAlarmInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__RobotAlarmInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__RobotAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__RobotAlarmInfo * > * soap_new_std__vectorTemplateOfPointerTons3__RobotAlarmInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__RobotAlarmInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__RobotAlarmInfo(struct soap *soap, std::vector<ns3__RobotAlarmInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__RobotAlarmInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotGasInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotGasInfo (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__RobotGasInfo(struct soap*, std::vector<ns3__RobotGasInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__RobotGasInfo(struct soap*, const std::vector<ns3__RobotGasInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__RobotGasInfo(struct soap*, const char*, int, const std::vector<ns3__RobotGasInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__RobotGasInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__RobotGasInfo(struct soap*, const char*, std::vector<ns3__RobotGasInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__RobotGasInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__RobotGasInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__RobotGasInfo * > * soap_new_std__vectorTemplateOfPointerTons3__RobotGasInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__RobotGasInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__RobotGasInfo(struct soap *soap, std::vector<ns3__RobotGasInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__RobotGasInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotMileageInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotMileageInfo (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__RobotMileageInfo(struct soap*, std::vector<ns3__RobotMileageInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__RobotMileageInfo(struct soap*, const std::vector<ns3__RobotMileageInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__RobotMileageInfo(struct soap*, const char*, int, const std::vector<ns3__RobotMileageInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__RobotMileageInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__RobotMileageInfo(struct soap*, const char*, std::vector<ns3__RobotMileageInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__RobotMileageInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__RobotMileageInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__RobotMileageInfo * > * soap_new_std__vectorTemplateOfPointerTons3__RobotMileageInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__RobotMileageInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__RobotMileageInfo(struct soap *soap, std::vector<ns3__RobotMileageInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__RobotMileageInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo (118)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo(struct soap*, std::vector<ns3__RobotYunTaiInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo(struct soap*, const std::vector<ns3__RobotYunTaiInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo(struct soap*, const char*, int, const std::vector<ns3__RobotYunTaiInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__RobotYunTaiInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo(struct soap*, const char*, std::vector<ns3__RobotYunTaiInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__RobotYunTaiInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__RobotYunTaiInfo * > * soap_new_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo(struct soap *soap, std::vector<ns3__RobotYunTaiInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__RobotYunTaiInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotPosInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotPosInfo (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__RobotPosInfo(struct soap*, std::vector<ns3__RobotPosInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__RobotPosInfo(struct soap*, const std::vector<ns3__RobotPosInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__RobotPosInfo(struct soap*, const char*, int, const std::vector<ns3__RobotPosInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__RobotPosInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__RobotPosInfo(struct soap*, const char*, std::vector<ns3__RobotPosInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__RobotPosInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__RobotPosInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__RobotPosInfo * > * soap_new_std__vectorTemplateOfPointerTons3__RobotPosInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__RobotPosInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__RobotPosInfo(struct soap *soap, std::vector<ns3__RobotPosInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__RobotPosInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotTaskState
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotTaskState (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__RobotTaskState(struct soap*, std::vector<ns3__RobotTaskState * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__RobotTaskState(struct soap*, const std::vector<ns3__RobotTaskState * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__RobotTaskState(struct soap*, const char*, int, const std::vector<ns3__RobotTaskState * >*, const char*);
SOAP_FMAC3 std::vector<ns3__RobotTaskState * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__RobotTaskState(struct soap*, const char*, std::vector<ns3__RobotTaskState * >*, const char*);
SOAP_FMAC1 std::vector<ns3__RobotTaskState * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__RobotTaskState(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__RobotTaskState * > * soap_new_std__vectorTemplateOfPointerTons3__RobotTaskState(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__RobotTaskState(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__RobotTaskState(struct soap *soap, std::vector<ns3__RobotTaskState * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__RobotTaskState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__SpeedInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__SpeedInfo (112)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__SpeedInfo(struct soap*, std::vector<ns3__SpeedInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__SpeedInfo(struct soap*, const std::vector<ns3__SpeedInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__SpeedInfo(struct soap*, const char*, int, const std::vector<ns3__SpeedInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__SpeedInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__SpeedInfo(struct soap*, const char*, std::vector<ns3__SpeedInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__SpeedInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__SpeedInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__SpeedInfo * > * soap_new_std__vectorTemplateOfPointerTons3__SpeedInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__SpeedInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__SpeedInfo(struct soap *soap, std::vector<ns3__SpeedInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__SpeedInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__BatteryInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__BatteryInfo (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__BatteryInfo(struct soap*, std::vector<ns3__BatteryInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__BatteryInfo(struct soap*, const std::vector<ns3__BatteryInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__BatteryInfo(struct soap*, const char*, int, const std::vector<ns3__BatteryInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__BatteryInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__BatteryInfo(struct soap*, const char*, std::vector<ns3__BatteryInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__BatteryInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__BatteryInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__BatteryInfo * > * soap_new_std__vectorTemplateOfPointerTons3__BatteryInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__BatteryInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__BatteryInfo(struct soap *soap, std::vector<ns3__BatteryInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__BatteryInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__RobotInfo (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__RobotInfo(struct soap*, std::vector<ns3__RobotInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__RobotInfo(struct soap*, const std::vector<ns3__RobotInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__RobotInfo(struct soap*, const char*, int, const std::vector<ns3__RobotInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__RobotInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__RobotInfo(struct soap*, const char*, std::vector<ns3__RobotInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__RobotInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__RobotInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__RobotInfo * > * soap_new_std__vectorTemplateOfPointerTons3__RobotInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__RobotInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__RobotInfo(struct soap *soap, std::vector<ns3__RobotInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__RobotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__ConnectInfo
#define SOAP_TYPE_RobotData_std__vectorTemplateOfPointerTons3__ConnectInfo (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ConnectInfo(struct soap*, std::vector<ns3__ConnectInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ConnectInfo(struct soap*, const std::vector<ns3__ConnectInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ConnectInfo(struct soap*, const char*, int, const std::vector<ns3__ConnectInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns3__ConnectInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ConnectInfo(struct soap*, const char*, std::vector<ns3__ConnectInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns3__ConnectInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ConnectInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ConnectInfo * > * soap_new_std__vectorTemplateOfPointerTons3__ConnectInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons3__ConnectInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons3__ConnectInfo(struct soap *soap, std::vector<ns3__ConnectInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons3__ConnectInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

} // namespace RobotData


#endif

/* End of RobotDataH.h */
