/* TaskFinishStub.h
   Generated by gSOAP 2.8.16 from .\taskfinish.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef TaskFinishStub_H
#define TaskFinishStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/station.xsd"
#define SOAP_NAMESPACE_OF_ns3	"http://tempuri.org/robotdata.xsd"
#define SOAP_NAMESPACE_OF_ns4	"http://tempuri.org/taskdata.xsd"
#define SOAP_NAMESPACE_OF_ns5	"http://tempuri.org/taskfinish.xsd"
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20816
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace TaskFinish {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_TaskFinish_ns5__YuntaiControlType
#define SOAP_TYPE_TaskFinish_ns5__YuntaiControlType (49)
/* ns5:YuntaiControlType */
enum ns5__YuntaiControlType { ns5__YuntaiControlType__TurnUp = 0, ns5__YuntaiControlType__TurnDown = 1, ns5__YuntaiControlType__TurnLeft = 2, ns5__YuntaiControlType__TurnRight = 3, ns5__YuntaiControlType__TurnStop = 4, ns5__YuntaiControlType__TurnReset = 5 };
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__CameraControlType
#define SOAP_TYPE_TaskFinish_ns5__CameraControlType (50)
/* ns5:CameraControlType */
enum ns5__CameraControlType { ns5__CameraControlType__ZoomUp = 0, ns5__CameraControlType__ZoomUpStop = 1, ns5__CameraControlType__ZoomDown = 2, ns5__CameraControlType__ZoomDownStop = 3, ns5__CameraControlType__FocusNear = 4, ns5__CameraControlType__FocusNearStop = 5, ns5__CameraControlType__FocusFar = 6, ns5__CameraControlType__FocusFarStop = 7, ns5__CameraControlType__CameraReset = 8 };
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__LightControlType
#define SOAP_TYPE_TaskFinish_ns5__LightControlType (51)
/* ns5:LightControlType */
enum ns5__LightControlType { ns5__LightControlType__LightOn = 0, ns5__LightControlType__LightOff = 1 };
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__WiperControlType
#define SOAP_TYPE_TaskFinish_ns5__WiperControlType (52)
/* ns5:WiperControlType */
enum ns5__WiperControlType { ns5__WiperControlType__WiperOn = 0, ns5__WiperControlType__WiperOff = 1 };
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__FilrControlType
#define SOAP_TYPE_TaskFinish_ns5__FilrControlType (53)
/* ns5:FilrControlType */
enum ns5__FilrControlType { ns5__FilrControlType__FocusUp = 0, ns5__FilrControlType__FocusDown = 1, ns5__FilrControlType__AutoFocus = 2 };
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__LifterControlType
#define SOAP_TYPE_TaskFinish_ns5__LifterControlType (54)
/* ns5:LifterControlType */
enum ns5__LifterControlType { ns5__LifterControlType__LifterUp = 0, ns5__LifterControlType__LifterDown = 1, ns5__LifterControlType__LifterStop = 2 };
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__PdControlType
#define SOAP_TYPE_TaskFinish_ns5__PdControlType (55)
/* ns5:PdControlType */
enum ns5__PdControlType { ns5__PdControlType__PdForWard = 0, ns5__PdControlType__PdBackWord = 1, ns5__PdControlType__PdStop = 2 };
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__ControlTaskType
#define SOAP_TYPE_TaskFinish_ns5__ControlTaskType (56)
/* ns5:ControlTaskType */
enum ns5__ControlTaskType { ns5__ControlTaskType__CancelTask = 0, ns5__ControlTaskType__PauseTask = 1, ns5__ControlTaskType__ResumeTask = 2, ns5__ControlTaskType__ChargeTask = 3 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__ConnectInfo
#define SOAP_TYPE_TaskFinish_ns5__ConnectInfo (8)
/* ns5:ConnectInfo */
class SOAP_CMAC ns5__ConnectInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	bool State;	/* required element of type xsd:boolean */
	std::string ConnectDesc;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_TaskFinish_ns5__ConnectInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ConnectInfo() { ns5__ConnectInfo::soap_default(NULL); }
	virtual ~ns5__ConnectInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__ConnectInfos
#define SOAP_TYPE_TaskFinish_ns5__ConnectInfos (9)
/* ns5:ConnectInfos */
class SOAP_CMAC ns5__ConnectInfos
{
public:
	std::vector<ns5__ConnectInfo * >Infos;	/* optional element of type ns5:ConnectInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_TaskFinish_ns5__ConnectInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ConnectInfos() { ns5__ConnectInfos::soap_default(NULL); }
	virtual ~ns5__ConnectInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotInfo (10)
/* ns5:RobotInfo */
class SOAP_CMAC ns5__RobotInfo
{
public:
	std::string RobotName;	/* required element of type xsd:string */
	std::string RobotIp;	/* required element of type xsd:string */
	std::string CameraIp;	/* required element of type xsd:string */
	int CameraPort;	/* required element of type xsd:int */
	std::string FlirIp;	/* required element of type xsd:string */
	int FlirPort;	/* required element of type xsd:int */
	std::string CameraUser;	/* required element of type xsd:string */
	std::string CameraPassword;	/* required element of type xsd:string */
	std::string FlirUser;	/* required element of type xsd:string */
	std::string FlirPassword;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotInfo() { ns5__RobotInfo::soap_default(NULL); }
	virtual ~ns5__RobotInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotInfos (11)
/* ns5:RobotInfos */
class SOAP_CMAC ns5__RobotInfos
{
public:
	std::vector<ns5__RobotInfo * >Infos;	/* optional element of type ns5:RobotInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotInfos() { ns5__RobotInfos::soap_default(NULL); }
	virtual ~ns5__RobotInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__BatteryInfo
#define SOAP_TYPE_TaskFinish_ns5__BatteryInfo (12)
/* ns5:BatteryInfo */
class SOAP_CMAC ns5__BatteryInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	double BatteryValue;	/* required element of type xsd:double */
	double BatteryPercent;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_TaskFinish_ns5__BatteryInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__BatteryInfo() { ns5__BatteryInfo::soap_default(NULL); }
	virtual ~ns5__BatteryInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__BatteryInfos
#define SOAP_TYPE_TaskFinish_ns5__BatteryInfos (13)
/* ns5:BatteryInfos */
class SOAP_CMAC ns5__BatteryInfos
{
public:
	std::vector<ns5__BatteryInfo * >Infos;	/* optional element of type ns5:BatteryInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_TaskFinish_ns5__BatteryInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__BatteryInfos() { ns5__BatteryInfos::soap_default(NULL); }
	virtual ~ns5__BatteryInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__SpeedInfo
#define SOAP_TYPE_TaskFinish_ns5__SpeedInfo (14)
/* ns5:SpeedInfo */
class SOAP_CMAC ns5__SpeedInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	double Speed;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_TaskFinish_ns5__SpeedInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__SpeedInfo() { ns5__SpeedInfo::soap_default(NULL); }
	virtual ~ns5__SpeedInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__SpeedInfos
#define SOAP_TYPE_TaskFinish_ns5__SpeedInfos (15)
/* ns5:SpeedInfos */
class SOAP_CMAC ns5__SpeedInfos
{
public:
	std::vector<ns5__SpeedInfo * >Infos;	/* optional element of type ns5:SpeedInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_TaskFinish_ns5__SpeedInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__SpeedInfos() { ns5__SpeedInfos::soap_default(NULL); }
	virtual ~ns5__SpeedInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotTaskState
#define SOAP_TYPE_TaskFinish_ns5__RobotTaskState (16)
/* ns5:RobotTaskState */
class SOAP_CMAC ns5__RobotTaskState
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string TaskId;	/* required element of type xsd:string */
	std::string TaskType;	/* required element of type xsd:string */
	std::string TaskDesc;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotTaskState */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotTaskState() { ns5__RobotTaskState::soap_default(NULL); }
	virtual ~ns5__RobotTaskState() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotTaskStates
#define SOAP_TYPE_TaskFinish_ns5__RobotTaskStates (17)
/* ns5:RobotTaskStates */
class SOAP_CMAC ns5__RobotTaskStates
{
public:
	std::vector<ns5__RobotTaskState * >States;	/* optional element of type ns5:RobotTaskState */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotTaskStates */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotTaskStates() { ns5__RobotTaskStates::soap_default(NULL); }
	virtual ~ns5__RobotTaskStates() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotPosInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotPosInfo (18)
/* ns5:RobotPosInfo */
class SOAP_CMAC ns5__RobotPosInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string PosX;	/* required element of type xsd:string */
	std::string PosY;	/* required element of type xsd:string */
	std::string Angle;	/* required element of type xsd:string */
	std::string EdgeID;	/* required element of type xsd:string */
	std::string Precent;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotPosInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotPosInfo() { ns5__RobotPosInfo::soap_default(NULL); }
	virtual ~ns5__RobotPosInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotPosInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotPosInfos (19)
/* ns5:RobotPosInfos */
class SOAP_CMAC ns5__RobotPosInfos
{
public:
	std::vector<ns5__RobotPosInfo * >Infos;	/* optional element of type ns5:RobotPosInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotPosInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotPosInfos() { ns5__RobotPosInfos::soap_default(NULL); }
	virtual ~ns5__RobotPosInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfo (20)
/* ns5:RobotYunTaiInfo */
class SOAP_CMAC ns5__RobotYunTaiInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string PosPan;	/* required element of type xsd:string */
	std::string PosTile;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotYunTaiInfo() { ns5__RobotYunTaiInfo::soap_default(NULL); }
	virtual ~ns5__RobotYunTaiInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfos (21)
/* ns5:RobotYunTaiInfos */
class SOAP_CMAC ns5__RobotYunTaiInfos
{
public:
	std::vector<ns5__RobotYunTaiInfo * >Infos;	/* optional element of type ns5:RobotYunTaiInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotYunTaiInfos() { ns5__RobotYunTaiInfos::soap_default(NULL); }
	virtual ~ns5__RobotYunTaiInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotMileageInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotMileageInfo (22)
/* ns5:RobotMileageInfo */
class SOAP_CMAC ns5__RobotMileageInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	double Mileage;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotMileageInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotMileageInfo() { ns5__RobotMileageInfo::soap_default(NULL); }
	virtual ~ns5__RobotMileageInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotMileageInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotMileageInfos (23)
/* ns5:RobotMileageInfos */
class SOAP_CMAC ns5__RobotMileageInfos
{
public:
	std::vector<ns5__RobotMileageInfo * >Infos;	/* optional element of type ns5:RobotMileageInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotMileageInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotMileageInfos() { ns5__RobotMileageInfos::soap_default(NULL); }
	virtual ~ns5__RobotMileageInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotGasInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotGasInfo (24)
/* ns5:RobotGasInfo */
class SOAP_CMAC ns5__RobotGasInfo
{
public:
	std::string robot_ip;	/* required element of type xsd:string */
	std::string H2S;	/* required element of type xsd:string */
	std::string CO;	/* required element of type xsd:string */
	std::string O2;	/* required element of type xsd:string */
	std::string CH4;	/* required element of type xsd:string */
	std::string TEMP;	/* required element of type xsd:string */
	std::string HUM;	/* required element of type xsd:string */
	std::string PM25;	/* required element of type xsd:string */
	std::string PM10;	/* required element of type xsd:string */
	std::string O3;	/* required element of type xsd:string */
	std::string SF6;	/* required element of type xsd:string */
	std::string Desc;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotGasInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotGasInfo() { ns5__RobotGasInfo::soap_default(NULL); }
	virtual ~ns5__RobotGasInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotGasInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotGasInfos (25)
/* ns5:RobotGasInfos */
class SOAP_CMAC ns5__RobotGasInfos
{
public:
	std::vector<ns5__RobotGasInfo * >GasContents;	/* optional element of type ns5:RobotGasInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotGasInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotGasInfos() { ns5__RobotGasInfos::soap_default(NULL); }
	virtual ~ns5__RobotGasInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfo (26)
/* ns5:RobotAlarmInfo */
class SOAP_CMAC ns5__RobotAlarmInfo
{
public:
	std::string AlarmId;	/* required element of type xsd:string */
	std::string RobotIp;	/* required element of type xsd:string */
	std::string AlarmType;	/* required element of type xsd:string */
	std::string AlarmDesc;	/* required element of type xsd:string */
	std::string AlarmTime;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotAlarmInfo() { ns5__RobotAlarmInfo::soap_default(NULL); }
	virtual ~ns5__RobotAlarmInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfos (27)
/* ns5:RobotAlarmInfos */
class SOAP_CMAC ns5__RobotAlarmInfos
{
public:
	std::vector<ns5__RobotAlarmInfo * >Infos;	/* optional element of type ns5:RobotAlarmInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__RobotAlarmInfos() { ns5__RobotAlarmInfos::soap_default(NULL); }
	virtual ~ns5__RobotAlarmInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__MapAreaInfo
#define SOAP_TYPE_TaskFinish_ns5__MapAreaInfo (28)
/* ns5:MapAreaInfo */
class SOAP_CMAC ns5__MapAreaInfo
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string AreaId;	/* required element of type xsd:string */
	std::string AreaName;	/* required element of type xsd:string */
	std::string AreaMap;	/* required element of type xsd:string */
	std::string MaxX;	/* required element of type xsd:string */
	std::string MaxY;	/* required element of type xsd:string */
	std::string MinX;	/* required element of type xsd:string */
	std::string MinY;	/* required element of type xsd:string */
	std::string ParentId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_TaskFinish_ns5__MapAreaInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__MapAreaInfo() { ns5__MapAreaInfo::soap_default(NULL); }
	virtual ~ns5__MapAreaInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__MapAreaInfos
#define SOAP_TYPE_TaskFinish_ns5__MapAreaInfos (29)
/* ns5:MapAreaInfos */
class SOAP_CMAC ns5__MapAreaInfos
{
public:
	std::vector<ns5__MapAreaInfo * >Infos;	/* optional element of type ns5:MapAreaInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_TaskFinish_ns5__MapAreaInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__MapAreaInfos() { ns5__MapAreaInfos::soap_default(NULL); }
	virtual ~ns5__MapAreaInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfo
#define SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfo (30)
/* ns5:PatrolAreaInfo */
class SOAP_CMAC ns5__PatrolAreaInfo
{
public:
	std::string AreaId;	/* required element of type xsd:string */
	std::string AreaName;	/* required element of type xsd:string */
	std::string ParentId;	/* required element of type xsd:string */
	std::string RobotIp;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__PatrolAreaInfo() { ns5__PatrolAreaInfo::soap_default(NULL); }
	virtual ~ns5__PatrolAreaInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfos
#define SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfos (31)
/* ns5:PatrolAreaInfos */
class SOAP_CMAC ns5__PatrolAreaInfos
{
public:
	std::vector<ns5__PatrolAreaInfo * >Infos;	/* optional element of type ns5:PatrolAreaInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__PatrolAreaInfos() { ns5__PatrolAreaInfos::soap_default(NULL); }
	virtual ~ns5__PatrolAreaInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__MapEdgeInfo
#define SOAP_TYPE_TaskFinish_ns5__MapEdgeInfo (32)
/* ns5:MapEdgeInfo */
class SOAP_CMAC ns5__MapEdgeInfo
{
public:
	std::string EdgeId;	/* required element of type xsd:string */
	std::string StartNodeId;	/* required element of type xsd:string */
	std::string EndNodeId;	/* required element of type xsd:string */
	std::string StartNodeX;	/* required element of type xsd:string */
	std::string StartNodeY;	/* required element of type xsd:string */
	std::string EndNodeX;	/* required element of type xsd:string */
	std::string EndNodeY;	/* required element of type xsd:string */
	std::string FirstControlX;	/* required element of type xsd:string */
	std::string FirstControlY;	/* required element of type xsd:string */
	std::string SecondControlX;	/* required element of type xsd:string */
	std::string SecondControlY;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_TaskFinish_ns5__MapEdgeInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__MapEdgeInfo() { ns5__MapEdgeInfo::soap_default(NULL); }
	virtual ~ns5__MapEdgeInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__MapEdgeInfos
#define SOAP_TYPE_TaskFinish_ns5__MapEdgeInfos (33)
/* ns5:MapEdgeInfos */
class SOAP_CMAC ns5__MapEdgeInfos
{
public:
	std::vector<ns5__MapEdgeInfo * >Infos;	/* optional element of type ns5:MapEdgeInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_TaskFinish_ns5__MapEdgeInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__MapEdgeInfos() { ns5__MapEdgeInfos::soap_default(NULL); }
	virtual ~ns5__MapEdgeInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__DockPointInfo
#define SOAP_TYPE_TaskFinish_ns5__DockPointInfo (34)
/* ns5:DockPointInfo */
class SOAP_CMAC ns5__DockPointInfo
{
public:
	std::string DockId;	/* required element of type xsd:string */
	std::string DockX;	/* required element of type xsd:string */
	std::string DockY;	/* required element of type xsd:string */
	std::vector<std::string >PointList;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_TaskFinish_ns5__DockPointInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__DockPointInfo() { ns5__DockPointInfo::soap_default(NULL); }
	virtual ~ns5__DockPointInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__DockPointInfos
#define SOAP_TYPE_TaskFinish_ns5__DockPointInfos (35)
/* ns5:DockPointInfos */
class SOAP_CMAC ns5__DockPointInfos
{
public:
	std::vector<ns5__DockPointInfo * >Infos;	/* optional element of type ns5:DockPointInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_TaskFinish_ns5__DockPointInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__DockPointInfos() { ns5__DockPointInfos::soap_default(NULL); }
	virtual ~ns5__DockPointInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__PatrolPointInfo
#define SOAP_TYPE_TaskFinish_ns5__PatrolPointInfo (36)
/* ns5:PatrolPointInfo */
class SOAP_CMAC ns5__PatrolPointInfo
{
public:
	std::string PointId;	/* required element of type xsd:string */
	std::string PointName;	/* required element of type xsd:string */
	std::string PointType;	/* required element of type xsd:string */
	std::string DeviceType;	/* required element of type xsd:string */
	std::string AreaId;	/* required element of type xsd:string */
	std::string DockId;	/* required element of type xsd:string */
	std::string RobotIp;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_TaskFinish_ns5__PatrolPointInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__PatrolPointInfo() { ns5__PatrolPointInfo::soap_default(NULL); }
	virtual ~ns5__PatrolPointInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__PatrolPointInfos
#define SOAP_TYPE_TaskFinish_ns5__PatrolPointInfos (37)
/* ns5:PatrolPointInfos */
class SOAP_CMAC ns5__PatrolPointInfos
{
public:
	std::vector<ns5__PatrolPointInfo * >Infos;	/* optional element of type ns5:PatrolPointInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_TaskFinish_ns5__PatrolPointInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__PatrolPointInfos() { ns5__PatrolPointInfos::soap_default(NULL); }
	virtual ~ns5__PatrolPointInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskPathInfo
#define SOAP_TYPE_TaskFinish_ns5__TaskPathInfo (38)
/* ns5:TaskPathInfo */
class SOAP_CMAC ns5__TaskPathInfo
{
public:
	std::string TaskPathId;	/* required element of type xsd:string */
	std::string TaskPathName;	/* required element of type xsd:string */
	std::vector<std::string >PointList;	/* optional element of type xsd:string */
	std::string TaskPathType;	/* required element of type xsd:string */
	std::string CreateTime;	/* required element of type xsd:string */
	int FinishAction;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_TaskFinish_ns5__TaskPathInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TaskPathInfo() { ns5__TaskPathInfo::soap_default(NULL); }
	virtual ~ns5__TaskPathInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskPathInfos
#define SOAP_TYPE_TaskFinish_ns5__TaskPathInfos (39)
/* ns5:TaskPathInfos */
class SOAP_CMAC ns5__TaskPathInfos
{
public:
	std::vector<ns5__TaskPathInfo * >Infos;	/* optional element of type ns5:TaskPathInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_TaskFinish_ns5__TaskPathInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TaskPathInfos() { ns5__TaskPathInfos::soap_default(NULL); }
	virtual ~ns5__TaskPathInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskExcuteData
#define SOAP_TYPE_TaskFinish_ns5__TaskExcuteData (40)
/* ns5:TaskExcuteData */
class SOAP_CMAC ns5__TaskExcuteData
{
public:
	std::string RobotIp;	/* required element of type xsd:string */
	std::string TaskType;	/* required element of type xsd:string */
	std::string TaskId;	/* required element of type xsd:string */
	std::string TaskName;	/* required element of type xsd:string */
	std::string PatrolDeviceName;	/* required element of type xsd:string */
	std::string PatrolDeviceId;	/* required element of type xsd:string */
	int TotalDeviceSize;	/* required element of type xsd:int */
	int ErrorDeviceSize;	/* required element of type xsd:int */
	int FinishDeviceSize;	/* required element of type xsd:int */
	int TaskFinishPercentage;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_TaskFinish_ns5__TaskExcuteData */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TaskExcuteData() { ns5__TaskExcuteData::soap_default(NULL); }
	virtual ~ns5__TaskExcuteData() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskFinishInfo
#define SOAP_TYPE_TaskFinish_ns5__TaskFinishInfo (41)
/* ns5:TaskFinishInfo */
class SOAP_CMAC ns5__TaskFinishInfo
{
public:
	std::string TaskId;	/* required element of type xsd:string */
	std::string TaskName;	/* required element of type xsd:string */
	std::string TaskType;	/* required element of type xsd:string */
	std::string TaskPathId;	/* required element of type xsd:string */
	std::vector<std::string >PointList;	/* optional element of type xsd:string */
	std::string StartTime;	/* required element of type xsd:string */
	std::string EndTime;	/* required element of type xsd:string */
	std::string FinishState;	/* required element of type xsd:string */
	std::string ExcuteRobot;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_TaskFinish_ns5__TaskFinishInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TaskFinishInfo() { ns5__TaskFinishInfo::soap_default(NULL); }
	virtual ~ns5__TaskFinishInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskFinishInfos
#define SOAP_TYPE_TaskFinish_ns5__TaskFinishInfos (42)
/* ns5:TaskFinishInfos */
class SOAP_CMAC ns5__TaskFinishInfos
{
public:
	std::vector<ns5__TaskFinishInfo * >Infos;	/* optional element of type ns5:TaskFinishInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_TaskFinish_ns5__TaskFinishInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TaskFinishInfos() { ns5__TaskFinishInfos::soap_default(NULL); }
	virtual ~ns5__TaskFinishInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfo
#define SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfo (43)
/* ns5:TaskExcuteInfo */
class SOAP_CMAC ns5__TaskExcuteInfo
{
public:
	std::string TaskId;	/* required element of type xsd:string */
	std::string TaskName;	/* required element of type xsd:string */
	std::string TaskType;	/* required element of type xsd:string */
	std::string TaskPathId;	/* required element of type xsd:string */
	std::string TargetId;	/* required element of type xsd:string */
	std::string PointId;	/* required element of type xsd:string */
	std::string PointName;	/* required element of type xsd:string */
	std::string PointType;	/* required element of type xsd:string */
	std::string ExcuteTime;	/* required element of type xsd:string */
	std::string ExcuteValue;	/* required element of type xsd:string */
	std::string ExcuteUnit;	/* required element of type xsd:string */
	std::string ExcuteState;	/* required element of type xsd:string */
	std::string ExcuteDesc;	/* required element of type xsd:string */
	std::string HDPicture;	/* required element of type xsd:string */
	std::string InfraredPicture;	/* required element of type xsd:string */
	std::string OtherFile;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TaskExcuteInfo() { ns5__TaskExcuteInfo::soap_default(NULL); }
	virtual ~ns5__TaskExcuteInfo() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfos
#define SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfos (44)
/* ns5:TaskExcuteInfos */
class SOAP_CMAC ns5__TaskExcuteInfos
{
public:
	std::vector<ns5__TaskExcuteInfo * >Infos;	/* optional element of type ns5:TaskExcuteInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfos */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__TaskExcuteInfos() { ns5__TaskExcuteInfos::soap_default(NULL); }
	virtual ~ns5__TaskExcuteInfos() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTime
#define SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTime (45)
/* ns5:GetTaskFinishInfoByTime */
class SOAP_CMAC _ns5__GetTaskFinishInfoByTime
{
public:
	std::string StartTime;	/* required element of type xsd:string */
	std::string EndTime;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetTaskFinishInfoByTime() { _ns5__GetTaskFinishInfoByTime::soap_default(NULL); }
	virtual ~_ns5__GetTaskFinishInfoByTime() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTimeResponse
#define SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTimeResponse (46)
/* ns5:GetTaskFinishInfoByTimeResponse */
class SOAP_CMAC _ns5__GetTaskFinishInfoByTimeResponse
{
public:
	ns5__TaskFinishInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:TaskFinishInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTimeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetTaskFinishInfoByTimeResponse() { _ns5__GetTaskFinishInfoByTimeResponse::soap_default(NULL); }
	virtual ~_ns5__GetTaskFinishInfoByTimeResponse() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskId
#define SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskId (47)
/* ns5:GetTaskExcuteInfoByTaskId */
class SOAP_CMAC _ns5__GetTaskExcuteInfoByTaskId
{
public:
	std::string TaskId;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskId */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetTaskExcuteInfoByTaskId() { _ns5__GetTaskExcuteInfoByTaskId::soap_default(NULL); }
	virtual ~_ns5__GetTaskExcuteInfoByTaskId() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskIdResponse
#define SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskIdResponse (48)
/* ns5:GetTaskExcuteInfoByTaskIdResponse */
class SOAP_CMAC _ns5__GetTaskExcuteInfoByTaskIdResponse
{
public:
	ns5__TaskExcuteInfos *Data;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns5:TaskExcuteInfos */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskIdResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns5__GetTaskExcuteInfoByTaskIdResponse() { _ns5__GetTaskExcuteInfoByTaskIdResponse::soap_default(NULL); }
	virtual ~_ns5__GetTaskExcuteInfoByTaskIdResponse() { }
};
#endif

#ifndef SOAP_TYPE_TaskFinish___ns1__GetTaskFinishInfoByTime
#define SOAP_TYPE_TaskFinish___ns1__GetTaskFinishInfoByTime (103)
/* Operation wrapper: */
struct __ns1__GetTaskFinishInfoByTime
{
public:
	_ns5__GetTaskFinishInfoByTime *ns5__GetTaskFinishInfoByTime;	/* optional element of type ns5:GetTaskFinishInfoByTime */
public:
	int soap_type() const { return 103; } /* = unique id SOAP_TYPE_TaskFinish___ns1__GetTaskFinishInfoByTime */
};
#endif

#ifndef SOAP_TYPE_TaskFinish___ns1__GetTaskExcuteInfoByTaskId
#define SOAP_TYPE_TaskFinish___ns1__GetTaskExcuteInfoByTaskId (107)
/* Operation wrapper: */
struct __ns1__GetTaskExcuteInfoByTaskId
{
public:
	_ns5__GetTaskExcuteInfoByTaskId *ns5__GetTaskExcuteInfoByTaskId;	/* optional element of type ns5:GetTaskExcuteInfoByTaskId */
public:
	int soap_type() const { return 107; } /* = unique id SOAP_TYPE_TaskFinish___ns1__GetTaskExcuteInfoByTaskId */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Header
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Header (108)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 108; } /* = unique id SOAP_TYPE_TaskFinish_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Code
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Code (109)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 109; } /* = unique id SOAP_TYPE_TaskFinish_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Detail
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Detail (111)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 111; } /* = unique id SOAP_TYPE_TaskFinish_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Reason
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Reason (114)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 114; } /* = unique id SOAP_TYPE_TaskFinish_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Fault
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Fault (115)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 115; } /* = unique id SOAP_TYPE_TaskFinish_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_TaskFinish__QName
#define SOAP_TYPE_TaskFinish__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_TaskFinish__XML
#define SOAP_TYPE_TaskFinish__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTaskFinishInfoByTime(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns5__GetTaskFinishInfoByTime *ns5__GetTaskFinishInfoByTime, _ns5__GetTaskFinishInfoByTimeResponse *ns5__GetTaskFinishInfoByTimeResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTaskExcuteInfoByTaskId(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns5__GetTaskExcuteInfoByTaskId *ns5__GetTaskExcuteInfoByTaskId, _ns5__GetTaskExcuteInfoByTaskIdResponse *ns5__GetTaskExcuteInfoByTaskIdResponse);

} // namespace TaskFinish


#endif

/* End of TaskFinishStub.h */
