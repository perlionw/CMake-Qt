/* TaskFinishH.h
   Generated by gSOAP 2.8.16 from .\taskfinish.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef TaskFinishH_H
#define TaskFinishH_H
#include "TaskFinishStub.h"

namespace TaskFinish {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 TaskFinish_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 TaskFinish_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 TaskFinish_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_byte
#define SOAP_TYPE_TaskFinish_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_byte(soap, data),0) || TaskFinish::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_int
#define SOAP_TYPE_TaskFinish_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_int(soap, data),0) || TaskFinish::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_double
#define SOAP_TYPE_TaskFinish_double (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_double(soap, data),0) || TaskFinish::soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_bool
#define SOAP_TYPE_TaskFinish_bool (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_bool(soap, data),0) || TaskFinish::soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_ns5__ControlTaskType
#define SOAP_TYPE_TaskFinish_ns5__ControlTaskType (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns5__ControlTaskType(struct soap*, enum ns5__ControlTaskType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ControlTaskType(struct soap*, const char*, int, const enum ns5__ControlTaskType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns5__ControlTaskType2s(struct soap*, enum ns5__ControlTaskType);
SOAP_FMAC3 enum ns5__ControlTaskType * SOAP_FMAC4 soap_in_ns5__ControlTaskType(struct soap*, const char*, enum ns5__ControlTaskType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns5__ControlTaskType(struct soap*, const char*, enum ns5__ControlTaskType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns5__ControlTaskType(struct soap*, const enum ns5__ControlTaskType *, const char*, const char*);

#ifndef soap_write_ns5__ControlTaskType
#define soap_write_ns5__ControlTaskType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_ns5__ControlTaskType(soap, data),0) || TaskFinish::soap_put_ns5__ControlTaskType(soap, data, "ns5:ControlTaskType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns5__ControlTaskType * SOAP_FMAC4 soap_get_ns5__ControlTaskType(struct soap*, enum ns5__ControlTaskType *, const char*, const char*);

#ifndef soap_read_ns5__ControlTaskType
#define soap_read_ns5__ControlTaskType(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__ControlTaskType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_ns5__PdControlType
#define SOAP_TYPE_TaskFinish_ns5__PdControlType (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns5__PdControlType(struct soap*, enum ns5__PdControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__PdControlType(struct soap*, const char*, int, const enum ns5__PdControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns5__PdControlType2s(struct soap*, enum ns5__PdControlType);
SOAP_FMAC3 enum ns5__PdControlType * SOAP_FMAC4 soap_in_ns5__PdControlType(struct soap*, const char*, enum ns5__PdControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns5__PdControlType(struct soap*, const char*, enum ns5__PdControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns5__PdControlType(struct soap*, const enum ns5__PdControlType *, const char*, const char*);

#ifndef soap_write_ns5__PdControlType
#define soap_write_ns5__PdControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_ns5__PdControlType(soap, data),0) || TaskFinish::soap_put_ns5__PdControlType(soap, data, "ns5:PdControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns5__PdControlType * SOAP_FMAC4 soap_get_ns5__PdControlType(struct soap*, enum ns5__PdControlType *, const char*, const char*);

#ifndef soap_read_ns5__PdControlType
#define soap_read_ns5__PdControlType(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__PdControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_ns5__LifterControlType
#define SOAP_TYPE_TaskFinish_ns5__LifterControlType (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns5__LifterControlType(struct soap*, enum ns5__LifterControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__LifterControlType(struct soap*, const char*, int, const enum ns5__LifterControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns5__LifterControlType2s(struct soap*, enum ns5__LifterControlType);
SOAP_FMAC3 enum ns5__LifterControlType * SOAP_FMAC4 soap_in_ns5__LifterControlType(struct soap*, const char*, enum ns5__LifterControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns5__LifterControlType(struct soap*, const char*, enum ns5__LifterControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns5__LifterControlType(struct soap*, const enum ns5__LifterControlType *, const char*, const char*);

#ifndef soap_write_ns5__LifterControlType
#define soap_write_ns5__LifterControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_ns5__LifterControlType(soap, data),0) || TaskFinish::soap_put_ns5__LifterControlType(soap, data, "ns5:LifterControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns5__LifterControlType * SOAP_FMAC4 soap_get_ns5__LifterControlType(struct soap*, enum ns5__LifterControlType *, const char*, const char*);

#ifndef soap_read_ns5__LifterControlType
#define soap_read_ns5__LifterControlType(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__LifterControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_ns5__FilrControlType
#define SOAP_TYPE_TaskFinish_ns5__FilrControlType (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns5__FilrControlType(struct soap*, enum ns5__FilrControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__FilrControlType(struct soap*, const char*, int, const enum ns5__FilrControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns5__FilrControlType2s(struct soap*, enum ns5__FilrControlType);
SOAP_FMAC3 enum ns5__FilrControlType * SOAP_FMAC4 soap_in_ns5__FilrControlType(struct soap*, const char*, enum ns5__FilrControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns5__FilrControlType(struct soap*, const char*, enum ns5__FilrControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns5__FilrControlType(struct soap*, const enum ns5__FilrControlType *, const char*, const char*);

#ifndef soap_write_ns5__FilrControlType
#define soap_write_ns5__FilrControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_ns5__FilrControlType(soap, data),0) || TaskFinish::soap_put_ns5__FilrControlType(soap, data, "ns5:FilrControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns5__FilrControlType * SOAP_FMAC4 soap_get_ns5__FilrControlType(struct soap*, enum ns5__FilrControlType *, const char*, const char*);

#ifndef soap_read_ns5__FilrControlType
#define soap_read_ns5__FilrControlType(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__FilrControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_ns5__WiperControlType
#define SOAP_TYPE_TaskFinish_ns5__WiperControlType (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns5__WiperControlType(struct soap*, enum ns5__WiperControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__WiperControlType(struct soap*, const char*, int, const enum ns5__WiperControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns5__WiperControlType2s(struct soap*, enum ns5__WiperControlType);
SOAP_FMAC3 enum ns5__WiperControlType * SOAP_FMAC4 soap_in_ns5__WiperControlType(struct soap*, const char*, enum ns5__WiperControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns5__WiperControlType(struct soap*, const char*, enum ns5__WiperControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns5__WiperControlType(struct soap*, const enum ns5__WiperControlType *, const char*, const char*);

#ifndef soap_write_ns5__WiperControlType
#define soap_write_ns5__WiperControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_ns5__WiperControlType(soap, data),0) || TaskFinish::soap_put_ns5__WiperControlType(soap, data, "ns5:WiperControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns5__WiperControlType * SOAP_FMAC4 soap_get_ns5__WiperControlType(struct soap*, enum ns5__WiperControlType *, const char*, const char*);

#ifndef soap_read_ns5__WiperControlType
#define soap_read_ns5__WiperControlType(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__WiperControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_ns5__LightControlType
#define SOAP_TYPE_TaskFinish_ns5__LightControlType (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns5__LightControlType(struct soap*, enum ns5__LightControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__LightControlType(struct soap*, const char*, int, const enum ns5__LightControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns5__LightControlType2s(struct soap*, enum ns5__LightControlType);
SOAP_FMAC3 enum ns5__LightControlType * SOAP_FMAC4 soap_in_ns5__LightControlType(struct soap*, const char*, enum ns5__LightControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns5__LightControlType(struct soap*, const char*, enum ns5__LightControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns5__LightControlType(struct soap*, const enum ns5__LightControlType *, const char*, const char*);

#ifndef soap_write_ns5__LightControlType
#define soap_write_ns5__LightControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_ns5__LightControlType(soap, data),0) || TaskFinish::soap_put_ns5__LightControlType(soap, data, "ns5:LightControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns5__LightControlType * SOAP_FMAC4 soap_get_ns5__LightControlType(struct soap*, enum ns5__LightControlType *, const char*, const char*);

#ifndef soap_read_ns5__LightControlType
#define soap_read_ns5__LightControlType(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__LightControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_ns5__CameraControlType
#define SOAP_TYPE_TaskFinish_ns5__CameraControlType (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns5__CameraControlType(struct soap*, enum ns5__CameraControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__CameraControlType(struct soap*, const char*, int, const enum ns5__CameraControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns5__CameraControlType2s(struct soap*, enum ns5__CameraControlType);
SOAP_FMAC3 enum ns5__CameraControlType * SOAP_FMAC4 soap_in_ns5__CameraControlType(struct soap*, const char*, enum ns5__CameraControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns5__CameraControlType(struct soap*, const char*, enum ns5__CameraControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns5__CameraControlType(struct soap*, const enum ns5__CameraControlType *, const char*, const char*);

#ifndef soap_write_ns5__CameraControlType
#define soap_write_ns5__CameraControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_ns5__CameraControlType(soap, data),0) || TaskFinish::soap_put_ns5__CameraControlType(soap, data, "ns5:CameraControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns5__CameraControlType * SOAP_FMAC4 soap_get_ns5__CameraControlType(struct soap*, enum ns5__CameraControlType *, const char*, const char*);

#ifndef soap_read_ns5__CameraControlType
#define soap_read_ns5__CameraControlType(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__CameraControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_ns5__YuntaiControlType
#define SOAP_TYPE_TaskFinish_ns5__YuntaiControlType (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns5__YuntaiControlType(struct soap*, enum ns5__YuntaiControlType *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__YuntaiControlType(struct soap*, const char*, int, const enum ns5__YuntaiControlType *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns5__YuntaiControlType2s(struct soap*, enum ns5__YuntaiControlType);
SOAP_FMAC3 enum ns5__YuntaiControlType * SOAP_FMAC4 soap_in_ns5__YuntaiControlType(struct soap*, const char*, enum ns5__YuntaiControlType *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns5__YuntaiControlType(struct soap*, const char*, enum ns5__YuntaiControlType *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns5__YuntaiControlType(struct soap*, const enum ns5__YuntaiControlType *, const char*, const char*);

#ifndef soap_write_ns5__YuntaiControlType
#define soap_write_ns5__YuntaiControlType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_ns5__YuntaiControlType(soap, data),0) || TaskFinish::soap_put_ns5__YuntaiControlType(soap, data, "ns5:YuntaiControlType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 enum ns5__YuntaiControlType * SOAP_FMAC4 soap_get_ns5__YuntaiControlType(struct soap*, enum ns5__YuntaiControlType *, const char*, const char*);

#ifndef soap_read_ns5__YuntaiControlType
#define soap_read_ns5__YuntaiControlType(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__YuntaiControlType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_std__string
#define SOAP_TYPE_TaskFinish_std__string (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskIdResponse
#define SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskIdResponse (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, const char*, int, const _ns5__GetTaskExcuteInfoByTaskIdResponse *, const char*);
SOAP_FMAC3 _ns5__GetTaskExcuteInfoByTaskIdResponse * SOAP_FMAC4 soap_in__ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, const char*, _ns5__GetTaskExcuteInfoByTaskIdResponse *, const char*);

#ifndef soap_write__ns5__GetTaskExcuteInfoByTaskIdResponse
#define soap_write__ns5__GetTaskExcuteInfoByTaskIdResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:GetTaskExcuteInfoByTaskIdResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__GetTaskExcuteInfoByTaskIdResponse * SOAP_FMAC4 soap_get__ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, _ns5__GetTaskExcuteInfoByTaskIdResponse *, const char*, const char*);

#ifndef soap_read__ns5__GetTaskExcuteInfoByTaskIdResponse
#define soap_read__ns5__GetTaskExcuteInfoByTaskIdResponse(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get__ns5__GetTaskExcuteInfoByTaskIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns5__GetTaskExcuteInfoByTaskIdResponse * SOAP_FMAC2 soap_instantiate__ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetTaskExcuteInfoByTaskIdResponse * soap_new__ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns5__GetTaskExcuteInfoByTaskIdResponse(soap, n, NULL, NULL, NULL); }

inline _ns5__GetTaskExcuteInfoByTaskIdResponse * soap_new_req__ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap *soap, ns5__TaskExcuteInfos *Data) { _ns5__GetTaskExcuteInfoByTaskIdResponse *_p = soap_instantiate__ns5__GetTaskExcuteInfoByTaskIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__GetTaskExcuteInfoByTaskIdResponse::Data = Data; } return _p; }

inline _ns5__GetTaskExcuteInfoByTaskIdResponse * soap_new_set__ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap *soap, ns5__TaskExcuteInfos *Data) { _ns5__GetTaskExcuteInfoByTaskIdResponse *_p = soap_instantiate__ns5__GetTaskExcuteInfoByTaskIdResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__GetTaskExcuteInfoByTaskIdResponse::Data = Data; } return _p; }

inline void soap_delete__ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap *soap, _ns5__GetTaskExcuteInfoByTaskIdResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskId
#define SOAP_TYPE_TaskFinish__ns5__GetTaskExcuteInfoByTaskId (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetTaskExcuteInfoByTaskId(struct soap*, const char*, int, const _ns5__GetTaskExcuteInfoByTaskId *, const char*);
SOAP_FMAC3 _ns5__GetTaskExcuteInfoByTaskId * SOAP_FMAC4 soap_in__ns5__GetTaskExcuteInfoByTaskId(struct soap*, const char*, _ns5__GetTaskExcuteInfoByTaskId *, const char*);

#ifndef soap_write__ns5__GetTaskExcuteInfoByTaskId
#define soap_write__ns5__GetTaskExcuteInfoByTaskId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:GetTaskExcuteInfoByTaskId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__GetTaskExcuteInfoByTaskId * SOAP_FMAC4 soap_get__ns5__GetTaskExcuteInfoByTaskId(struct soap*, _ns5__GetTaskExcuteInfoByTaskId *, const char*, const char*);

#ifndef soap_read__ns5__GetTaskExcuteInfoByTaskId
#define soap_read__ns5__GetTaskExcuteInfoByTaskId(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get__ns5__GetTaskExcuteInfoByTaskId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns5__GetTaskExcuteInfoByTaskId * SOAP_FMAC2 soap_instantiate__ns5__GetTaskExcuteInfoByTaskId(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetTaskExcuteInfoByTaskId * soap_new__ns5__GetTaskExcuteInfoByTaskId(struct soap *soap, int n = -1) { return soap_instantiate__ns5__GetTaskExcuteInfoByTaskId(soap, n, NULL, NULL, NULL); }

inline _ns5__GetTaskExcuteInfoByTaskId * soap_new_req__ns5__GetTaskExcuteInfoByTaskId(struct soap *soap, std::string& TaskId) { _ns5__GetTaskExcuteInfoByTaskId *_p = soap_instantiate__ns5__GetTaskExcuteInfoByTaskId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__GetTaskExcuteInfoByTaskId::TaskId = TaskId; } return _p; }

inline _ns5__GetTaskExcuteInfoByTaskId * soap_new_set__ns5__GetTaskExcuteInfoByTaskId(struct soap *soap, std::string& TaskId) { _ns5__GetTaskExcuteInfoByTaskId *_p = soap_instantiate__ns5__GetTaskExcuteInfoByTaskId(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__GetTaskExcuteInfoByTaskId::TaskId = TaskId; } return _p; }

inline void soap_delete__ns5__GetTaskExcuteInfoByTaskId(struct soap *soap, _ns5__GetTaskExcuteInfoByTaskId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns5__GetTaskExcuteInfoByTaskId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTimeResponse
#define SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTimeResponse (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetTaskFinishInfoByTimeResponse(struct soap*, const char*, int, const _ns5__GetTaskFinishInfoByTimeResponse *, const char*);
SOAP_FMAC3 _ns5__GetTaskFinishInfoByTimeResponse * SOAP_FMAC4 soap_in__ns5__GetTaskFinishInfoByTimeResponse(struct soap*, const char*, _ns5__GetTaskFinishInfoByTimeResponse *, const char*);

#ifndef soap_write__ns5__GetTaskFinishInfoByTimeResponse
#define soap_write__ns5__GetTaskFinishInfoByTimeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:GetTaskFinishInfoByTimeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__GetTaskFinishInfoByTimeResponse * SOAP_FMAC4 soap_get__ns5__GetTaskFinishInfoByTimeResponse(struct soap*, _ns5__GetTaskFinishInfoByTimeResponse *, const char*, const char*);

#ifndef soap_read__ns5__GetTaskFinishInfoByTimeResponse
#define soap_read__ns5__GetTaskFinishInfoByTimeResponse(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get__ns5__GetTaskFinishInfoByTimeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns5__GetTaskFinishInfoByTimeResponse * SOAP_FMAC2 soap_instantiate__ns5__GetTaskFinishInfoByTimeResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetTaskFinishInfoByTimeResponse * soap_new__ns5__GetTaskFinishInfoByTimeResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns5__GetTaskFinishInfoByTimeResponse(soap, n, NULL, NULL, NULL); }

inline _ns5__GetTaskFinishInfoByTimeResponse * soap_new_req__ns5__GetTaskFinishInfoByTimeResponse(struct soap *soap, ns5__TaskFinishInfos *Data) { _ns5__GetTaskFinishInfoByTimeResponse *_p = soap_instantiate__ns5__GetTaskFinishInfoByTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__GetTaskFinishInfoByTimeResponse::Data = Data; } return _p; }

inline _ns5__GetTaskFinishInfoByTimeResponse * soap_new_set__ns5__GetTaskFinishInfoByTimeResponse(struct soap *soap, ns5__TaskFinishInfos *Data) { _ns5__GetTaskFinishInfoByTimeResponse *_p = soap_instantiate__ns5__GetTaskFinishInfoByTimeResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__GetTaskFinishInfoByTimeResponse::Data = Data; } return _p; }

inline void soap_delete__ns5__GetTaskFinishInfoByTimeResponse(struct soap *soap, _ns5__GetTaskFinishInfoByTimeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns5__GetTaskFinishInfoByTimeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTime
#define SOAP_TYPE_TaskFinish__ns5__GetTaskFinishInfoByTime (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns5__GetTaskFinishInfoByTime(struct soap*, const char*, int, const _ns5__GetTaskFinishInfoByTime *, const char*);
SOAP_FMAC3 _ns5__GetTaskFinishInfoByTime * SOAP_FMAC4 soap_in__ns5__GetTaskFinishInfoByTime(struct soap*, const char*, _ns5__GetTaskFinishInfoByTime *, const char*);

#ifndef soap_write__ns5__GetTaskFinishInfoByTime
#define soap_write__ns5__GetTaskFinishInfoByTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:GetTaskFinishInfoByTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__GetTaskFinishInfoByTime * SOAP_FMAC4 soap_get__ns5__GetTaskFinishInfoByTime(struct soap*, _ns5__GetTaskFinishInfoByTime *, const char*, const char*);

#ifndef soap_read__ns5__GetTaskFinishInfoByTime
#define soap_read__ns5__GetTaskFinishInfoByTime(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get__ns5__GetTaskFinishInfoByTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns5__GetTaskFinishInfoByTime * SOAP_FMAC2 soap_instantiate__ns5__GetTaskFinishInfoByTime(struct soap*, int, const char*, const char*, size_t*);

inline _ns5__GetTaskFinishInfoByTime * soap_new__ns5__GetTaskFinishInfoByTime(struct soap *soap, int n = -1) { return soap_instantiate__ns5__GetTaskFinishInfoByTime(soap, n, NULL, NULL, NULL); }

inline _ns5__GetTaskFinishInfoByTime * soap_new_req__ns5__GetTaskFinishInfoByTime(struct soap *soap, std::string& StartTime, std::string& EndTime) { _ns5__GetTaskFinishInfoByTime *_p = soap_instantiate__ns5__GetTaskFinishInfoByTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__GetTaskFinishInfoByTime::StartTime = StartTime; _p->_ns5__GetTaskFinishInfoByTime::EndTime = EndTime; } return _p; }

inline _ns5__GetTaskFinishInfoByTime * soap_new_set__ns5__GetTaskFinishInfoByTime(struct soap *soap, std::string& StartTime, std::string& EndTime) { _ns5__GetTaskFinishInfoByTime *_p = soap_instantiate__ns5__GetTaskFinishInfoByTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns5__GetTaskFinishInfoByTime::StartTime = StartTime; _p->_ns5__GetTaskFinishInfoByTime::EndTime = EndTime; } return _p; }

inline void soap_delete__ns5__GetTaskFinishInfoByTime(struct soap *soap, _ns5__GetTaskFinishInfoByTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns5__GetTaskFinishInfoByTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfos
#define SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfos (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__TaskExcuteInfos(struct soap*, const char*, int, const ns5__TaskExcuteInfos *, const char*);
SOAP_FMAC3 ns5__TaskExcuteInfos * SOAP_FMAC4 soap_in_ns5__TaskExcuteInfos(struct soap*, const char*, ns5__TaskExcuteInfos *, const char*);

#ifndef soap_write_ns5__TaskExcuteInfos
#define soap_write_ns5__TaskExcuteInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:TaskExcuteInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskExcuteInfos * SOAP_FMAC4 soap_get_ns5__TaskExcuteInfos(struct soap*, ns5__TaskExcuteInfos *, const char*, const char*);

#ifndef soap_read_ns5__TaskExcuteInfos
#define soap_read_ns5__TaskExcuteInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__TaskExcuteInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__TaskExcuteInfos * SOAP_FMAC2 soap_instantiate_ns5__TaskExcuteInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__TaskExcuteInfos * soap_new_ns5__TaskExcuteInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__TaskExcuteInfos(soap, n, NULL, NULL, NULL); }

inline ns5__TaskExcuteInfos * soap_new_req_ns5__TaskExcuteInfos(struct soap *soap) { ns5__TaskExcuteInfos *_p = soap_instantiate_ns5__TaskExcuteInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__TaskExcuteInfos * soap_new_set_ns5__TaskExcuteInfos(struct soap *soap, std::vector<ns5__TaskExcuteInfo * >& Infos) { ns5__TaskExcuteInfos *_p = soap_instantiate_ns5__TaskExcuteInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskExcuteInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__TaskExcuteInfos(struct soap *soap, ns5__TaskExcuteInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__TaskExcuteInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfo
#define SOAP_TYPE_TaskFinish_ns5__TaskExcuteInfo (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__TaskExcuteInfo(struct soap*, const char*, int, const ns5__TaskExcuteInfo *, const char*);
SOAP_FMAC3 ns5__TaskExcuteInfo * SOAP_FMAC4 soap_in_ns5__TaskExcuteInfo(struct soap*, const char*, ns5__TaskExcuteInfo *, const char*);

#ifndef soap_write_ns5__TaskExcuteInfo
#define soap_write_ns5__TaskExcuteInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:TaskExcuteInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskExcuteInfo * SOAP_FMAC4 soap_get_ns5__TaskExcuteInfo(struct soap*, ns5__TaskExcuteInfo *, const char*, const char*);

#ifndef soap_read_ns5__TaskExcuteInfo
#define soap_read_ns5__TaskExcuteInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__TaskExcuteInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__TaskExcuteInfo * SOAP_FMAC2 soap_instantiate_ns5__TaskExcuteInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__TaskExcuteInfo * soap_new_ns5__TaskExcuteInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__TaskExcuteInfo(soap, n, NULL, NULL, NULL); }

inline ns5__TaskExcuteInfo * soap_new_req_ns5__TaskExcuteInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::string& TargetId, std::string& PointId, std::string& PointName, std::string& PointType, std::string& ExcuteTime, std::string& ExcuteValue, std::string& ExcuteUnit, std::string& ExcuteState, std::string& ExcuteDesc, std::string& HDPicture, std::string& InfraredPicture, std::string& OtherFile) { ns5__TaskExcuteInfo *_p = soap_instantiate_ns5__TaskExcuteInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskExcuteInfo::TaskId = TaskId; _p->ns5__TaskExcuteInfo::TaskName = TaskName; _p->ns5__TaskExcuteInfo::TaskType = TaskType; _p->ns5__TaskExcuteInfo::TaskPathId = TaskPathId; _p->ns5__TaskExcuteInfo::TargetId = TargetId; _p->ns5__TaskExcuteInfo::PointId = PointId; _p->ns5__TaskExcuteInfo::PointName = PointName; _p->ns5__TaskExcuteInfo::PointType = PointType; _p->ns5__TaskExcuteInfo::ExcuteTime = ExcuteTime; _p->ns5__TaskExcuteInfo::ExcuteValue = ExcuteValue; _p->ns5__TaskExcuteInfo::ExcuteUnit = ExcuteUnit; _p->ns5__TaskExcuteInfo::ExcuteState = ExcuteState; _p->ns5__TaskExcuteInfo::ExcuteDesc = ExcuteDesc; _p->ns5__TaskExcuteInfo::HDPicture = HDPicture; _p->ns5__TaskExcuteInfo::InfraredPicture = InfraredPicture; _p->ns5__TaskExcuteInfo::OtherFile = OtherFile; } return _p; }

inline ns5__TaskExcuteInfo * soap_new_set_ns5__TaskExcuteInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::string& TargetId, std::string& PointId, std::string& PointName, std::string& PointType, std::string& ExcuteTime, std::string& ExcuteValue, std::string& ExcuteUnit, std::string& ExcuteState, std::string& ExcuteDesc, std::string& HDPicture, std::string& InfraredPicture, std::string& OtherFile) { ns5__TaskExcuteInfo *_p = soap_instantiate_ns5__TaskExcuteInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskExcuteInfo::TaskId = TaskId; _p->ns5__TaskExcuteInfo::TaskName = TaskName; _p->ns5__TaskExcuteInfo::TaskType = TaskType; _p->ns5__TaskExcuteInfo::TaskPathId = TaskPathId; _p->ns5__TaskExcuteInfo::TargetId = TargetId; _p->ns5__TaskExcuteInfo::PointId = PointId; _p->ns5__TaskExcuteInfo::PointName = PointName; _p->ns5__TaskExcuteInfo::PointType = PointType; _p->ns5__TaskExcuteInfo::ExcuteTime = ExcuteTime; _p->ns5__TaskExcuteInfo::ExcuteValue = ExcuteValue; _p->ns5__TaskExcuteInfo::ExcuteUnit = ExcuteUnit; _p->ns5__TaskExcuteInfo::ExcuteState = ExcuteState; _p->ns5__TaskExcuteInfo::ExcuteDesc = ExcuteDesc; _p->ns5__TaskExcuteInfo::HDPicture = HDPicture; _p->ns5__TaskExcuteInfo::InfraredPicture = InfraredPicture; _p->ns5__TaskExcuteInfo::OtherFile = OtherFile; } return _p; }

inline void soap_delete_ns5__TaskExcuteInfo(struct soap *soap, ns5__TaskExcuteInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__TaskExcuteInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskFinishInfos
#define SOAP_TYPE_TaskFinish_ns5__TaskFinishInfos (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__TaskFinishInfos(struct soap*, const char*, int, const ns5__TaskFinishInfos *, const char*);
SOAP_FMAC3 ns5__TaskFinishInfos * SOAP_FMAC4 soap_in_ns5__TaskFinishInfos(struct soap*, const char*, ns5__TaskFinishInfos *, const char*);

#ifndef soap_write_ns5__TaskFinishInfos
#define soap_write_ns5__TaskFinishInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:TaskFinishInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskFinishInfos * SOAP_FMAC4 soap_get_ns5__TaskFinishInfos(struct soap*, ns5__TaskFinishInfos *, const char*, const char*);

#ifndef soap_read_ns5__TaskFinishInfos
#define soap_read_ns5__TaskFinishInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__TaskFinishInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__TaskFinishInfos * SOAP_FMAC2 soap_instantiate_ns5__TaskFinishInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__TaskFinishInfos * soap_new_ns5__TaskFinishInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__TaskFinishInfos(soap, n, NULL, NULL, NULL); }

inline ns5__TaskFinishInfos * soap_new_req_ns5__TaskFinishInfos(struct soap *soap) { ns5__TaskFinishInfos *_p = soap_instantiate_ns5__TaskFinishInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__TaskFinishInfos * soap_new_set_ns5__TaskFinishInfos(struct soap *soap, std::vector<ns5__TaskFinishInfo * >& Infos) { ns5__TaskFinishInfos *_p = soap_instantiate_ns5__TaskFinishInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskFinishInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__TaskFinishInfos(struct soap *soap, ns5__TaskFinishInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__TaskFinishInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskFinishInfo
#define SOAP_TYPE_TaskFinish_ns5__TaskFinishInfo (41)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__TaskFinishInfo(struct soap*, const char*, int, const ns5__TaskFinishInfo *, const char*);
SOAP_FMAC3 ns5__TaskFinishInfo * SOAP_FMAC4 soap_in_ns5__TaskFinishInfo(struct soap*, const char*, ns5__TaskFinishInfo *, const char*);

#ifndef soap_write_ns5__TaskFinishInfo
#define soap_write_ns5__TaskFinishInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:TaskFinishInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskFinishInfo * SOAP_FMAC4 soap_get_ns5__TaskFinishInfo(struct soap*, ns5__TaskFinishInfo *, const char*, const char*);

#ifndef soap_read_ns5__TaskFinishInfo
#define soap_read_ns5__TaskFinishInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__TaskFinishInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__TaskFinishInfo * SOAP_FMAC2 soap_instantiate_ns5__TaskFinishInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__TaskFinishInfo * soap_new_ns5__TaskFinishInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__TaskFinishInfo(soap, n, NULL, NULL, NULL); }

inline ns5__TaskFinishInfo * soap_new_req_ns5__TaskFinishInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::string& StartTime, std::string& EndTime, std::string& FinishState, std::string& ExcuteRobot) { ns5__TaskFinishInfo *_p = soap_instantiate_ns5__TaskFinishInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskFinishInfo::TaskId = TaskId; _p->ns5__TaskFinishInfo::TaskName = TaskName; _p->ns5__TaskFinishInfo::TaskType = TaskType; _p->ns5__TaskFinishInfo::TaskPathId = TaskPathId; _p->ns5__TaskFinishInfo::StartTime = StartTime; _p->ns5__TaskFinishInfo::EndTime = EndTime; _p->ns5__TaskFinishInfo::FinishState = FinishState; _p->ns5__TaskFinishInfo::ExcuteRobot = ExcuteRobot; } return _p; }

inline ns5__TaskFinishInfo * soap_new_set_ns5__TaskFinishInfo(struct soap *soap, std::string& TaskId, std::string& TaskName, std::string& TaskType, std::string& TaskPathId, std::vector<std::string >& PointList, std::string& StartTime, std::string& EndTime, std::string& FinishState, std::string& ExcuteRobot) { ns5__TaskFinishInfo *_p = soap_instantiate_ns5__TaskFinishInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskFinishInfo::TaskId = TaskId; _p->ns5__TaskFinishInfo::TaskName = TaskName; _p->ns5__TaskFinishInfo::TaskType = TaskType; _p->ns5__TaskFinishInfo::TaskPathId = TaskPathId; _p->ns5__TaskFinishInfo::PointList = PointList; _p->ns5__TaskFinishInfo::StartTime = StartTime; _p->ns5__TaskFinishInfo::EndTime = EndTime; _p->ns5__TaskFinishInfo::FinishState = FinishState; _p->ns5__TaskFinishInfo::ExcuteRobot = ExcuteRobot; } return _p; }

inline void soap_delete_ns5__TaskFinishInfo(struct soap *soap, ns5__TaskFinishInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__TaskFinishInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskExcuteData
#define SOAP_TYPE_TaskFinish_ns5__TaskExcuteData (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__TaskExcuteData(struct soap*, const char*, int, const ns5__TaskExcuteData *, const char*);
SOAP_FMAC3 ns5__TaskExcuteData * SOAP_FMAC4 soap_in_ns5__TaskExcuteData(struct soap*, const char*, ns5__TaskExcuteData *, const char*);

#ifndef soap_write_ns5__TaskExcuteData
#define soap_write_ns5__TaskExcuteData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:TaskExcuteData", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskExcuteData * SOAP_FMAC4 soap_get_ns5__TaskExcuteData(struct soap*, ns5__TaskExcuteData *, const char*, const char*);

#ifndef soap_read_ns5__TaskExcuteData
#define soap_read_ns5__TaskExcuteData(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__TaskExcuteData(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__TaskExcuteData * SOAP_FMAC2 soap_instantiate_ns5__TaskExcuteData(struct soap*, int, const char*, const char*, size_t*);

inline ns5__TaskExcuteData * soap_new_ns5__TaskExcuteData(struct soap *soap, int n = -1) { return soap_instantiate_ns5__TaskExcuteData(soap, n, NULL, NULL, NULL); }

inline ns5__TaskExcuteData * soap_new_req_ns5__TaskExcuteData(struct soap *soap, std::string& RobotIp, std::string& TaskType, std::string& TaskId, std::string& TaskName, std::string& PatrolDeviceName, std::string& PatrolDeviceId, int TotalDeviceSize, int ErrorDeviceSize, int FinishDeviceSize, int TaskFinishPercentage) { ns5__TaskExcuteData *_p = soap_instantiate_ns5__TaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskExcuteData::RobotIp = RobotIp; _p->ns5__TaskExcuteData::TaskType = TaskType; _p->ns5__TaskExcuteData::TaskId = TaskId; _p->ns5__TaskExcuteData::TaskName = TaskName; _p->ns5__TaskExcuteData::PatrolDeviceName = PatrolDeviceName; _p->ns5__TaskExcuteData::PatrolDeviceId = PatrolDeviceId; _p->ns5__TaskExcuteData::TotalDeviceSize = TotalDeviceSize; _p->ns5__TaskExcuteData::ErrorDeviceSize = ErrorDeviceSize; _p->ns5__TaskExcuteData::FinishDeviceSize = FinishDeviceSize; _p->ns5__TaskExcuteData::TaskFinishPercentage = TaskFinishPercentage; } return _p; }

inline ns5__TaskExcuteData * soap_new_set_ns5__TaskExcuteData(struct soap *soap, std::string& RobotIp, std::string& TaskType, std::string& TaskId, std::string& TaskName, std::string& PatrolDeviceName, std::string& PatrolDeviceId, int TotalDeviceSize, int ErrorDeviceSize, int FinishDeviceSize, int TaskFinishPercentage) { ns5__TaskExcuteData *_p = soap_instantiate_ns5__TaskExcuteData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskExcuteData::RobotIp = RobotIp; _p->ns5__TaskExcuteData::TaskType = TaskType; _p->ns5__TaskExcuteData::TaskId = TaskId; _p->ns5__TaskExcuteData::TaskName = TaskName; _p->ns5__TaskExcuteData::PatrolDeviceName = PatrolDeviceName; _p->ns5__TaskExcuteData::PatrolDeviceId = PatrolDeviceId; _p->ns5__TaskExcuteData::TotalDeviceSize = TotalDeviceSize; _p->ns5__TaskExcuteData::ErrorDeviceSize = ErrorDeviceSize; _p->ns5__TaskExcuteData::FinishDeviceSize = FinishDeviceSize; _p->ns5__TaskExcuteData::TaskFinishPercentage = TaskFinishPercentage; } return _p; }

inline void soap_delete_ns5__TaskExcuteData(struct soap *soap, ns5__TaskExcuteData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__TaskExcuteData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskPathInfos
#define SOAP_TYPE_TaskFinish_ns5__TaskPathInfos (39)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__TaskPathInfos(struct soap*, const char*, int, const ns5__TaskPathInfos *, const char*);
SOAP_FMAC3 ns5__TaskPathInfos * SOAP_FMAC4 soap_in_ns5__TaskPathInfos(struct soap*, const char*, ns5__TaskPathInfos *, const char*);

#ifndef soap_write_ns5__TaskPathInfos
#define soap_write_ns5__TaskPathInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:TaskPathInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskPathInfos * SOAP_FMAC4 soap_get_ns5__TaskPathInfos(struct soap*, ns5__TaskPathInfos *, const char*, const char*);

#ifndef soap_read_ns5__TaskPathInfos
#define soap_read_ns5__TaskPathInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__TaskPathInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__TaskPathInfos * SOAP_FMAC2 soap_instantiate_ns5__TaskPathInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__TaskPathInfos * soap_new_ns5__TaskPathInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__TaskPathInfos(soap, n, NULL, NULL, NULL); }

inline ns5__TaskPathInfos * soap_new_req_ns5__TaskPathInfos(struct soap *soap) { ns5__TaskPathInfos *_p = soap_instantiate_ns5__TaskPathInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__TaskPathInfos * soap_new_set_ns5__TaskPathInfos(struct soap *soap, std::vector<ns5__TaskPathInfo * >& Infos) { ns5__TaskPathInfos *_p = soap_instantiate_ns5__TaskPathInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskPathInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__TaskPathInfos(struct soap *soap, ns5__TaskPathInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__TaskPathInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__TaskPathInfo
#define SOAP_TYPE_TaskFinish_ns5__TaskPathInfo (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__TaskPathInfo(struct soap*, const char*, int, const ns5__TaskPathInfo *, const char*);
SOAP_FMAC3 ns5__TaskPathInfo * SOAP_FMAC4 soap_in_ns5__TaskPathInfo(struct soap*, const char*, ns5__TaskPathInfo *, const char*);

#ifndef soap_write_ns5__TaskPathInfo
#define soap_write_ns5__TaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:TaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskPathInfo * SOAP_FMAC4 soap_get_ns5__TaskPathInfo(struct soap*, ns5__TaskPathInfo *, const char*, const char*);

#ifndef soap_read_ns5__TaskPathInfo
#define soap_read_ns5__TaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__TaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__TaskPathInfo * SOAP_FMAC2 soap_instantiate_ns5__TaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__TaskPathInfo * soap_new_ns5__TaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__TaskPathInfo(soap, n, NULL, NULL, NULL); }

inline ns5__TaskPathInfo * soap_new_req_ns5__TaskPathInfo(struct soap *soap, std::string& TaskPathId, std::string& TaskPathName, std::string& TaskPathType, std::string& CreateTime, int FinishAction) { ns5__TaskPathInfo *_p = soap_instantiate_ns5__TaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskPathInfo::TaskPathId = TaskPathId; _p->ns5__TaskPathInfo::TaskPathName = TaskPathName; _p->ns5__TaskPathInfo::TaskPathType = TaskPathType; _p->ns5__TaskPathInfo::CreateTime = CreateTime; _p->ns5__TaskPathInfo::FinishAction = FinishAction; } return _p; }

inline ns5__TaskPathInfo * soap_new_set_ns5__TaskPathInfo(struct soap *soap, std::string& TaskPathId, std::string& TaskPathName, std::vector<std::string >& PointList, std::string& TaskPathType, std::string& CreateTime, int FinishAction) { ns5__TaskPathInfo *_p = soap_instantiate_ns5__TaskPathInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__TaskPathInfo::TaskPathId = TaskPathId; _p->ns5__TaskPathInfo::TaskPathName = TaskPathName; _p->ns5__TaskPathInfo::PointList = PointList; _p->ns5__TaskPathInfo::TaskPathType = TaskPathType; _p->ns5__TaskPathInfo::CreateTime = CreateTime; _p->ns5__TaskPathInfo::FinishAction = FinishAction; } return _p; }

inline void soap_delete_ns5__TaskPathInfo(struct soap *soap, ns5__TaskPathInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__TaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__PatrolPointInfos
#define SOAP_TYPE_TaskFinish_ns5__PatrolPointInfos (37)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__PatrolPointInfos(struct soap*, const char*, int, const ns5__PatrolPointInfos *, const char*);
SOAP_FMAC3 ns5__PatrolPointInfos * SOAP_FMAC4 soap_in_ns5__PatrolPointInfos(struct soap*, const char*, ns5__PatrolPointInfos *, const char*);

#ifndef soap_write_ns5__PatrolPointInfos
#define soap_write_ns5__PatrolPointInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:PatrolPointInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__PatrolPointInfos * SOAP_FMAC4 soap_get_ns5__PatrolPointInfos(struct soap*, ns5__PatrolPointInfos *, const char*, const char*);

#ifndef soap_read_ns5__PatrolPointInfos
#define soap_read_ns5__PatrolPointInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__PatrolPointInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__PatrolPointInfos * SOAP_FMAC2 soap_instantiate_ns5__PatrolPointInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__PatrolPointInfos * soap_new_ns5__PatrolPointInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__PatrolPointInfos(soap, n, NULL, NULL, NULL); }

inline ns5__PatrolPointInfos * soap_new_req_ns5__PatrolPointInfos(struct soap *soap) { ns5__PatrolPointInfos *_p = soap_instantiate_ns5__PatrolPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__PatrolPointInfos * soap_new_set_ns5__PatrolPointInfos(struct soap *soap, std::vector<ns5__PatrolPointInfo * >& Infos) { ns5__PatrolPointInfos *_p = soap_instantiate_ns5__PatrolPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__PatrolPointInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__PatrolPointInfos(struct soap *soap, ns5__PatrolPointInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__PatrolPointInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__PatrolPointInfo
#define SOAP_TYPE_TaskFinish_ns5__PatrolPointInfo (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__PatrolPointInfo(struct soap*, const char*, int, const ns5__PatrolPointInfo *, const char*);
SOAP_FMAC3 ns5__PatrolPointInfo * SOAP_FMAC4 soap_in_ns5__PatrolPointInfo(struct soap*, const char*, ns5__PatrolPointInfo *, const char*);

#ifndef soap_write_ns5__PatrolPointInfo
#define soap_write_ns5__PatrolPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:PatrolPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__PatrolPointInfo * SOAP_FMAC4 soap_get_ns5__PatrolPointInfo(struct soap*, ns5__PatrolPointInfo *, const char*, const char*);

#ifndef soap_read_ns5__PatrolPointInfo
#define soap_read_ns5__PatrolPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__PatrolPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__PatrolPointInfo * SOAP_FMAC2 soap_instantiate_ns5__PatrolPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__PatrolPointInfo * soap_new_ns5__PatrolPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__PatrolPointInfo(soap, n, NULL, NULL, NULL); }

inline ns5__PatrolPointInfo * soap_new_req_ns5__PatrolPointInfo(struct soap *soap, std::string& PointId, std::string& PointName, std::string& PointType, std::string& DeviceType, std::string& AreaId, std::string& DockId, std::string& RobotIp) { ns5__PatrolPointInfo *_p = soap_instantiate_ns5__PatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__PatrolPointInfo::PointId = PointId; _p->ns5__PatrolPointInfo::PointName = PointName; _p->ns5__PatrolPointInfo::PointType = PointType; _p->ns5__PatrolPointInfo::DeviceType = DeviceType; _p->ns5__PatrolPointInfo::AreaId = AreaId; _p->ns5__PatrolPointInfo::DockId = DockId; _p->ns5__PatrolPointInfo::RobotIp = RobotIp; } return _p; }

inline ns5__PatrolPointInfo * soap_new_set_ns5__PatrolPointInfo(struct soap *soap, std::string& PointId, std::string& PointName, std::string& PointType, std::string& DeviceType, std::string& AreaId, std::string& DockId, std::string& RobotIp) { ns5__PatrolPointInfo *_p = soap_instantiate_ns5__PatrolPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__PatrolPointInfo::PointId = PointId; _p->ns5__PatrolPointInfo::PointName = PointName; _p->ns5__PatrolPointInfo::PointType = PointType; _p->ns5__PatrolPointInfo::DeviceType = DeviceType; _p->ns5__PatrolPointInfo::AreaId = AreaId; _p->ns5__PatrolPointInfo::DockId = DockId; _p->ns5__PatrolPointInfo::RobotIp = RobotIp; } return _p; }

inline void soap_delete_ns5__PatrolPointInfo(struct soap *soap, ns5__PatrolPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__PatrolPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__DockPointInfos
#define SOAP_TYPE_TaskFinish_ns5__DockPointInfos (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__DockPointInfos(struct soap*, const char*, int, const ns5__DockPointInfos *, const char*);
SOAP_FMAC3 ns5__DockPointInfos * SOAP_FMAC4 soap_in_ns5__DockPointInfos(struct soap*, const char*, ns5__DockPointInfos *, const char*);

#ifndef soap_write_ns5__DockPointInfos
#define soap_write_ns5__DockPointInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:DockPointInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__DockPointInfos * SOAP_FMAC4 soap_get_ns5__DockPointInfos(struct soap*, ns5__DockPointInfos *, const char*, const char*);

#ifndef soap_read_ns5__DockPointInfos
#define soap_read_ns5__DockPointInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__DockPointInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__DockPointInfos * SOAP_FMAC2 soap_instantiate_ns5__DockPointInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__DockPointInfos * soap_new_ns5__DockPointInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__DockPointInfos(soap, n, NULL, NULL, NULL); }

inline ns5__DockPointInfos * soap_new_req_ns5__DockPointInfos(struct soap *soap) { ns5__DockPointInfos *_p = soap_instantiate_ns5__DockPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__DockPointInfos * soap_new_set_ns5__DockPointInfos(struct soap *soap, std::vector<ns5__DockPointInfo * >& Infos) { ns5__DockPointInfos *_p = soap_instantiate_ns5__DockPointInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__DockPointInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__DockPointInfos(struct soap *soap, ns5__DockPointInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__DockPointInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__DockPointInfo
#define SOAP_TYPE_TaskFinish_ns5__DockPointInfo (34)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__DockPointInfo(struct soap*, const char*, int, const ns5__DockPointInfo *, const char*);
SOAP_FMAC3 ns5__DockPointInfo * SOAP_FMAC4 soap_in_ns5__DockPointInfo(struct soap*, const char*, ns5__DockPointInfo *, const char*);

#ifndef soap_write_ns5__DockPointInfo
#define soap_write_ns5__DockPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:DockPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__DockPointInfo * SOAP_FMAC4 soap_get_ns5__DockPointInfo(struct soap*, ns5__DockPointInfo *, const char*, const char*);

#ifndef soap_read_ns5__DockPointInfo
#define soap_read_ns5__DockPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__DockPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__DockPointInfo * SOAP_FMAC2 soap_instantiate_ns5__DockPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__DockPointInfo * soap_new_ns5__DockPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__DockPointInfo(soap, n, NULL, NULL, NULL); }

inline ns5__DockPointInfo * soap_new_req_ns5__DockPointInfo(struct soap *soap, std::string& DockId, std::string& DockX, std::string& DockY) { ns5__DockPointInfo *_p = soap_instantiate_ns5__DockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__DockPointInfo::DockId = DockId; _p->ns5__DockPointInfo::DockX = DockX; _p->ns5__DockPointInfo::DockY = DockY; } return _p; }

inline ns5__DockPointInfo * soap_new_set_ns5__DockPointInfo(struct soap *soap, std::string& DockId, std::string& DockX, std::string& DockY, std::vector<std::string >& PointList) { ns5__DockPointInfo *_p = soap_instantiate_ns5__DockPointInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__DockPointInfo::DockId = DockId; _p->ns5__DockPointInfo::DockX = DockX; _p->ns5__DockPointInfo::DockY = DockY; _p->ns5__DockPointInfo::PointList = PointList; } return _p; }

inline void soap_delete_ns5__DockPointInfo(struct soap *soap, ns5__DockPointInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__DockPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__MapEdgeInfos
#define SOAP_TYPE_TaskFinish_ns5__MapEdgeInfos (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__MapEdgeInfos(struct soap*, const char*, int, const ns5__MapEdgeInfos *, const char*);
SOAP_FMAC3 ns5__MapEdgeInfos * SOAP_FMAC4 soap_in_ns5__MapEdgeInfos(struct soap*, const char*, ns5__MapEdgeInfos *, const char*);

#ifndef soap_write_ns5__MapEdgeInfos
#define soap_write_ns5__MapEdgeInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:MapEdgeInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__MapEdgeInfos * SOAP_FMAC4 soap_get_ns5__MapEdgeInfos(struct soap*, ns5__MapEdgeInfos *, const char*, const char*);

#ifndef soap_read_ns5__MapEdgeInfos
#define soap_read_ns5__MapEdgeInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__MapEdgeInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__MapEdgeInfos * SOAP_FMAC2 soap_instantiate_ns5__MapEdgeInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__MapEdgeInfos * soap_new_ns5__MapEdgeInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__MapEdgeInfos(soap, n, NULL, NULL, NULL); }

inline ns5__MapEdgeInfos * soap_new_req_ns5__MapEdgeInfos(struct soap *soap) { ns5__MapEdgeInfos *_p = soap_instantiate_ns5__MapEdgeInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__MapEdgeInfos * soap_new_set_ns5__MapEdgeInfos(struct soap *soap, std::vector<ns5__MapEdgeInfo * >& Infos) { ns5__MapEdgeInfos *_p = soap_instantiate_ns5__MapEdgeInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__MapEdgeInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__MapEdgeInfos(struct soap *soap, ns5__MapEdgeInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__MapEdgeInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__MapEdgeInfo
#define SOAP_TYPE_TaskFinish_ns5__MapEdgeInfo (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__MapEdgeInfo(struct soap*, const char*, int, const ns5__MapEdgeInfo *, const char*);
SOAP_FMAC3 ns5__MapEdgeInfo * SOAP_FMAC4 soap_in_ns5__MapEdgeInfo(struct soap*, const char*, ns5__MapEdgeInfo *, const char*);

#ifndef soap_write_ns5__MapEdgeInfo
#define soap_write_ns5__MapEdgeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:MapEdgeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__MapEdgeInfo * SOAP_FMAC4 soap_get_ns5__MapEdgeInfo(struct soap*, ns5__MapEdgeInfo *, const char*, const char*);

#ifndef soap_read_ns5__MapEdgeInfo
#define soap_read_ns5__MapEdgeInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__MapEdgeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__MapEdgeInfo * SOAP_FMAC2 soap_instantiate_ns5__MapEdgeInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__MapEdgeInfo * soap_new_ns5__MapEdgeInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__MapEdgeInfo(soap, n, NULL, NULL, NULL); }

inline ns5__MapEdgeInfo * soap_new_req_ns5__MapEdgeInfo(struct soap *soap, std::string& EdgeId, std::string& StartNodeId, std::string& EndNodeId, std::string& StartNodeX, std::string& StartNodeY, std::string& EndNodeX, std::string& EndNodeY, std::string& FirstControlX, std::string& FirstControlY, std::string& SecondControlX, std::string& SecondControlY) { ns5__MapEdgeInfo *_p = soap_instantiate_ns5__MapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__MapEdgeInfo::EdgeId = EdgeId; _p->ns5__MapEdgeInfo::StartNodeId = StartNodeId; _p->ns5__MapEdgeInfo::EndNodeId = EndNodeId; _p->ns5__MapEdgeInfo::StartNodeX = StartNodeX; _p->ns5__MapEdgeInfo::StartNodeY = StartNodeY; _p->ns5__MapEdgeInfo::EndNodeX = EndNodeX; _p->ns5__MapEdgeInfo::EndNodeY = EndNodeY; _p->ns5__MapEdgeInfo::FirstControlX = FirstControlX; _p->ns5__MapEdgeInfo::FirstControlY = FirstControlY; _p->ns5__MapEdgeInfo::SecondControlX = SecondControlX; _p->ns5__MapEdgeInfo::SecondControlY = SecondControlY; } return _p; }

inline ns5__MapEdgeInfo * soap_new_set_ns5__MapEdgeInfo(struct soap *soap, std::string& EdgeId, std::string& StartNodeId, std::string& EndNodeId, std::string& StartNodeX, std::string& StartNodeY, std::string& EndNodeX, std::string& EndNodeY, std::string& FirstControlX, std::string& FirstControlY, std::string& SecondControlX, std::string& SecondControlY) { ns5__MapEdgeInfo *_p = soap_instantiate_ns5__MapEdgeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__MapEdgeInfo::EdgeId = EdgeId; _p->ns5__MapEdgeInfo::StartNodeId = StartNodeId; _p->ns5__MapEdgeInfo::EndNodeId = EndNodeId; _p->ns5__MapEdgeInfo::StartNodeX = StartNodeX; _p->ns5__MapEdgeInfo::StartNodeY = StartNodeY; _p->ns5__MapEdgeInfo::EndNodeX = EndNodeX; _p->ns5__MapEdgeInfo::EndNodeY = EndNodeY; _p->ns5__MapEdgeInfo::FirstControlX = FirstControlX; _p->ns5__MapEdgeInfo::FirstControlY = FirstControlY; _p->ns5__MapEdgeInfo::SecondControlX = SecondControlX; _p->ns5__MapEdgeInfo::SecondControlY = SecondControlY; } return _p; }

inline void soap_delete_ns5__MapEdgeInfo(struct soap *soap, ns5__MapEdgeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__MapEdgeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfos
#define SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfos (31)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__PatrolAreaInfos(struct soap*, const char*, int, const ns5__PatrolAreaInfos *, const char*);
SOAP_FMAC3 ns5__PatrolAreaInfos * SOAP_FMAC4 soap_in_ns5__PatrolAreaInfos(struct soap*, const char*, ns5__PatrolAreaInfos *, const char*);

#ifndef soap_write_ns5__PatrolAreaInfos
#define soap_write_ns5__PatrolAreaInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:PatrolAreaInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__PatrolAreaInfos * SOAP_FMAC4 soap_get_ns5__PatrolAreaInfos(struct soap*, ns5__PatrolAreaInfos *, const char*, const char*);

#ifndef soap_read_ns5__PatrolAreaInfos
#define soap_read_ns5__PatrolAreaInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__PatrolAreaInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__PatrolAreaInfos * SOAP_FMAC2 soap_instantiate_ns5__PatrolAreaInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__PatrolAreaInfos * soap_new_ns5__PatrolAreaInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__PatrolAreaInfos(soap, n, NULL, NULL, NULL); }

inline ns5__PatrolAreaInfos * soap_new_req_ns5__PatrolAreaInfos(struct soap *soap) { ns5__PatrolAreaInfos *_p = soap_instantiate_ns5__PatrolAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__PatrolAreaInfos * soap_new_set_ns5__PatrolAreaInfos(struct soap *soap, std::vector<ns5__PatrolAreaInfo * >& Infos) { ns5__PatrolAreaInfos *_p = soap_instantiate_ns5__PatrolAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__PatrolAreaInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__PatrolAreaInfos(struct soap *soap, ns5__PatrolAreaInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__PatrolAreaInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfo
#define SOAP_TYPE_TaskFinish_ns5__PatrolAreaInfo (30)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__PatrolAreaInfo(struct soap*, const char*, int, const ns5__PatrolAreaInfo *, const char*);
SOAP_FMAC3 ns5__PatrolAreaInfo * SOAP_FMAC4 soap_in_ns5__PatrolAreaInfo(struct soap*, const char*, ns5__PatrolAreaInfo *, const char*);

#ifndef soap_write_ns5__PatrolAreaInfo
#define soap_write_ns5__PatrolAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:PatrolAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__PatrolAreaInfo * SOAP_FMAC4 soap_get_ns5__PatrolAreaInfo(struct soap*, ns5__PatrolAreaInfo *, const char*, const char*);

#ifndef soap_read_ns5__PatrolAreaInfo
#define soap_read_ns5__PatrolAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__PatrolAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__PatrolAreaInfo * SOAP_FMAC2 soap_instantiate_ns5__PatrolAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__PatrolAreaInfo * soap_new_ns5__PatrolAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__PatrolAreaInfo(soap, n, NULL, NULL, NULL); }

inline ns5__PatrolAreaInfo * soap_new_req_ns5__PatrolAreaInfo(struct soap *soap, std::string& AreaId, std::string& AreaName, std::string& ParentId, std::string& RobotIp) { ns5__PatrolAreaInfo *_p = soap_instantiate_ns5__PatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__PatrolAreaInfo::AreaId = AreaId; _p->ns5__PatrolAreaInfo::AreaName = AreaName; _p->ns5__PatrolAreaInfo::ParentId = ParentId; _p->ns5__PatrolAreaInfo::RobotIp = RobotIp; } return _p; }

inline ns5__PatrolAreaInfo * soap_new_set_ns5__PatrolAreaInfo(struct soap *soap, std::string& AreaId, std::string& AreaName, std::string& ParentId, std::string& RobotIp) { ns5__PatrolAreaInfo *_p = soap_instantiate_ns5__PatrolAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__PatrolAreaInfo::AreaId = AreaId; _p->ns5__PatrolAreaInfo::AreaName = AreaName; _p->ns5__PatrolAreaInfo::ParentId = ParentId; _p->ns5__PatrolAreaInfo::RobotIp = RobotIp; } return _p; }

inline void soap_delete_ns5__PatrolAreaInfo(struct soap *soap, ns5__PatrolAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__PatrolAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__MapAreaInfos
#define SOAP_TYPE_TaskFinish_ns5__MapAreaInfos (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__MapAreaInfos(struct soap*, const char*, int, const ns5__MapAreaInfos *, const char*);
SOAP_FMAC3 ns5__MapAreaInfos * SOAP_FMAC4 soap_in_ns5__MapAreaInfos(struct soap*, const char*, ns5__MapAreaInfos *, const char*);

#ifndef soap_write_ns5__MapAreaInfos
#define soap_write_ns5__MapAreaInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:MapAreaInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__MapAreaInfos * SOAP_FMAC4 soap_get_ns5__MapAreaInfos(struct soap*, ns5__MapAreaInfos *, const char*, const char*);

#ifndef soap_read_ns5__MapAreaInfos
#define soap_read_ns5__MapAreaInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__MapAreaInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__MapAreaInfos * SOAP_FMAC2 soap_instantiate_ns5__MapAreaInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__MapAreaInfos * soap_new_ns5__MapAreaInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__MapAreaInfos(soap, n, NULL, NULL, NULL); }

inline ns5__MapAreaInfos * soap_new_req_ns5__MapAreaInfos(struct soap *soap) { ns5__MapAreaInfos *_p = soap_instantiate_ns5__MapAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__MapAreaInfos * soap_new_set_ns5__MapAreaInfos(struct soap *soap, std::vector<ns5__MapAreaInfo * >& Infos) { ns5__MapAreaInfos *_p = soap_instantiate_ns5__MapAreaInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__MapAreaInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__MapAreaInfos(struct soap *soap, ns5__MapAreaInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__MapAreaInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__MapAreaInfo
#define SOAP_TYPE_TaskFinish_ns5__MapAreaInfo (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__MapAreaInfo(struct soap*, const char*, int, const ns5__MapAreaInfo *, const char*);
SOAP_FMAC3 ns5__MapAreaInfo * SOAP_FMAC4 soap_in_ns5__MapAreaInfo(struct soap*, const char*, ns5__MapAreaInfo *, const char*);

#ifndef soap_write_ns5__MapAreaInfo
#define soap_write_ns5__MapAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:MapAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__MapAreaInfo * SOAP_FMAC4 soap_get_ns5__MapAreaInfo(struct soap*, ns5__MapAreaInfo *, const char*, const char*);

#ifndef soap_read_ns5__MapAreaInfo
#define soap_read_ns5__MapAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__MapAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__MapAreaInfo * SOAP_FMAC2 soap_instantiate_ns5__MapAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__MapAreaInfo * soap_new_ns5__MapAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__MapAreaInfo(soap, n, NULL, NULL, NULL); }

inline ns5__MapAreaInfo * soap_new_req_ns5__MapAreaInfo(struct soap *soap, std::string& RobotIp, std::string& AreaId, std::string& AreaName, std::string& AreaMap, std::string& MaxX, std::string& MaxY, std::string& MinX, std::string& MinY, std::string& ParentId) { ns5__MapAreaInfo *_p = soap_instantiate_ns5__MapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__MapAreaInfo::RobotIp = RobotIp; _p->ns5__MapAreaInfo::AreaId = AreaId; _p->ns5__MapAreaInfo::AreaName = AreaName; _p->ns5__MapAreaInfo::AreaMap = AreaMap; _p->ns5__MapAreaInfo::MaxX = MaxX; _p->ns5__MapAreaInfo::MaxY = MaxY; _p->ns5__MapAreaInfo::MinX = MinX; _p->ns5__MapAreaInfo::MinY = MinY; _p->ns5__MapAreaInfo::ParentId = ParentId; } return _p; }

inline ns5__MapAreaInfo * soap_new_set_ns5__MapAreaInfo(struct soap *soap, std::string& RobotIp, std::string& AreaId, std::string& AreaName, std::string& AreaMap, std::string& MaxX, std::string& MaxY, std::string& MinX, std::string& MinY, std::string& ParentId) { ns5__MapAreaInfo *_p = soap_instantiate_ns5__MapAreaInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__MapAreaInfo::RobotIp = RobotIp; _p->ns5__MapAreaInfo::AreaId = AreaId; _p->ns5__MapAreaInfo::AreaName = AreaName; _p->ns5__MapAreaInfo::AreaMap = AreaMap; _p->ns5__MapAreaInfo::MaxX = MaxX; _p->ns5__MapAreaInfo::MaxY = MaxY; _p->ns5__MapAreaInfo::MinX = MinX; _p->ns5__MapAreaInfo::MinY = MinY; _p->ns5__MapAreaInfo::ParentId = ParentId; } return _p; }

inline void soap_delete_ns5__MapAreaInfo(struct soap *soap, ns5__MapAreaInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__MapAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfos (27)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotAlarmInfos(struct soap*, const char*, int, const ns5__RobotAlarmInfos *, const char*);
SOAP_FMAC3 ns5__RobotAlarmInfos * SOAP_FMAC4 soap_in_ns5__RobotAlarmInfos(struct soap*, const char*, ns5__RobotAlarmInfos *, const char*);

#ifndef soap_write_ns5__RobotAlarmInfos
#define soap_write_ns5__RobotAlarmInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotAlarmInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotAlarmInfos * SOAP_FMAC4 soap_get_ns5__RobotAlarmInfos(struct soap*, ns5__RobotAlarmInfos *, const char*, const char*);

#ifndef soap_read_ns5__RobotAlarmInfos
#define soap_read_ns5__RobotAlarmInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotAlarmInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotAlarmInfos * SOAP_FMAC2 soap_instantiate_ns5__RobotAlarmInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotAlarmInfos * soap_new_ns5__RobotAlarmInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotAlarmInfos(soap, n, NULL, NULL, NULL); }

inline ns5__RobotAlarmInfos * soap_new_req_ns5__RobotAlarmInfos(struct soap *soap) { ns5__RobotAlarmInfos *_p = soap_instantiate_ns5__RobotAlarmInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__RobotAlarmInfos * soap_new_set_ns5__RobotAlarmInfos(struct soap *soap, std::vector<ns5__RobotAlarmInfo * >& Infos) { ns5__RobotAlarmInfos *_p = soap_instantiate_ns5__RobotAlarmInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotAlarmInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__RobotAlarmInfos(struct soap *soap, ns5__RobotAlarmInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotAlarmInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotAlarmInfo (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotAlarmInfo(struct soap*, const char*, int, const ns5__RobotAlarmInfo *, const char*);
SOAP_FMAC3 ns5__RobotAlarmInfo * SOAP_FMAC4 soap_in_ns5__RobotAlarmInfo(struct soap*, const char*, ns5__RobotAlarmInfo *, const char*);

#ifndef soap_write_ns5__RobotAlarmInfo
#define soap_write_ns5__RobotAlarmInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotAlarmInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotAlarmInfo * SOAP_FMAC4 soap_get_ns5__RobotAlarmInfo(struct soap*, ns5__RobotAlarmInfo *, const char*, const char*);

#ifndef soap_read_ns5__RobotAlarmInfo
#define soap_read_ns5__RobotAlarmInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotAlarmInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotAlarmInfo * SOAP_FMAC2 soap_instantiate_ns5__RobotAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotAlarmInfo * soap_new_ns5__RobotAlarmInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotAlarmInfo(soap, n, NULL, NULL, NULL); }

inline ns5__RobotAlarmInfo * soap_new_req_ns5__RobotAlarmInfo(struct soap *soap, std::string& AlarmId, std::string& RobotIp, std::string& AlarmType, std::string& AlarmDesc, std::string& AlarmTime) { ns5__RobotAlarmInfo *_p = soap_instantiate_ns5__RobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotAlarmInfo::AlarmId = AlarmId; _p->ns5__RobotAlarmInfo::RobotIp = RobotIp; _p->ns5__RobotAlarmInfo::AlarmType = AlarmType; _p->ns5__RobotAlarmInfo::AlarmDesc = AlarmDesc; _p->ns5__RobotAlarmInfo::AlarmTime = AlarmTime; } return _p; }

inline ns5__RobotAlarmInfo * soap_new_set_ns5__RobotAlarmInfo(struct soap *soap, std::string& AlarmId, std::string& RobotIp, std::string& AlarmType, std::string& AlarmDesc, std::string& AlarmTime) { ns5__RobotAlarmInfo *_p = soap_instantiate_ns5__RobotAlarmInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotAlarmInfo::AlarmId = AlarmId; _p->ns5__RobotAlarmInfo::RobotIp = RobotIp; _p->ns5__RobotAlarmInfo::AlarmType = AlarmType; _p->ns5__RobotAlarmInfo::AlarmDesc = AlarmDesc; _p->ns5__RobotAlarmInfo::AlarmTime = AlarmTime; } return _p; }

inline void soap_delete_ns5__RobotAlarmInfo(struct soap *soap, ns5__RobotAlarmInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotAlarmInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotGasInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotGasInfos (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotGasInfos(struct soap*, const char*, int, const ns5__RobotGasInfos *, const char*);
SOAP_FMAC3 ns5__RobotGasInfos * SOAP_FMAC4 soap_in_ns5__RobotGasInfos(struct soap*, const char*, ns5__RobotGasInfos *, const char*);

#ifndef soap_write_ns5__RobotGasInfos
#define soap_write_ns5__RobotGasInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotGasInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotGasInfos * SOAP_FMAC4 soap_get_ns5__RobotGasInfos(struct soap*, ns5__RobotGasInfos *, const char*, const char*);

#ifndef soap_read_ns5__RobotGasInfos
#define soap_read_ns5__RobotGasInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotGasInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotGasInfos * SOAP_FMAC2 soap_instantiate_ns5__RobotGasInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotGasInfos * soap_new_ns5__RobotGasInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotGasInfos(soap, n, NULL, NULL, NULL); }

inline ns5__RobotGasInfos * soap_new_req_ns5__RobotGasInfos(struct soap *soap) { ns5__RobotGasInfos *_p = soap_instantiate_ns5__RobotGasInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__RobotGasInfos * soap_new_set_ns5__RobotGasInfos(struct soap *soap, std::vector<ns5__RobotGasInfo * >& GasContents) { ns5__RobotGasInfos *_p = soap_instantiate_ns5__RobotGasInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotGasInfos::GasContents = GasContents; } return _p; }

inline void soap_delete_ns5__RobotGasInfos(struct soap *soap, ns5__RobotGasInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotGasInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotGasInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotGasInfo (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotGasInfo(struct soap*, const char*, int, const ns5__RobotGasInfo *, const char*);
SOAP_FMAC3 ns5__RobotGasInfo * SOAP_FMAC4 soap_in_ns5__RobotGasInfo(struct soap*, const char*, ns5__RobotGasInfo *, const char*);

#ifndef soap_write_ns5__RobotGasInfo
#define soap_write_ns5__RobotGasInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotGasInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotGasInfo * SOAP_FMAC4 soap_get_ns5__RobotGasInfo(struct soap*, ns5__RobotGasInfo *, const char*, const char*);

#ifndef soap_read_ns5__RobotGasInfo
#define soap_read_ns5__RobotGasInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotGasInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotGasInfo * SOAP_FMAC2 soap_instantiate_ns5__RobotGasInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotGasInfo * soap_new_ns5__RobotGasInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotGasInfo(soap, n, NULL, NULL, NULL); }

inline ns5__RobotGasInfo * soap_new_req_ns5__RobotGasInfo(struct soap *soap, std::string& robot_ip, std::string& H2S, std::string& CO, std::string& O2, std::string& CH4, std::string& TEMP, std::string& HUM, std::string& PM25, std::string& PM10, std::string& O3, std::string& SF6, std::string& Desc) { ns5__RobotGasInfo *_p = soap_instantiate_ns5__RobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotGasInfo::robot_ip = robot_ip; _p->ns5__RobotGasInfo::H2S = H2S; _p->ns5__RobotGasInfo::CO = CO; _p->ns5__RobotGasInfo::O2 = O2; _p->ns5__RobotGasInfo::CH4 = CH4; _p->ns5__RobotGasInfo::TEMP = TEMP; _p->ns5__RobotGasInfo::HUM = HUM; _p->ns5__RobotGasInfo::PM25 = PM25; _p->ns5__RobotGasInfo::PM10 = PM10; _p->ns5__RobotGasInfo::O3 = O3; _p->ns5__RobotGasInfo::SF6 = SF6; _p->ns5__RobotGasInfo::Desc = Desc; } return _p; }

inline ns5__RobotGasInfo * soap_new_set_ns5__RobotGasInfo(struct soap *soap, std::string& robot_ip, std::string& H2S, std::string& CO, std::string& O2, std::string& CH4, std::string& TEMP, std::string& HUM, std::string& PM25, std::string& PM10, std::string& O3, std::string& SF6, std::string& Desc) { ns5__RobotGasInfo *_p = soap_instantiate_ns5__RobotGasInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotGasInfo::robot_ip = robot_ip; _p->ns5__RobotGasInfo::H2S = H2S; _p->ns5__RobotGasInfo::CO = CO; _p->ns5__RobotGasInfo::O2 = O2; _p->ns5__RobotGasInfo::CH4 = CH4; _p->ns5__RobotGasInfo::TEMP = TEMP; _p->ns5__RobotGasInfo::HUM = HUM; _p->ns5__RobotGasInfo::PM25 = PM25; _p->ns5__RobotGasInfo::PM10 = PM10; _p->ns5__RobotGasInfo::O3 = O3; _p->ns5__RobotGasInfo::SF6 = SF6; _p->ns5__RobotGasInfo::Desc = Desc; } return _p; }

inline void soap_delete_ns5__RobotGasInfo(struct soap *soap, ns5__RobotGasInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotGasInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotMileageInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotMileageInfos (23)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotMileageInfos(struct soap*, const char*, int, const ns5__RobotMileageInfos *, const char*);
SOAP_FMAC3 ns5__RobotMileageInfos * SOAP_FMAC4 soap_in_ns5__RobotMileageInfos(struct soap*, const char*, ns5__RobotMileageInfos *, const char*);

#ifndef soap_write_ns5__RobotMileageInfos
#define soap_write_ns5__RobotMileageInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotMileageInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotMileageInfos * SOAP_FMAC4 soap_get_ns5__RobotMileageInfos(struct soap*, ns5__RobotMileageInfos *, const char*, const char*);

#ifndef soap_read_ns5__RobotMileageInfos
#define soap_read_ns5__RobotMileageInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotMileageInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotMileageInfos * SOAP_FMAC2 soap_instantiate_ns5__RobotMileageInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotMileageInfos * soap_new_ns5__RobotMileageInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotMileageInfos(soap, n, NULL, NULL, NULL); }

inline ns5__RobotMileageInfos * soap_new_req_ns5__RobotMileageInfos(struct soap *soap) { ns5__RobotMileageInfos *_p = soap_instantiate_ns5__RobotMileageInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__RobotMileageInfos * soap_new_set_ns5__RobotMileageInfos(struct soap *soap, std::vector<ns5__RobotMileageInfo * >& Infos) { ns5__RobotMileageInfos *_p = soap_instantiate_ns5__RobotMileageInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotMileageInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__RobotMileageInfos(struct soap *soap, ns5__RobotMileageInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotMileageInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotMileageInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotMileageInfo (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotMileageInfo(struct soap*, const char*, int, const ns5__RobotMileageInfo *, const char*);
SOAP_FMAC3 ns5__RobotMileageInfo * SOAP_FMAC4 soap_in_ns5__RobotMileageInfo(struct soap*, const char*, ns5__RobotMileageInfo *, const char*);

#ifndef soap_write_ns5__RobotMileageInfo
#define soap_write_ns5__RobotMileageInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotMileageInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotMileageInfo * SOAP_FMAC4 soap_get_ns5__RobotMileageInfo(struct soap*, ns5__RobotMileageInfo *, const char*, const char*);

#ifndef soap_read_ns5__RobotMileageInfo
#define soap_read_ns5__RobotMileageInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotMileageInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotMileageInfo * SOAP_FMAC2 soap_instantiate_ns5__RobotMileageInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotMileageInfo * soap_new_ns5__RobotMileageInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotMileageInfo(soap, n, NULL, NULL, NULL); }

inline ns5__RobotMileageInfo * soap_new_req_ns5__RobotMileageInfo(struct soap *soap, std::string& RobotIp, double Mileage) { ns5__RobotMileageInfo *_p = soap_instantiate_ns5__RobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotMileageInfo::RobotIp = RobotIp; _p->ns5__RobotMileageInfo::Mileage = Mileage; } return _p; }

inline ns5__RobotMileageInfo * soap_new_set_ns5__RobotMileageInfo(struct soap *soap, std::string& RobotIp, double Mileage) { ns5__RobotMileageInfo *_p = soap_instantiate_ns5__RobotMileageInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotMileageInfo::RobotIp = RobotIp; _p->ns5__RobotMileageInfo::Mileage = Mileage; } return _p; }

inline void soap_delete_ns5__RobotMileageInfo(struct soap *soap, ns5__RobotMileageInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotMileageInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfos (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotYunTaiInfos(struct soap*, const char*, int, const ns5__RobotYunTaiInfos *, const char*);
SOAP_FMAC3 ns5__RobotYunTaiInfos * SOAP_FMAC4 soap_in_ns5__RobotYunTaiInfos(struct soap*, const char*, ns5__RobotYunTaiInfos *, const char*);

#ifndef soap_write_ns5__RobotYunTaiInfos
#define soap_write_ns5__RobotYunTaiInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotYunTaiInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotYunTaiInfos * SOAP_FMAC4 soap_get_ns5__RobotYunTaiInfos(struct soap*, ns5__RobotYunTaiInfos *, const char*, const char*);

#ifndef soap_read_ns5__RobotYunTaiInfos
#define soap_read_ns5__RobotYunTaiInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotYunTaiInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotYunTaiInfos * SOAP_FMAC2 soap_instantiate_ns5__RobotYunTaiInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotYunTaiInfos * soap_new_ns5__RobotYunTaiInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotYunTaiInfos(soap, n, NULL, NULL, NULL); }

inline ns5__RobotYunTaiInfos * soap_new_req_ns5__RobotYunTaiInfos(struct soap *soap) { ns5__RobotYunTaiInfos *_p = soap_instantiate_ns5__RobotYunTaiInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__RobotYunTaiInfos * soap_new_set_ns5__RobotYunTaiInfos(struct soap *soap, std::vector<ns5__RobotYunTaiInfo * >& Infos) { ns5__RobotYunTaiInfos *_p = soap_instantiate_ns5__RobotYunTaiInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotYunTaiInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__RobotYunTaiInfos(struct soap *soap, ns5__RobotYunTaiInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotYunTaiInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotYunTaiInfo (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotYunTaiInfo(struct soap*, const char*, int, const ns5__RobotYunTaiInfo *, const char*);
SOAP_FMAC3 ns5__RobotYunTaiInfo * SOAP_FMAC4 soap_in_ns5__RobotYunTaiInfo(struct soap*, const char*, ns5__RobotYunTaiInfo *, const char*);

#ifndef soap_write_ns5__RobotYunTaiInfo
#define soap_write_ns5__RobotYunTaiInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotYunTaiInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotYunTaiInfo * SOAP_FMAC4 soap_get_ns5__RobotYunTaiInfo(struct soap*, ns5__RobotYunTaiInfo *, const char*, const char*);

#ifndef soap_read_ns5__RobotYunTaiInfo
#define soap_read_ns5__RobotYunTaiInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotYunTaiInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotYunTaiInfo * SOAP_FMAC2 soap_instantiate_ns5__RobotYunTaiInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotYunTaiInfo * soap_new_ns5__RobotYunTaiInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotYunTaiInfo(soap, n, NULL, NULL, NULL); }

inline ns5__RobotYunTaiInfo * soap_new_req_ns5__RobotYunTaiInfo(struct soap *soap, std::string& RobotIp, std::string& PosPan, std::string& PosTile) { ns5__RobotYunTaiInfo *_p = soap_instantiate_ns5__RobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotYunTaiInfo::RobotIp = RobotIp; _p->ns5__RobotYunTaiInfo::PosPan = PosPan; _p->ns5__RobotYunTaiInfo::PosTile = PosTile; } return _p; }

inline ns5__RobotYunTaiInfo * soap_new_set_ns5__RobotYunTaiInfo(struct soap *soap, std::string& RobotIp, std::string& PosPan, std::string& PosTile) { ns5__RobotYunTaiInfo *_p = soap_instantiate_ns5__RobotYunTaiInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotYunTaiInfo::RobotIp = RobotIp; _p->ns5__RobotYunTaiInfo::PosPan = PosPan; _p->ns5__RobotYunTaiInfo::PosTile = PosTile; } return _p; }

inline void soap_delete_ns5__RobotYunTaiInfo(struct soap *soap, ns5__RobotYunTaiInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotYunTaiInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotPosInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotPosInfos (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotPosInfos(struct soap*, const char*, int, const ns5__RobotPosInfos *, const char*);
SOAP_FMAC3 ns5__RobotPosInfos * SOAP_FMAC4 soap_in_ns5__RobotPosInfos(struct soap*, const char*, ns5__RobotPosInfos *, const char*);

#ifndef soap_write_ns5__RobotPosInfos
#define soap_write_ns5__RobotPosInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotPosInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotPosInfos * SOAP_FMAC4 soap_get_ns5__RobotPosInfos(struct soap*, ns5__RobotPosInfos *, const char*, const char*);

#ifndef soap_read_ns5__RobotPosInfos
#define soap_read_ns5__RobotPosInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotPosInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotPosInfos * SOAP_FMAC2 soap_instantiate_ns5__RobotPosInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotPosInfos * soap_new_ns5__RobotPosInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotPosInfos(soap, n, NULL, NULL, NULL); }

inline ns5__RobotPosInfos * soap_new_req_ns5__RobotPosInfos(struct soap *soap) { ns5__RobotPosInfos *_p = soap_instantiate_ns5__RobotPosInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__RobotPosInfos * soap_new_set_ns5__RobotPosInfos(struct soap *soap, std::vector<ns5__RobotPosInfo * >& Infos) { ns5__RobotPosInfos *_p = soap_instantiate_ns5__RobotPosInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotPosInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__RobotPosInfos(struct soap *soap, ns5__RobotPosInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotPosInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotPosInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotPosInfo (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotPosInfo(struct soap*, const char*, int, const ns5__RobotPosInfo *, const char*);
SOAP_FMAC3 ns5__RobotPosInfo * SOAP_FMAC4 soap_in_ns5__RobotPosInfo(struct soap*, const char*, ns5__RobotPosInfo *, const char*);

#ifndef soap_write_ns5__RobotPosInfo
#define soap_write_ns5__RobotPosInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotPosInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotPosInfo * SOAP_FMAC4 soap_get_ns5__RobotPosInfo(struct soap*, ns5__RobotPosInfo *, const char*, const char*);

#ifndef soap_read_ns5__RobotPosInfo
#define soap_read_ns5__RobotPosInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotPosInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotPosInfo * SOAP_FMAC2 soap_instantiate_ns5__RobotPosInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotPosInfo * soap_new_ns5__RobotPosInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotPosInfo(soap, n, NULL, NULL, NULL); }

inline ns5__RobotPosInfo * soap_new_req_ns5__RobotPosInfo(struct soap *soap, std::string& RobotIp, std::string& PosX, std::string& PosY, std::string& Angle, std::string& EdgeID, std::string& Precent) { ns5__RobotPosInfo *_p = soap_instantiate_ns5__RobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotPosInfo::RobotIp = RobotIp; _p->ns5__RobotPosInfo::PosX = PosX; _p->ns5__RobotPosInfo::PosY = PosY; _p->ns5__RobotPosInfo::Angle = Angle; _p->ns5__RobotPosInfo::EdgeID = EdgeID; _p->ns5__RobotPosInfo::Precent = Precent; } return _p; }

inline ns5__RobotPosInfo * soap_new_set_ns5__RobotPosInfo(struct soap *soap, std::string& RobotIp, std::string& PosX, std::string& PosY, std::string& Angle, std::string& EdgeID, std::string& Precent) { ns5__RobotPosInfo *_p = soap_instantiate_ns5__RobotPosInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotPosInfo::RobotIp = RobotIp; _p->ns5__RobotPosInfo::PosX = PosX; _p->ns5__RobotPosInfo::PosY = PosY; _p->ns5__RobotPosInfo::Angle = Angle; _p->ns5__RobotPosInfo::EdgeID = EdgeID; _p->ns5__RobotPosInfo::Precent = Precent; } return _p; }

inline void soap_delete_ns5__RobotPosInfo(struct soap *soap, ns5__RobotPosInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotPosInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotTaskStates
#define SOAP_TYPE_TaskFinish_ns5__RobotTaskStates (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotTaskStates(struct soap*, const char*, int, const ns5__RobotTaskStates *, const char*);
SOAP_FMAC3 ns5__RobotTaskStates * SOAP_FMAC4 soap_in_ns5__RobotTaskStates(struct soap*, const char*, ns5__RobotTaskStates *, const char*);

#ifndef soap_write_ns5__RobotTaskStates
#define soap_write_ns5__RobotTaskStates(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotTaskStates", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotTaskStates * SOAP_FMAC4 soap_get_ns5__RobotTaskStates(struct soap*, ns5__RobotTaskStates *, const char*, const char*);

#ifndef soap_read_ns5__RobotTaskStates
#define soap_read_ns5__RobotTaskStates(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotTaskStates(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotTaskStates * SOAP_FMAC2 soap_instantiate_ns5__RobotTaskStates(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotTaskStates * soap_new_ns5__RobotTaskStates(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotTaskStates(soap, n, NULL, NULL, NULL); }

inline ns5__RobotTaskStates * soap_new_req_ns5__RobotTaskStates(struct soap *soap) { ns5__RobotTaskStates *_p = soap_instantiate_ns5__RobotTaskStates(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__RobotTaskStates * soap_new_set_ns5__RobotTaskStates(struct soap *soap, std::vector<ns5__RobotTaskState * >& States) { ns5__RobotTaskStates *_p = soap_instantiate_ns5__RobotTaskStates(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotTaskStates::States = States; } return _p; }

inline void soap_delete_ns5__RobotTaskStates(struct soap *soap, ns5__RobotTaskStates *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotTaskStates(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotTaskState
#define SOAP_TYPE_TaskFinish_ns5__RobotTaskState (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotTaskState(struct soap*, const char*, int, const ns5__RobotTaskState *, const char*);
SOAP_FMAC3 ns5__RobotTaskState * SOAP_FMAC4 soap_in_ns5__RobotTaskState(struct soap*, const char*, ns5__RobotTaskState *, const char*);

#ifndef soap_write_ns5__RobotTaskState
#define soap_write_ns5__RobotTaskState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotTaskState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotTaskState * SOAP_FMAC4 soap_get_ns5__RobotTaskState(struct soap*, ns5__RobotTaskState *, const char*, const char*);

#ifndef soap_read_ns5__RobotTaskState
#define soap_read_ns5__RobotTaskState(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotTaskState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotTaskState * SOAP_FMAC2 soap_instantiate_ns5__RobotTaskState(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotTaskState * soap_new_ns5__RobotTaskState(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotTaskState(soap, n, NULL, NULL, NULL); }

inline ns5__RobotTaskState * soap_new_req_ns5__RobotTaskState(struct soap *soap, std::string& RobotIp, std::string& TaskId, std::string& TaskType, std::string& TaskDesc) { ns5__RobotTaskState *_p = soap_instantiate_ns5__RobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotTaskState::RobotIp = RobotIp; _p->ns5__RobotTaskState::TaskId = TaskId; _p->ns5__RobotTaskState::TaskType = TaskType; _p->ns5__RobotTaskState::TaskDesc = TaskDesc; } return _p; }

inline ns5__RobotTaskState * soap_new_set_ns5__RobotTaskState(struct soap *soap, std::string& RobotIp, std::string& TaskId, std::string& TaskType, std::string& TaskDesc) { ns5__RobotTaskState *_p = soap_instantiate_ns5__RobotTaskState(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotTaskState::RobotIp = RobotIp; _p->ns5__RobotTaskState::TaskId = TaskId; _p->ns5__RobotTaskState::TaskType = TaskType; _p->ns5__RobotTaskState::TaskDesc = TaskDesc; } return _p; }

inline void soap_delete_ns5__RobotTaskState(struct soap *soap, ns5__RobotTaskState *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotTaskState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__SpeedInfos
#define SOAP_TYPE_TaskFinish_ns5__SpeedInfos (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SpeedInfos(struct soap*, const char*, int, const ns5__SpeedInfos *, const char*);
SOAP_FMAC3 ns5__SpeedInfos * SOAP_FMAC4 soap_in_ns5__SpeedInfos(struct soap*, const char*, ns5__SpeedInfos *, const char*);

#ifndef soap_write_ns5__SpeedInfos
#define soap_write_ns5__SpeedInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:SpeedInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__SpeedInfos * SOAP_FMAC4 soap_get_ns5__SpeedInfos(struct soap*, ns5__SpeedInfos *, const char*, const char*);

#ifndef soap_read_ns5__SpeedInfos
#define soap_read_ns5__SpeedInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__SpeedInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__SpeedInfos * SOAP_FMAC2 soap_instantiate_ns5__SpeedInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SpeedInfos * soap_new_ns5__SpeedInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__SpeedInfos(soap, n, NULL, NULL, NULL); }

inline ns5__SpeedInfos * soap_new_req_ns5__SpeedInfos(struct soap *soap) { ns5__SpeedInfos *_p = soap_instantiate_ns5__SpeedInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__SpeedInfos * soap_new_set_ns5__SpeedInfos(struct soap *soap, std::vector<ns5__SpeedInfo * >& Infos) { ns5__SpeedInfos *_p = soap_instantiate_ns5__SpeedInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__SpeedInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__SpeedInfos(struct soap *soap, ns5__SpeedInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__SpeedInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__SpeedInfo
#define SOAP_TYPE_TaskFinish_ns5__SpeedInfo (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__SpeedInfo(struct soap*, const char*, int, const ns5__SpeedInfo *, const char*);
SOAP_FMAC3 ns5__SpeedInfo * SOAP_FMAC4 soap_in_ns5__SpeedInfo(struct soap*, const char*, ns5__SpeedInfo *, const char*);

#ifndef soap_write_ns5__SpeedInfo
#define soap_write_ns5__SpeedInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:SpeedInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__SpeedInfo * SOAP_FMAC4 soap_get_ns5__SpeedInfo(struct soap*, ns5__SpeedInfo *, const char*, const char*);

#ifndef soap_read_ns5__SpeedInfo
#define soap_read_ns5__SpeedInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__SpeedInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__SpeedInfo * SOAP_FMAC2 soap_instantiate_ns5__SpeedInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__SpeedInfo * soap_new_ns5__SpeedInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__SpeedInfo(soap, n, NULL, NULL, NULL); }

inline ns5__SpeedInfo * soap_new_req_ns5__SpeedInfo(struct soap *soap, std::string& RobotIp, double Speed) { ns5__SpeedInfo *_p = soap_instantiate_ns5__SpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__SpeedInfo::RobotIp = RobotIp; _p->ns5__SpeedInfo::Speed = Speed; } return _p; }

inline ns5__SpeedInfo * soap_new_set_ns5__SpeedInfo(struct soap *soap, std::string& RobotIp, double Speed) { ns5__SpeedInfo *_p = soap_instantiate_ns5__SpeedInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__SpeedInfo::RobotIp = RobotIp; _p->ns5__SpeedInfo::Speed = Speed; } return _p; }

inline void soap_delete_ns5__SpeedInfo(struct soap *soap, ns5__SpeedInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__SpeedInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__BatteryInfos
#define SOAP_TYPE_TaskFinish_ns5__BatteryInfos (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__BatteryInfos(struct soap*, const char*, int, const ns5__BatteryInfos *, const char*);
SOAP_FMAC3 ns5__BatteryInfos * SOAP_FMAC4 soap_in_ns5__BatteryInfos(struct soap*, const char*, ns5__BatteryInfos *, const char*);

#ifndef soap_write_ns5__BatteryInfos
#define soap_write_ns5__BatteryInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:BatteryInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__BatteryInfos * SOAP_FMAC4 soap_get_ns5__BatteryInfos(struct soap*, ns5__BatteryInfos *, const char*, const char*);

#ifndef soap_read_ns5__BatteryInfos
#define soap_read_ns5__BatteryInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__BatteryInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__BatteryInfos * SOAP_FMAC2 soap_instantiate_ns5__BatteryInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__BatteryInfos * soap_new_ns5__BatteryInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__BatteryInfos(soap, n, NULL, NULL, NULL); }

inline ns5__BatteryInfos * soap_new_req_ns5__BatteryInfos(struct soap *soap) { ns5__BatteryInfos *_p = soap_instantiate_ns5__BatteryInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__BatteryInfos * soap_new_set_ns5__BatteryInfos(struct soap *soap, std::vector<ns5__BatteryInfo * >& Infos) { ns5__BatteryInfos *_p = soap_instantiate_ns5__BatteryInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__BatteryInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__BatteryInfos(struct soap *soap, ns5__BatteryInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__BatteryInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__BatteryInfo
#define SOAP_TYPE_TaskFinish_ns5__BatteryInfo (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__BatteryInfo(struct soap*, const char*, int, const ns5__BatteryInfo *, const char*);
SOAP_FMAC3 ns5__BatteryInfo * SOAP_FMAC4 soap_in_ns5__BatteryInfo(struct soap*, const char*, ns5__BatteryInfo *, const char*);

#ifndef soap_write_ns5__BatteryInfo
#define soap_write_ns5__BatteryInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:BatteryInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__BatteryInfo * SOAP_FMAC4 soap_get_ns5__BatteryInfo(struct soap*, ns5__BatteryInfo *, const char*, const char*);

#ifndef soap_read_ns5__BatteryInfo
#define soap_read_ns5__BatteryInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__BatteryInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__BatteryInfo * SOAP_FMAC2 soap_instantiate_ns5__BatteryInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__BatteryInfo * soap_new_ns5__BatteryInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__BatteryInfo(soap, n, NULL, NULL, NULL); }

inline ns5__BatteryInfo * soap_new_req_ns5__BatteryInfo(struct soap *soap, std::string& RobotIp, double BatteryValue, double BatteryPercent) { ns5__BatteryInfo *_p = soap_instantiate_ns5__BatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__BatteryInfo::RobotIp = RobotIp; _p->ns5__BatteryInfo::BatteryValue = BatteryValue; _p->ns5__BatteryInfo::BatteryPercent = BatteryPercent; } return _p; }

inline ns5__BatteryInfo * soap_new_set_ns5__BatteryInfo(struct soap *soap, std::string& RobotIp, double BatteryValue, double BatteryPercent) { ns5__BatteryInfo *_p = soap_instantiate_ns5__BatteryInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__BatteryInfo::RobotIp = RobotIp; _p->ns5__BatteryInfo::BatteryValue = BatteryValue; _p->ns5__BatteryInfo::BatteryPercent = BatteryPercent; } return _p; }

inline void soap_delete_ns5__BatteryInfo(struct soap *soap, ns5__BatteryInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__BatteryInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotInfos
#define SOAP_TYPE_TaskFinish_ns5__RobotInfos (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotInfos(struct soap*, const char*, int, const ns5__RobotInfos *, const char*);
SOAP_FMAC3 ns5__RobotInfos * SOAP_FMAC4 soap_in_ns5__RobotInfos(struct soap*, const char*, ns5__RobotInfos *, const char*);

#ifndef soap_write_ns5__RobotInfos
#define soap_write_ns5__RobotInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotInfos * SOAP_FMAC4 soap_get_ns5__RobotInfos(struct soap*, ns5__RobotInfos *, const char*, const char*);

#ifndef soap_read_ns5__RobotInfos
#define soap_read_ns5__RobotInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotInfos * SOAP_FMAC2 soap_instantiate_ns5__RobotInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotInfos * soap_new_ns5__RobotInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotInfos(soap, n, NULL, NULL, NULL); }

inline ns5__RobotInfos * soap_new_req_ns5__RobotInfos(struct soap *soap) { ns5__RobotInfos *_p = soap_instantiate_ns5__RobotInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__RobotInfos * soap_new_set_ns5__RobotInfos(struct soap *soap, std::vector<ns5__RobotInfo * >& Infos) { ns5__RobotInfos *_p = soap_instantiate_ns5__RobotInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__RobotInfos(struct soap *soap, ns5__RobotInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__RobotInfo
#define SOAP_TYPE_TaskFinish_ns5__RobotInfo (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__RobotInfo(struct soap*, const char*, int, const ns5__RobotInfo *, const char*);
SOAP_FMAC3 ns5__RobotInfo * SOAP_FMAC4 soap_in_ns5__RobotInfo(struct soap*, const char*, ns5__RobotInfo *, const char*);

#ifndef soap_write_ns5__RobotInfo
#define soap_write_ns5__RobotInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:RobotInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotInfo * SOAP_FMAC4 soap_get_ns5__RobotInfo(struct soap*, ns5__RobotInfo *, const char*, const char*);

#ifndef soap_read_ns5__RobotInfo
#define soap_read_ns5__RobotInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__RobotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__RobotInfo * SOAP_FMAC2 soap_instantiate_ns5__RobotInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__RobotInfo * soap_new_ns5__RobotInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__RobotInfo(soap, n, NULL, NULL, NULL); }

inline ns5__RobotInfo * soap_new_req_ns5__RobotInfo(struct soap *soap, std::string& RobotName, std::string& RobotIp, std::string& CameraIp, int CameraPort, std::string& FlirIp, int FlirPort, std::string& CameraUser, std::string& CameraPassword, std::string& FlirUser, std::string& FlirPassword) { ns5__RobotInfo *_p = soap_instantiate_ns5__RobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotInfo::RobotName = RobotName; _p->ns5__RobotInfo::RobotIp = RobotIp; _p->ns5__RobotInfo::CameraIp = CameraIp; _p->ns5__RobotInfo::CameraPort = CameraPort; _p->ns5__RobotInfo::FlirIp = FlirIp; _p->ns5__RobotInfo::FlirPort = FlirPort; _p->ns5__RobotInfo::CameraUser = CameraUser; _p->ns5__RobotInfo::CameraPassword = CameraPassword; _p->ns5__RobotInfo::FlirUser = FlirUser; _p->ns5__RobotInfo::FlirPassword = FlirPassword; } return _p; }

inline ns5__RobotInfo * soap_new_set_ns5__RobotInfo(struct soap *soap, std::string& RobotName, std::string& RobotIp, std::string& CameraIp, int CameraPort, std::string& FlirIp, int FlirPort, std::string& CameraUser, std::string& CameraPassword, std::string& FlirUser, std::string& FlirPassword) { ns5__RobotInfo *_p = soap_instantiate_ns5__RobotInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__RobotInfo::RobotName = RobotName; _p->ns5__RobotInfo::RobotIp = RobotIp; _p->ns5__RobotInfo::CameraIp = CameraIp; _p->ns5__RobotInfo::CameraPort = CameraPort; _p->ns5__RobotInfo::FlirIp = FlirIp; _p->ns5__RobotInfo::FlirPort = FlirPort; _p->ns5__RobotInfo::CameraUser = CameraUser; _p->ns5__RobotInfo::CameraPassword = CameraPassword; _p->ns5__RobotInfo::FlirUser = FlirUser; _p->ns5__RobotInfo::FlirPassword = FlirPassword; } return _p; }

inline void soap_delete_ns5__RobotInfo(struct soap *soap, ns5__RobotInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__RobotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__ConnectInfos
#define SOAP_TYPE_TaskFinish_ns5__ConnectInfos (9)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ConnectInfos(struct soap*, const char*, int, const ns5__ConnectInfos *, const char*);
SOAP_FMAC3 ns5__ConnectInfos * SOAP_FMAC4 soap_in_ns5__ConnectInfos(struct soap*, const char*, ns5__ConnectInfos *, const char*);

#ifndef soap_write_ns5__ConnectInfos
#define soap_write_ns5__ConnectInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:ConnectInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__ConnectInfos * SOAP_FMAC4 soap_get_ns5__ConnectInfos(struct soap*, ns5__ConnectInfos *, const char*, const char*);

#ifndef soap_read_ns5__ConnectInfos
#define soap_read_ns5__ConnectInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__ConnectInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__ConnectInfos * SOAP_FMAC2 soap_instantiate_ns5__ConnectInfos(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ConnectInfos * soap_new_ns5__ConnectInfos(struct soap *soap, int n = -1) { return soap_instantiate_ns5__ConnectInfos(soap, n, NULL, NULL, NULL); }

inline ns5__ConnectInfos * soap_new_req_ns5__ConnectInfos(struct soap *soap) { ns5__ConnectInfos *_p = soap_instantiate_ns5__ConnectInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__ConnectInfos * soap_new_set_ns5__ConnectInfos(struct soap *soap, std::vector<ns5__ConnectInfo * >& Infos) { ns5__ConnectInfos *_p = soap_instantiate_ns5__ConnectInfos(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__ConnectInfos::Infos = Infos; } return _p; }

inline void soap_delete_ns5__ConnectInfos(struct soap *soap, ns5__ConnectInfos *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ConnectInfos(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_ns5__ConnectInfo
#define SOAP_TYPE_TaskFinish_ns5__ConnectInfo (8)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ConnectInfo(struct soap*, const char*, int, const ns5__ConnectInfo *, const char*);
SOAP_FMAC3 ns5__ConnectInfo * SOAP_FMAC4 soap_in_ns5__ConnectInfo(struct soap*, const char*, ns5__ConnectInfo *, const char*);

#ifndef soap_write_ns5__ConnectInfo
#define soap_write_ns5__ConnectInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns5:ConnectInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__ConnectInfo * SOAP_FMAC4 soap_get_ns5__ConnectInfo(struct soap*, ns5__ConnectInfo *, const char*, const char*);

#ifndef soap_read_ns5__ConnectInfo
#define soap_read_ns5__ConnectInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_ns5__ConnectInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns5__ConnectInfo * SOAP_FMAC2 soap_instantiate_ns5__ConnectInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ConnectInfo * soap_new_ns5__ConnectInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__ConnectInfo(soap, n, NULL, NULL, NULL); }

inline ns5__ConnectInfo * soap_new_req_ns5__ConnectInfo(struct soap *soap, std::string& RobotIp, bool State, std::string& ConnectDesc) { ns5__ConnectInfo *_p = soap_instantiate_ns5__ConnectInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__ConnectInfo::RobotIp = RobotIp; _p->ns5__ConnectInfo::State = State; _p->ns5__ConnectInfo::ConnectDesc = ConnectDesc; } return _p; }

inline ns5__ConnectInfo * soap_new_set_ns5__ConnectInfo(struct soap *soap, std::string& RobotIp, bool State, std::string& ConnectDesc) { ns5__ConnectInfo *_p = soap_instantiate_ns5__ConnectInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__ConnectInfo::RobotIp = RobotIp; _p->ns5__ConnectInfo::State = State; _p->ns5__ConnectInfo::ConnectDesc = ConnectDesc; } return _p; }

inline void soap_delete_ns5__ConnectInfo(struct soap *soap, ns5__ConnectInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ConnectInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Fault
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Fault (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_SOAP_ENV__Fault(soap, data),0) || TaskFinish::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Reason
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Reason (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_SOAP_ENV__Reason(soap, data),0) || TaskFinish::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Detail
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Detail (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_SOAP_ENV__Detail(soap, data),0) || TaskFinish::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Code
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Code (109)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_SOAP_ENV__Code(soap, data),0) || TaskFinish::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_SOAP_ENV__Header
#define SOAP_TYPE_TaskFinish_SOAP_ENV__Header (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_SOAP_ENV__Header(soap, data),0) || TaskFinish::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_TaskFinish___ns1__GetTaskExcuteInfoByTaskId
#define SOAP_TYPE_TaskFinish___ns1__GetTaskExcuteInfoByTaskId (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTaskExcuteInfoByTaskId(struct soap*, struct __ns1__GetTaskExcuteInfoByTaskId *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTaskExcuteInfoByTaskId(struct soap*, const struct __ns1__GetTaskExcuteInfoByTaskId *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTaskExcuteInfoByTaskId(struct soap*, const char*, int, const struct __ns1__GetTaskExcuteInfoByTaskId *, const char*);
SOAP_FMAC3 struct __ns1__GetTaskExcuteInfoByTaskId * SOAP_FMAC4 soap_in___ns1__GetTaskExcuteInfoByTaskId(struct soap*, const char*, struct __ns1__GetTaskExcuteInfoByTaskId *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTaskExcuteInfoByTaskId(struct soap*, const struct __ns1__GetTaskExcuteInfoByTaskId *, const char*, const char*);

#ifndef soap_write___ns1__GetTaskExcuteInfoByTaskId
#define soap_write___ns1__GetTaskExcuteInfoByTaskId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize___ns1__GetTaskExcuteInfoByTaskId(soap, data),0) || TaskFinish::soap_put___ns1__GetTaskExcuteInfoByTaskId(soap, data, "-ns1:GetTaskExcuteInfoByTaskId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetTaskExcuteInfoByTaskId * SOAP_FMAC4 soap_get___ns1__GetTaskExcuteInfoByTaskId(struct soap*, struct __ns1__GetTaskExcuteInfoByTaskId *, const char*, const char*);

#ifndef soap_read___ns1__GetTaskExcuteInfoByTaskId
#define soap_read___ns1__GetTaskExcuteInfoByTaskId(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get___ns1__GetTaskExcuteInfoByTaskId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetTaskExcuteInfoByTaskId * SOAP_FMAC2 soap_instantiate___ns1__GetTaskExcuteInfoByTaskId(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTaskExcuteInfoByTaskId * soap_new___ns1__GetTaskExcuteInfoByTaskId(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetTaskExcuteInfoByTaskId(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetTaskExcuteInfoByTaskId * soap_new_req___ns1__GetTaskExcuteInfoByTaskId(struct soap *soap) { struct __ns1__GetTaskExcuteInfoByTaskId *_p = soap_instantiate___ns1__GetTaskExcuteInfoByTaskId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTaskExcuteInfoByTaskId(soap, _p); } return _p; }

inline struct __ns1__GetTaskExcuteInfoByTaskId * soap_new_set___ns1__GetTaskExcuteInfoByTaskId(struct soap *soap, _ns5__GetTaskExcuteInfoByTaskId *ns5__GetTaskExcuteInfoByTaskId) { struct __ns1__GetTaskExcuteInfoByTaskId *_p = soap_instantiate___ns1__GetTaskExcuteInfoByTaskId(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTaskExcuteInfoByTaskId(soap, _p); _p->ns5__GetTaskExcuteInfoByTaskId = ns5__GetTaskExcuteInfoByTaskId; } return _p; }

inline void soap_delete___ns1__GetTaskExcuteInfoByTaskId(struct soap *soap, struct __ns1__GetTaskExcuteInfoByTaskId *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTaskExcuteInfoByTaskId(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish___ns1__GetTaskFinishInfoByTime
#define SOAP_TYPE_TaskFinish___ns1__GetTaskFinishInfoByTime (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTaskFinishInfoByTime(struct soap*, struct __ns1__GetTaskFinishInfoByTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTaskFinishInfoByTime(struct soap*, const struct __ns1__GetTaskFinishInfoByTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTaskFinishInfoByTime(struct soap*, const char*, int, const struct __ns1__GetTaskFinishInfoByTime *, const char*);
SOAP_FMAC3 struct __ns1__GetTaskFinishInfoByTime * SOAP_FMAC4 soap_in___ns1__GetTaskFinishInfoByTime(struct soap*, const char*, struct __ns1__GetTaskFinishInfoByTime *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTaskFinishInfoByTime(struct soap*, const struct __ns1__GetTaskFinishInfoByTime *, const char*, const char*);

#ifndef soap_write___ns1__GetTaskFinishInfoByTime
#define soap_write___ns1__GetTaskFinishInfoByTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize___ns1__GetTaskFinishInfoByTime(soap, data),0) || TaskFinish::soap_put___ns1__GetTaskFinishInfoByTime(soap, data, "-ns1:GetTaskFinishInfoByTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetTaskFinishInfoByTime * SOAP_FMAC4 soap_get___ns1__GetTaskFinishInfoByTime(struct soap*, struct __ns1__GetTaskFinishInfoByTime *, const char*, const char*);

#ifndef soap_read___ns1__GetTaskFinishInfoByTime
#define soap_read___ns1__GetTaskFinishInfoByTime(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get___ns1__GetTaskFinishInfoByTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetTaskFinishInfoByTime * SOAP_FMAC2 soap_instantiate___ns1__GetTaskFinishInfoByTime(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTaskFinishInfoByTime * soap_new___ns1__GetTaskFinishInfoByTime(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetTaskFinishInfoByTime(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetTaskFinishInfoByTime * soap_new_req___ns1__GetTaskFinishInfoByTime(struct soap *soap) { struct __ns1__GetTaskFinishInfoByTime *_p = soap_instantiate___ns1__GetTaskFinishInfoByTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTaskFinishInfoByTime(soap, _p); } return _p; }

inline struct __ns1__GetTaskFinishInfoByTime * soap_new_set___ns1__GetTaskFinishInfoByTime(struct soap *soap, _ns5__GetTaskFinishInfoByTime *ns5__GetTaskFinishInfoByTime) { struct __ns1__GetTaskFinishInfoByTime *_p = soap_instantiate___ns1__GetTaskFinishInfoByTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTaskFinishInfoByTime(soap, _p); _p->ns5__GetTaskFinishInfoByTime = ns5__GetTaskFinishInfoByTime; } return _p; }

inline void soap_delete___ns1__GetTaskFinishInfoByTime(struct soap *soap, struct __ns1__GetTaskFinishInfoByTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTaskFinishInfoByTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_TaskFinish_PointerToSOAP_ENV__Reason (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || TaskFinish::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_TaskFinish_PointerToSOAP_ENV__Detail (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || TaskFinish::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_TaskFinish_PointerToSOAP_ENV__Code
#define SOAP_TYPE_TaskFinish_PointerToSOAP_ENV__Code (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || TaskFinish::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_TaskFinish_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse
#define SOAP_TYPE_TaskFinish_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse (105)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, _ns5__GetTaskExcuteInfoByTaskIdResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, const char *, int, _ns5__GetTaskExcuteInfoByTaskIdResponse *const*, const char *);
SOAP_FMAC3 _ns5__GetTaskExcuteInfoByTaskIdResponse ** SOAP_FMAC4 soap_in_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, const char*, _ns5__GetTaskExcuteInfoByTaskIdResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, _ns5__GetTaskExcuteInfoByTaskIdResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse
#define soap_write_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(soap, data),0) || TaskFinish::soap_put_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(soap, data, "ns5:GetTaskExcuteInfoByTaskIdResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__GetTaskExcuteInfoByTaskIdResponse ** SOAP_FMAC4 soap_get_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(struct soap*, _ns5__GetTaskExcuteInfoByTaskIdResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse
#define soap_read_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTo_ns5__GetTaskExcuteInfoByTaskIdResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTo_ns5__GetTaskExcuteInfoByTaskId
#define SOAP_TYPE_TaskFinish_PointerTo_ns5__GetTaskExcuteInfoByTaskId (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__GetTaskExcuteInfoByTaskId(struct soap*, _ns5__GetTaskExcuteInfoByTaskId *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__GetTaskExcuteInfoByTaskId(struct soap*, const char *, int, _ns5__GetTaskExcuteInfoByTaskId *const*, const char *);
SOAP_FMAC3 _ns5__GetTaskExcuteInfoByTaskId ** SOAP_FMAC4 soap_in_PointerTo_ns5__GetTaskExcuteInfoByTaskId(struct soap*, const char*, _ns5__GetTaskExcuteInfoByTaskId **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__GetTaskExcuteInfoByTaskId(struct soap*, _ns5__GetTaskExcuteInfoByTaskId *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns5__GetTaskExcuteInfoByTaskId
#define soap_write_PointerTo_ns5__GetTaskExcuteInfoByTaskId(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTo_ns5__GetTaskExcuteInfoByTaskId(soap, data),0) || TaskFinish::soap_put_PointerTo_ns5__GetTaskExcuteInfoByTaskId(soap, data, "ns5:GetTaskExcuteInfoByTaskId", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__GetTaskExcuteInfoByTaskId ** SOAP_FMAC4 soap_get_PointerTo_ns5__GetTaskExcuteInfoByTaskId(struct soap*, _ns5__GetTaskExcuteInfoByTaskId **, const char*, const char*);

#ifndef soap_read_PointerTo_ns5__GetTaskExcuteInfoByTaskId
#define soap_read_PointerTo_ns5__GetTaskExcuteInfoByTaskId(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTo_ns5__GetTaskExcuteInfoByTaskId(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTo_ns5__GetTaskFinishInfoByTimeResponse
#define SOAP_TYPE_TaskFinish_PointerTo_ns5__GetTaskFinishInfoByTimeResponse (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(struct soap*, _ns5__GetTaskFinishInfoByTimeResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(struct soap*, const char *, int, _ns5__GetTaskFinishInfoByTimeResponse *const*, const char *);
SOAP_FMAC3 _ns5__GetTaskFinishInfoByTimeResponse ** SOAP_FMAC4 soap_in_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(struct soap*, const char*, _ns5__GetTaskFinishInfoByTimeResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(struct soap*, _ns5__GetTaskFinishInfoByTimeResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns5__GetTaskFinishInfoByTimeResponse
#define soap_write_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(soap, data),0) || TaskFinish::soap_put_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(soap, data, "ns5:GetTaskFinishInfoByTimeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__GetTaskFinishInfoByTimeResponse ** SOAP_FMAC4 soap_get_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(struct soap*, _ns5__GetTaskFinishInfoByTimeResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns5__GetTaskFinishInfoByTimeResponse
#define soap_read_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTo_ns5__GetTaskFinishInfoByTimeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTo_ns5__GetTaskFinishInfoByTime
#define SOAP_TYPE_TaskFinish_PointerTo_ns5__GetTaskFinishInfoByTime (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns5__GetTaskFinishInfoByTime(struct soap*, _ns5__GetTaskFinishInfoByTime *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns5__GetTaskFinishInfoByTime(struct soap*, const char *, int, _ns5__GetTaskFinishInfoByTime *const*, const char *);
SOAP_FMAC3 _ns5__GetTaskFinishInfoByTime ** SOAP_FMAC4 soap_in_PointerTo_ns5__GetTaskFinishInfoByTime(struct soap*, const char*, _ns5__GetTaskFinishInfoByTime **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns5__GetTaskFinishInfoByTime(struct soap*, _ns5__GetTaskFinishInfoByTime *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns5__GetTaskFinishInfoByTime
#define soap_write_PointerTo_ns5__GetTaskFinishInfoByTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTo_ns5__GetTaskFinishInfoByTime(soap, data),0) || TaskFinish::soap_put_PointerTo_ns5__GetTaskFinishInfoByTime(soap, data, "ns5:GetTaskFinishInfoByTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns5__GetTaskFinishInfoByTime ** SOAP_FMAC4 soap_get_PointerTo_ns5__GetTaskFinishInfoByTime(struct soap*, _ns5__GetTaskFinishInfoByTime **, const char*, const char*);

#ifndef soap_read_PointerTo_ns5__GetTaskFinishInfoByTime
#define soap_read_PointerTo_ns5__GetTaskFinishInfoByTime(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTo_ns5__GetTaskFinishInfoByTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__TaskExcuteInfos
#define SOAP_TYPE_TaskFinish_PointerTons5__TaskExcuteInfos (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__TaskExcuteInfos(struct soap*, ns5__TaskExcuteInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__TaskExcuteInfos(struct soap*, const char *, int, ns5__TaskExcuteInfos *const*, const char *);
SOAP_FMAC3 ns5__TaskExcuteInfos ** SOAP_FMAC4 soap_in_PointerTons5__TaskExcuteInfos(struct soap*, const char*, ns5__TaskExcuteInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__TaskExcuteInfos(struct soap*, ns5__TaskExcuteInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__TaskExcuteInfos
#define soap_write_PointerTons5__TaskExcuteInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__TaskExcuteInfos(soap, data),0) || TaskFinish::soap_put_PointerTons5__TaskExcuteInfos(soap, data, "ns5:TaskExcuteInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskExcuteInfos ** SOAP_FMAC4 soap_get_PointerTons5__TaskExcuteInfos(struct soap*, ns5__TaskExcuteInfos **, const char*, const char*);

#ifndef soap_read_PointerTons5__TaskExcuteInfos
#define soap_read_PointerTons5__TaskExcuteInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__TaskExcuteInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__TaskFinishInfos
#define SOAP_TYPE_TaskFinish_PointerTons5__TaskFinishInfos (98)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__TaskFinishInfos(struct soap*, ns5__TaskFinishInfos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__TaskFinishInfos(struct soap*, const char *, int, ns5__TaskFinishInfos *const*, const char *);
SOAP_FMAC3 ns5__TaskFinishInfos ** SOAP_FMAC4 soap_in_PointerTons5__TaskFinishInfos(struct soap*, const char*, ns5__TaskFinishInfos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__TaskFinishInfos(struct soap*, ns5__TaskFinishInfos *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__TaskFinishInfos
#define soap_write_PointerTons5__TaskFinishInfos(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__TaskFinishInfos(soap, data),0) || TaskFinish::soap_put_PointerTons5__TaskFinishInfos(soap, data, "ns5:TaskFinishInfos", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskFinishInfos ** SOAP_FMAC4 soap_get_PointerTons5__TaskFinishInfos(struct soap*, ns5__TaskFinishInfos **, const char*, const char*);

#ifndef soap_read_PointerTons5__TaskFinishInfos
#define soap_read_PointerTons5__TaskFinishInfos(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__TaskFinishInfos(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__TaskExcuteInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__TaskExcuteInfo (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__TaskExcuteInfo(struct soap*, ns5__TaskExcuteInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__TaskExcuteInfo(struct soap*, const char *, int, ns5__TaskExcuteInfo *const*, const char *);
SOAP_FMAC3 ns5__TaskExcuteInfo ** SOAP_FMAC4 soap_in_PointerTons5__TaskExcuteInfo(struct soap*, const char*, ns5__TaskExcuteInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__TaskExcuteInfo(struct soap*, ns5__TaskExcuteInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__TaskExcuteInfo
#define soap_write_PointerTons5__TaskExcuteInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__TaskExcuteInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__TaskExcuteInfo(soap, data, "ns5:TaskExcuteInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskExcuteInfo ** SOAP_FMAC4 soap_get_PointerTons5__TaskExcuteInfo(struct soap*, ns5__TaskExcuteInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__TaskExcuteInfo
#define soap_read_PointerTons5__TaskExcuteInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__TaskExcuteInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__TaskFinishInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__TaskFinishInfo (94)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__TaskFinishInfo(struct soap*, ns5__TaskFinishInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__TaskFinishInfo(struct soap*, const char *, int, ns5__TaskFinishInfo *const*, const char *);
SOAP_FMAC3 ns5__TaskFinishInfo ** SOAP_FMAC4 soap_in_PointerTons5__TaskFinishInfo(struct soap*, const char*, ns5__TaskFinishInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__TaskFinishInfo(struct soap*, ns5__TaskFinishInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__TaskFinishInfo
#define soap_write_PointerTons5__TaskFinishInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__TaskFinishInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__TaskFinishInfo(soap, data, "ns5:TaskFinishInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskFinishInfo ** SOAP_FMAC4 soap_get_PointerTons5__TaskFinishInfo(struct soap*, ns5__TaskFinishInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__TaskFinishInfo
#define soap_read_PointerTons5__TaskFinishInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__TaskFinishInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__TaskPathInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__TaskPathInfo (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__TaskPathInfo(struct soap*, ns5__TaskPathInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__TaskPathInfo(struct soap*, const char *, int, ns5__TaskPathInfo *const*, const char *);
SOAP_FMAC3 ns5__TaskPathInfo ** SOAP_FMAC4 soap_in_PointerTons5__TaskPathInfo(struct soap*, const char*, ns5__TaskPathInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__TaskPathInfo(struct soap*, ns5__TaskPathInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__TaskPathInfo
#define soap_write_PointerTons5__TaskPathInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__TaskPathInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__TaskPathInfo(soap, data, "ns5:TaskPathInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__TaskPathInfo ** SOAP_FMAC4 soap_get_PointerTons5__TaskPathInfo(struct soap*, ns5__TaskPathInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__TaskPathInfo
#define soap_read_PointerTons5__TaskPathInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__TaskPathInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__PatrolPointInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__PatrolPointInfo (90)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__PatrolPointInfo(struct soap*, ns5__PatrolPointInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__PatrolPointInfo(struct soap*, const char *, int, ns5__PatrolPointInfo *const*, const char *);
SOAP_FMAC3 ns5__PatrolPointInfo ** SOAP_FMAC4 soap_in_PointerTons5__PatrolPointInfo(struct soap*, const char*, ns5__PatrolPointInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__PatrolPointInfo(struct soap*, ns5__PatrolPointInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__PatrolPointInfo
#define soap_write_PointerTons5__PatrolPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__PatrolPointInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__PatrolPointInfo(soap, data, "ns5:PatrolPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__PatrolPointInfo ** SOAP_FMAC4 soap_get_PointerTons5__PatrolPointInfo(struct soap*, ns5__PatrolPointInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__PatrolPointInfo
#define soap_read_PointerTons5__PatrolPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__PatrolPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__DockPointInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__DockPointInfo (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__DockPointInfo(struct soap*, ns5__DockPointInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__DockPointInfo(struct soap*, const char *, int, ns5__DockPointInfo *const*, const char *);
SOAP_FMAC3 ns5__DockPointInfo ** SOAP_FMAC4 soap_in_PointerTons5__DockPointInfo(struct soap*, const char*, ns5__DockPointInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__DockPointInfo(struct soap*, ns5__DockPointInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__DockPointInfo
#define soap_write_PointerTons5__DockPointInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__DockPointInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__DockPointInfo(soap, data, "ns5:DockPointInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__DockPointInfo ** SOAP_FMAC4 soap_get_PointerTons5__DockPointInfo(struct soap*, ns5__DockPointInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__DockPointInfo
#define soap_read_PointerTons5__DockPointInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__DockPointInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__MapEdgeInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__MapEdgeInfo (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__MapEdgeInfo(struct soap*, ns5__MapEdgeInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__MapEdgeInfo(struct soap*, const char *, int, ns5__MapEdgeInfo *const*, const char *);
SOAP_FMAC3 ns5__MapEdgeInfo ** SOAP_FMAC4 soap_in_PointerTons5__MapEdgeInfo(struct soap*, const char*, ns5__MapEdgeInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__MapEdgeInfo(struct soap*, ns5__MapEdgeInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__MapEdgeInfo
#define soap_write_PointerTons5__MapEdgeInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__MapEdgeInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__MapEdgeInfo(soap, data, "ns5:MapEdgeInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__MapEdgeInfo ** SOAP_FMAC4 soap_get_PointerTons5__MapEdgeInfo(struct soap*, ns5__MapEdgeInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__MapEdgeInfo
#define soap_read_PointerTons5__MapEdgeInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__MapEdgeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__PatrolAreaInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__PatrolAreaInfo (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__PatrolAreaInfo(struct soap*, ns5__PatrolAreaInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__PatrolAreaInfo(struct soap*, const char *, int, ns5__PatrolAreaInfo *const*, const char *);
SOAP_FMAC3 ns5__PatrolAreaInfo ** SOAP_FMAC4 soap_in_PointerTons5__PatrolAreaInfo(struct soap*, const char*, ns5__PatrolAreaInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__PatrolAreaInfo(struct soap*, ns5__PatrolAreaInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__PatrolAreaInfo
#define soap_write_PointerTons5__PatrolAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__PatrolAreaInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__PatrolAreaInfo(soap, data, "ns5:PatrolAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__PatrolAreaInfo ** SOAP_FMAC4 soap_get_PointerTons5__PatrolAreaInfo(struct soap*, ns5__PatrolAreaInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__PatrolAreaInfo
#define soap_read_PointerTons5__PatrolAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__PatrolAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__MapAreaInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__MapAreaInfo (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__MapAreaInfo(struct soap*, ns5__MapAreaInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__MapAreaInfo(struct soap*, const char *, int, ns5__MapAreaInfo *const*, const char *);
SOAP_FMAC3 ns5__MapAreaInfo ** SOAP_FMAC4 soap_in_PointerTons5__MapAreaInfo(struct soap*, const char*, ns5__MapAreaInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__MapAreaInfo(struct soap*, ns5__MapAreaInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__MapAreaInfo
#define soap_write_PointerTons5__MapAreaInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__MapAreaInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__MapAreaInfo(soap, data, "ns5:MapAreaInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__MapAreaInfo ** SOAP_FMAC4 soap_get_PointerTons5__MapAreaInfo(struct soap*, ns5__MapAreaInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__MapAreaInfo
#define soap_read_PointerTons5__MapAreaInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__MapAreaInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__RobotAlarmInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__RobotAlarmInfo (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RobotAlarmInfo(struct soap*, ns5__RobotAlarmInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RobotAlarmInfo(struct soap*, const char *, int, ns5__RobotAlarmInfo *const*, const char *);
SOAP_FMAC3 ns5__RobotAlarmInfo ** SOAP_FMAC4 soap_in_PointerTons5__RobotAlarmInfo(struct soap*, const char*, ns5__RobotAlarmInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RobotAlarmInfo(struct soap*, ns5__RobotAlarmInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__RobotAlarmInfo
#define soap_write_PointerTons5__RobotAlarmInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__RobotAlarmInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__RobotAlarmInfo(soap, data, "ns5:RobotAlarmInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotAlarmInfo ** SOAP_FMAC4 soap_get_PointerTons5__RobotAlarmInfo(struct soap*, ns5__RobotAlarmInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__RobotAlarmInfo
#define soap_read_PointerTons5__RobotAlarmInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__RobotAlarmInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__RobotGasInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__RobotGasInfo (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RobotGasInfo(struct soap*, ns5__RobotGasInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RobotGasInfo(struct soap*, const char *, int, ns5__RobotGasInfo *const*, const char *);
SOAP_FMAC3 ns5__RobotGasInfo ** SOAP_FMAC4 soap_in_PointerTons5__RobotGasInfo(struct soap*, const char*, ns5__RobotGasInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RobotGasInfo(struct soap*, ns5__RobotGasInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__RobotGasInfo
#define soap_write_PointerTons5__RobotGasInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__RobotGasInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__RobotGasInfo(soap, data, "ns5:RobotGasInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotGasInfo ** SOAP_FMAC4 soap_get_PointerTons5__RobotGasInfo(struct soap*, ns5__RobotGasInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__RobotGasInfo
#define soap_read_PointerTons5__RobotGasInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__RobotGasInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__RobotMileageInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__RobotMileageInfo (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RobotMileageInfo(struct soap*, ns5__RobotMileageInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RobotMileageInfo(struct soap*, const char *, int, ns5__RobotMileageInfo *const*, const char *);
SOAP_FMAC3 ns5__RobotMileageInfo ** SOAP_FMAC4 soap_in_PointerTons5__RobotMileageInfo(struct soap*, const char*, ns5__RobotMileageInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RobotMileageInfo(struct soap*, ns5__RobotMileageInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__RobotMileageInfo
#define soap_write_PointerTons5__RobotMileageInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__RobotMileageInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__RobotMileageInfo(soap, data, "ns5:RobotMileageInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotMileageInfo ** SOAP_FMAC4 soap_get_PointerTons5__RobotMileageInfo(struct soap*, ns5__RobotMileageInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__RobotMileageInfo
#define soap_read_PointerTons5__RobotMileageInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__RobotMileageInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__RobotYunTaiInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__RobotYunTaiInfo (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RobotYunTaiInfo(struct soap*, ns5__RobotYunTaiInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RobotYunTaiInfo(struct soap*, const char *, int, ns5__RobotYunTaiInfo *const*, const char *);
SOAP_FMAC3 ns5__RobotYunTaiInfo ** SOAP_FMAC4 soap_in_PointerTons5__RobotYunTaiInfo(struct soap*, const char*, ns5__RobotYunTaiInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RobotYunTaiInfo(struct soap*, ns5__RobotYunTaiInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__RobotYunTaiInfo
#define soap_write_PointerTons5__RobotYunTaiInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__RobotYunTaiInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__RobotYunTaiInfo(soap, data, "ns5:RobotYunTaiInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotYunTaiInfo ** SOAP_FMAC4 soap_get_PointerTons5__RobotYunTaiInfo(struct soap*, ns5__RobotYunTaiInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__RobotYunTaiInfo
#define soap_read_PointerTons5__RobotYunTaiInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__RobotYunTaiInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__RobotPosInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__RobotPosInfo (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RobotPosInfo(struct soap*, ns5__RobotPosInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RobotPosInfo(struct soap*, const char *, int, ns5__RobotPosInfo *const*, const char *);
SOAP_FMAC3 ns5__RobotPosInfo ** SOAP_FMAC4 soap_in_PointerTons5__RobotPosInfo(struct soap*, const char*, ns5__RobotPosInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RobotPosInfo(struct soap*, ns5__RobotPosInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__RobotPosInfo
#define soap_write_PointerTons5__RobotPosInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__RobotPosInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__RobotPosInfo(soap, data, "ns5:RobotPosInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotPosInfo ** SOAP_FMAC4 soap_get_PointerTons5__RobotPosInfo(struct soap*, ns5__RobotPosInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__RobotPosInfo
#define soap_read_PointerTons5__RobotPosInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__RobotPosInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__RobotTaskState
#define SOAP_TYPE_TaskFinish_PointerTons5__RobotTaskState (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RobotTaskState(struct soap*, ns5__RobotTaskState *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RobotTaskState(struct soap*, const char *, int, ns5__RobotTaskState *const*, const char *);
SOAP_FMAC3 ns5__RobotTaskState ** SOAP_FMAC4 soap_in_PointerTons5__RobotTaskState(struct soap*, const char*, ns5__RobotTaskState **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RobotTaskState(struct soap*, ns5__RobotTaskState *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__RobotTaskState
#define soap_write_PointerTons5__RobotTaskState(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__RobotTaskState(soap, data),0) || TaskFinish::soap_put_PointerTons5__RobotTaskState(soap, data, "ns5:RobotTaskState", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotTaskState ** SOAP_FMAC4 soap_get_PointerTons5__RobotTaskState(struct soap*, ns5__RobotTaskState **, const char*, const char*);

#ifndef soap_read_PointerTons5__RobotTaskState
#define soap_read_PointerTons5__RobotTaskState(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__RobotTaskState(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__SpeedInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__SpeedInfo (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__SpeedInfo(struct soap*, ns5__SpeedInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__SpeedInfo(struct soap*, const char *, int, ns5__SpeedInfo *const*, const char *);
SOAP_FMAC3 ns5__SpeedInfo ** SOAP_FMAC4 soap_in_PointerTons5__SpeedInfo(struct soap*, const char*, ns5__SpeedInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__SpeedInfo(struct soap*, ns5__SpeedInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__SpeedInfo
#define soap_write_PointerTons5__SpeedInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__SpeedInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__SpeedInfo(soap, data, "ns5:SpeedInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__SpeedInfo ** SOAP_FMAC4 soap_get_PointerTons5__SpeedInfo(struct soap*, ns5__SpeedInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__SpeedInfo
#define soap_read_PointerTons5__SpeedInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__SpeedInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__BatteryInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__BatteryInfo (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__BatteryInfo(struct soap*, ns5__BatteryInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__BatteryInfo(struct soap*, const char *, int, ns5__BatteryInfo *const*, const char *);
SOAP_FMAC3 ns5__BatteryInfo ** SOAP_FMAC4 soap_in_PointerTons5__BatteryInfo(struct soap*, const char*, ns5__BatteryInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__BatteryInfo(struct soap*, ns5__BatteryInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__BatteryInfo
#define soap_write_PointerTons5__BatteryInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__BatteryInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__BatteryInfo(soap, data, "ns5:BatteryInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__BatteryInfo ** SOAP_FMAC4 soap_get_PointerTons5__BatteryInfo(struct soap*, ns5__BatteryInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__BatteryInfo
#define soap_read_PointerTons5__BatteryInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__BatteryInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__RobotInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__RobotInfo (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__RobotInfo(struct soap*, ns5__RobotInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__RobotInfo(struct soap*, const char *, int, ns5__RobotInfo *const*, const char *);
SOAP_FMAC3 ns5__RobotInfo ** SOAP_FMAC4 soap_in_PointerTons5__RobotInfo(struct soap*, const char*, ns5__RobotInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__RobotInfo(struct soap*, ns5__RobotInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__RobotInfo
#define soap_write_PointerTons5__RobotInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__RobotInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__RobotInfo(soap, data, "ns5:RobotInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__RobotInfo ** SOAP_FMAC4 soap_get_PointerTons5__RobotInfo(struct soap*, ns5__RobotInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__RobotInfo
#define soap_read_PointerTons5__RobotInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__RobotInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_PointerTons5__ConnectInfo
#define SOAP_TYPE_TaskFinish_PointerTons5__ConnectInfo (60)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ConnectInfo(struct soap*, ns5__ConnectInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ConnectInfo(struct soap*, const char *, int, ns5__ConnectInfo *const*, const char *);
SOAP_FMAC3 ns5__ConnectInfo ** SOAP_FMAC4 soap_in_PointerTons5__ConnectInfo(struct soap*, const char*, ns5__ConnectInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ConnectInfo(struct soap*, ns5__ConnectInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__ConnectInfo
#define soap_write_PointerTons5__ConnectInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_PointerTons5__ConnectInfo(soap, data),0) || TaskFinish::soap_put_PointerTons5__ConnectInfo(soap, data, "ns5:ConnectInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns5__ConnectInfo ** SOAP_FMAC4 soap_get_PointerTons5__ConnectInfo(struct soap*, ns5__ConnectInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__ConnectInfo
#define soap_read_PointerTons5__ConnectInfo(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_PointerTons5__ConnectInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish__QName
#define SOAP_TYPE_TaskFinish__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize__QName(soap, data),0) || TaskFinish::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_string
#define SOAP_TYPE_TaskFinish_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (TaskFinish::soap_serialize_string(soap, data),0) || TaskFinish::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !TaskFinish::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__TaskExcuteInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__TaskExcuteInfo (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__TaskExcuteInfo(struct soap*, std::vector<ns5__TaskExcuteInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__TaskExcuteInfo(struct soap*, const std::vector<ns5__TaskExcuteInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__TaskExcuteInfo(struct soap*, const char*, int, const std::vector<ns5__TaskExcuteInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__TaskExcuteInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__TaskExcuteInfo(struct soap*, const char*, std::vector<ns5__TaskExcuteInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__TaskExcuteInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__TaskExcuteInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__TaskExcuteInfo * > * soap_new_std__vectorTemplateOfPointerTons5__TaskExcuteInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__TaskExcuteInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__TaskExcuteInfo(struct soap *soap, std::vector<ns5__TaskExcuteInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__TaskExcuteInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__TaskFinishInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__TaskFinishInfo (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__TaskFinishInfo(struct soap*, std::vector<ns5__TaskFinishInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__TaskFinishInfo(struct soap*, const std::vector<ns5__TaskFinishInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__TaskFinishInfo(struct soap*, const char*, int, const std::vector<ns5__TaskFinishInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__TaskFinishInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__TaskFinishInfo(struct soap*, const char*, std::vector<ns5__TaskFinishInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__TaskFinishInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__TaskFinishInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__TaskFinishInfo * > * soap_new_std__vectorTemplateOfPointerTons5__TaskFinishInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__TaskFinishInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__TaskFinishInfo(struct soap *soap, std::vector<ns5__TaskFinishInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__TaskFinishInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__TaskPathInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__TaskPathInfo (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__TaskPathInfo(struct soap*, std::vector<ns5__TaskPathInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__TaskPathInfo(struct soap*, const std::vector<ns5__TaskPathInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__TaskPathInfo(struct soap*, const char*, int, const std::vector<ns5__TaskPathInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__TaskPathInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__TaskPathInfo(struct soap*, const char*, std::vector<ns5__TaskPathInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__TaskPathInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__TaskPathInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__TaskPathInfo * > * soap_new_std__vectorTemplateOfPointerTons5__TaskPathInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__TaskPathInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__TaskPathInfo(struct soap *soap, std::vector<ns5__TaskPathInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__TaskPathInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__PatrolPointInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__PatrolPointInfo (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__PatrolPointInfo(struct soap*, std::vector<ns5__PatrolPointInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__PatrolPointInfo(struct soap*, const std::vector<ns5__PatrolPointInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__PatrolPointInfo(struct soap*, const char*, int, const std::vector<ns5__PatrolPointInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__PatrolPointInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__PatrolPointInfo(struct soap*, const char*, std::vector<ns5__PatrolPointInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__PatrolPointInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__PatrolPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__PatrolPointInfo * > * soap_new_std__vectorTemplateOfPointerTons5__PatrolPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__PatrolPointInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__PatrolPointInfo(struct soap *soap, std::vector<ns5__PatrolPointInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__PatrolPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__DockPointInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__DockPointInfo (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__DockPointInfo(struct soap*, std::vector<ns5__DockPointInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__DockPointInfo(struct soap*, const std::vector<ns5__DockPointInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__DockPointInfo(struct soap*, const char*, int, const std::vector<ns5__DockPointInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__DockPointInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__DockPointInfo(struct soap*, const char*, std::vector<ns5__DockPointInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__DockPointInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__DockPointInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__DockPointInfo * > * soap_new_std__vectorTemplateOfPointerTons5__DockPointInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__DockPointInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__DockPointInfo(struct soap *soap, std::vector<ns5__DockPointInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__DockPointInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfstd__string
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfstd__string (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__MapEdgeInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__MapEdgeInfo (86)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__MapEdgeInfo(struct soap*, std::vector<ns5__MapEdgeInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__MapEdgeInfo(struct soap*, const std::vector<ns5__MapEdgeInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__MapEdgeInfo(struct soap*, const char*, int, const std::vector<ns5__MapEdgeInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__MapEdgeInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__MapEdgeInfo(struct soap*, const char*, std::vector<ns5__MapEdgeInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__MapEdgeInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__MapEdgeInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__MapEdgeInfo * > * soap_new_std__vectorTemplateOfPointerTons5__MapEdgeInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__MapEdgeInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__MapEdgeInfo(struct soap *soap, std::vector<ns5__MapEdgeInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__MapEdgeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__PatrolAreaInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__PatrolAreaInfo (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__PatrolAreaInfo(struct soap*, std::vector<ns5__PatrolAreaInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__PatrolAreaInfo(struct soap*, const std::vector<ns5__PatrolAreaInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__PatrolAreaInfo(struct soap*, const char*, int, const std::vector<ns5__PatrolAreaInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__PatrolAreaInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__PatrolAreaInfo(struct soap*, const char*, std::vector<ns5__PatrolAreaInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__PatrolAreaInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__PatrolAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__PatrolAreaInfo * > * soap_new_std__vectorTemplateOfPointerTons5__PatrolAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__PatrolAreaInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__PatrolAreaInfo(struct soap *soap, std::vector<ns5__PatrolAreaInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__PatrolAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__MapAreaInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__MapAreaInfo (82)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__MapAreaInfo(struct soap*, std::vector<ns5__MapAreaInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__MapAreaInfo(struct soap*, const std::vector<ns5__MapAreaInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__MapAreaInfo(struct soap*, const char*, int, const std::vector<ns5__MapAreaInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__MapAreaInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__MapAreaInfo(struct soap*, const char*, std::vector<ns5__MapAreaInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__MapAreaInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__MapAreaInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__MapAreaInfo * > * soap_new_std__vectorTemplateOfPointerTons5__MapAreaInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__MapAreaInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__MapAreaInfo(struct soap *soap, std::vector<ns5__MapAreaInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__MapAreaInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotAlarmInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotAlarmInfo (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RobotAlarmInfo(struct soap*, std::vector<ns5__RobotAlarmInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RobotAlarmInfo(struct soap*, const std::vector<ns5__RobotAlarmInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RobotAlarmInfo(struct soap*, const char*, int, const std::vector<ns5__RobotAlarmInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__RobotAlarmInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RobotAlarmInfo(struct soap*, const char*, std::vector<ns5__RobotAlarmInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__RobotAlarmInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RobotAlarmInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__RobotAlarmInfo * > * soap_new_std__vectorTemplateOfPointerTons5__RobotAlarmInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__RobotAlarmInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__RobotAlarmInfo(struct soap *soap, std::vector<ns5__RobotAlarmInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__RobotAlarmInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotGasInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotGasInfo (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RobotGasInfo(struct soap*, std::vector<ns5__RobotGasInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RobotGasInfo(struct soap*, const std::vector<ns5__RobotGasInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RobotGasInfo(struct soap*, const char*, int, const std::vector<ns5__RobotGasInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__RobotGasInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RobotGasInfo(struct soap*, const char*, std::vector<ns5__RobotGasInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__RobotGasInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RobotGasInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__RobotGasInfo * > * soap_new_std__vectorTemplateOfPointerTons5__RobotGasInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__RobotGasInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__RobotGasInfo(struct soap *soap, std::vector<ns5__RobotGasInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__RobotGasInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotMileageInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotMileageInfo (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RobotMileageInfo(struct soap*, std::vector<ns5__RobotMileageInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RobotMileageInfo(struct soap*, const std::vector<ns5__RobotMileageInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RobotMileageInfo(struct soap*, const char*, int, const std::vector<ns5__RobotMileageInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__RobotMileageInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RobotMileageInfo(struct soap*, const char*, std::vector<ns5__RobotMileageInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__RobotMileageInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RobotMileageInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__RobotMileageInfo * > * soap_new_std__vectorTemplateOfPointerTons5__RobotMileageInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__RobotMileageInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__RobotMileageInfo(struct soap *soap, std::vector<ns5__RobotMileageInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__RobotMileageInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo(struct soap*, std::vector<ns5__RobotYunTaiInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo(struct soap*, const std::vector<ns5__RobotYunTaiInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo(struct soap*, const char*, int, const std::vector<ns5__RobotYunTaiInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__RobotYunTaiInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo(struct soap*, const char*, std::vector<ns5__RobotYunTaiInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__RobotYunTaiInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__RobotYunTaiInfo * > * soap_new_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo(struct soap *soap, std::vector<ns5__RobotYunTaiInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__RobotYunTaiInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotPosInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotPosInfo (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RobotPosInfo(struct soap*, std::vector<ns5__RobotPosInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RobotPosInfo(struct soap*, const std::vector<ns5__RobotPosInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RobotPosInfo(struct soap*, const char*, int, const std::vector<ns5__RobotPosInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__RobotPosInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RobotPosInfo(struct soap*, const char*, std::vector<ns5__RobotPosInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__RobotPosInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RobotPosInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__RobotPosInfo * > * soap_new_std__vectorTemplateOfPointerTons5__RobotPosInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__RobotPosInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__RobotPosInfo(struct soap *soap, std::vector<ns5__RobotPosInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__RobotPosInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotTaskState
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotTaskState (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RobotTaskState(struct soap*, std::vector<ns5__RobotTaskState * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RobotTaskState(struct soap*, const std::vector<ns5__RobotTaskState * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RobotTaskState(struct soap*, const char*, int, const std::vector<ns5__RobotTaskState * >*, const char*);
SOAP_FMAC3 std::vector<ns5__RobotTaskState * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RobotTaskState(struct soap*, const char*, std::vector<ns5__RobotTaskState * >*, const char*);
SOAP_FMAC1 std::vector<ns5__RobotTaskState * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RobotTaskState(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__RobotTaskState * > * soap_new_std__vectorTemplateOfPointerTons5__RobotTaskState(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__RobotTaskState(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__RobotTaskState(struct soap *soap, std::vector<ns5__RobotTaskState * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__RobotTaskState(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__SpeedInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__SpeedInfo (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__SpeedInfo(struct soap*, std::vector<ns5__SpeedInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__SpeedInfo(struct soap*, const std::vector<ns5__SpeedInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__SpeedInfo(struct soap*, const char*, int, const std::vector<ns5__SpeedInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__SpeedInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__SpeedInfo(struct soap*, const char*, std::vector<ns5__SpeedInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__SpeedInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__SpeedInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__SpeedInfo * > * soap_new_std__vectorTemplateOfPointerTons5__SpeedInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__SpeedInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__SpeedInfo(struct soap *soap, std::vector<ns5__SpeedInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__SpeedInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__BatteryInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__BatteryInfo (66)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__BatteryInfo(struct soap*, std::vector<ns5__BatteryInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__BatteryInfo(struct soap*, const std::vector<ns5__BatteryInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__BatteryInfo(struct soap*, const char*, int, const std::vector<ns5__BatteryInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__BatteryInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__BatteryInfo(struct soap*, const char*, std::vector<ns5__BatteryInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__BatteryInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__BatteryInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__BatteryInfo * > * soap_new_std__vectorTemplateOfPointerTons5__BatteryInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__BatteryInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__BatteryInfo(struct soap *soap, std::vector<ns5__BatteryInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__BatteryInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__RobotInfo (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__RobotInfo(struct soap*, std::vector<ns5__RobotInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__RobotInfo(struct soap*, const std::vector<ns5__RobotInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__RobotInfo(struct soap*, const char*, int, const std::vector<ns5__RobotInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__RobotInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__RobotInfo(struct soap*, const char*, std::vector<ns5__RobotInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__RobotInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__RobotInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__RobotInfo * > * soap_new_std__vectorTemplateOfPointerTons5__RobotInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__RobotInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__RobotInfo(struct soap *soap, std::vector<ns5__RobotInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__RobotInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__ConnectInfo
#define SOAP_TYPE_TaskFinish_std__vectorTemplateOfPointerTons5__ConnectInfo (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__ConnectInfo(struct soap*, std::vector<ns5__ConnectInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__ConnectInfo(struct soap*, const std::vector<ns5__ConnectInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__ConnectInfo(struct soap*, const char*, int, const std::vector<ns5__ConnectInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__ConnectInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__ConnectInfo(struct soap*, const char*, std::vector<ns5__ConnectInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__ConnectInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__ConnectInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__ConnectInfo * > * soap_new_std__vectorTemplateOfPointerTons5__ConnectInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__ConnectInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__ConnectInfo(struct soap *soap, std::vector<ns5__ConnectInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__ConnectInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

} // namespace TaskFinish


#endif

/* End of TaskFinishH.h */
